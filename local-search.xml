<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>xxx笔记</title>
    <link href="/2022/11/28/xxx%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/11/28/xxx%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2022/11/28/test/"/>
    <url>/2022/11/28/test/</url>
    
    <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/27/hello-world/"/>
    <url>/2022/11/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo</title>
    <link href="/2022/11/27/Hexo/"/>
    <url>/2022/11/27/Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><ol><li><p>使用nodejs安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p>初始化</p><ol><li><p>方式一</p><ul><li><p>在指定文件夹中新建所需文件夹，如 myblog</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init myblog<br></code></pre></td></tr></table></figure></li><li><p>进入到 myblog 目录下，安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd &lt;folder&gt;<br>npm install<br></code></pre></td></tr></table></figure></li></ul></li><li><p>方式二</p><ul><li><p>在指定文件夹中新建 空文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir myblog<br></code></pre></td></tr></table></figure></li><li><p>进入到 myblog 目录中，初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd myblog<br>hexo init<br></code></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>启动服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo server<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者简写为</span><br>hexo s<br></code></pre></td></tr></table></figure><p>若出现报错：FATAL Port 4000 has been used. Try other port instead.</p><p>应该是端口号被占用，需要更改端口号，尝试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo server -p 5000<br></code></pre></td></tr></table></figure><p>出现以下内容，表示启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">INFO  Validating config<br>INFO  Start processing<br>INFO  Hexo is running at http://localhost:5000 . Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure></li></ol><h2 id="主题开发"><a href="#主题开发" class="headerlink" title="主题开发"></a>主题开发</h2><h3 id="hexo-theme-fluid-主题"><a href="#hexo-theme-fluid-主题" class="headerlink" title="hexo-theme-fluid 主题"></a>hexo-theme-fluid 主题</h3><ol><li><p>下载安装</p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a> 下载主题包，并解压到 myblog 文件夹的themes目录下，重名为 fluid 文件夹</p></li><li><p>配置</p><p>在文件 <code>_config.yml</code> 中，将默认的 <code>themes: landscape</code> 改为 <code>themes: fluid</code></p></li><li><p>手动创建 about 页面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page about<br></code></pre></td></tr></table></figure><p>创建好后，在 <code>/source/about/index.md</code> 中添加 <code>layout</code> 属性，如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: about<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>&lt;!-- 可以在此处添加自己的内容，支持 markdown 和 HTML --&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="文章发表"><a href="#文章发表" class="headerlink" title="文章发表"></a>文章发表</h2><h3 id="hexo-方式"><a href="#hexo-方式" class="headerlink" title="hexo 方式"></a>hexo 方式</h3><h3 id="迁移笔记"><a href="#迁移笔记" class="headerlink" title="迁移笔记"></a>迁移笔记</h3><p>将普通 markdown 文件迁移到 hexo 中</p><ol><li>复制到 <code>_posts</code> 文件夹下</li><li>运行 <code>gen.py</code> 统一给 <code>_posts</code> 文件夹下的所有文件添加 <code>front mattter</code></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS的引入</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E7%9A%84%E5%BC%95%E5%85%A5/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E7%9A%84%E5%BC%95%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS的引入"><a href="#CSS的引入" class="headerlink" title="CSS的引入"></a>CSS的引入</h2><p>按照CSS样式书写的位置（或者引入的方式）CSS样式表可以分为三大类：</p><ul><li>内部样式表（嵌入式）</li><li>行内样式表（行内式）</li><li>外部样式表（链接式）</li></ul><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><p>又称内嵌样式表，是写到html页面内部，是将所有的CSS代码抽取出来，单独放到&lt;style&gt;标签中</p><ul><li>&lt;style&gt;标签理论上可以放在html文档的任何地方，但一般会放在文档的&lt;head&gt;标签中</li><li>通过这种方式，可以方便控制当前整个页面总的元素样式设置</li><li>代码结构清晰，但没有实现结构与样式完全分离</li><li>使用内部样式表设定CSS，通常也被称为<strong>嵌入式引入</strong>、</li></ul><h3 id="行内样式表"><a href="#行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h3><p>又称内联样式表，是在元素标签内部的style属性中设定CSS样式，适用于修改简单样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span><br>    好好学习，天天向上<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><p>实际开发中都是外部样式表。</p><p>核心是：样单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用</p><p>引入外部样式分为两步：</p><ol><li>新建一个后缀名为.css的样式文件，把所有CSS代码都放入此文件中</li><li>再HTML页面中，使用&lt;link&gt;标签引入这个这个文件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css文件路径&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>rel</td><td>定义当前文档与被链接文档之间的关系，在这里需要指定为stylesheet，表示被链接文档是一个样式表文件</td></tr><tr><td>href</td><td>定义所链接外部样式表文件的url，可以实相对路径，也可以是绝对路径</td></tr></tbody></table><ul><li>使用外部样式表设定CSS，通常也被称为<strong>外链式</strong>或<strong>链接式引入</strong>，这种方式式开发中常用的方式</li></ul>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Chrome调试工具</title>
    <link href="/2022/11/25/Chrome%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/11/25/Chrome%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="Chrome调试工具"><a href="#Chrome调试工具" class="headerlink" title="Chrome调试工具"></a>Chrome调试工具</h2><p>如何使用？</p><ul><li>Ctrl+滚轮可以放大开发者工具代码大小</li><li>左边是HTML元素结构，右边是CSS样式</li><li>右边CSS样式可以改动数值（左右箭头或者直接输入）和查看颜色</li><li>Ctrl+0复原浏览器大小</li><li>如果点击元素，发现右侧没有样式引入，极有可能是类名或者样式引入错误</li><li>如果有样式，但是样式前面有黄色感叹号提示，则是样式属性书写错误</li></ul><p>注意：若在chrome中修改完后，需要复制粘贴到HTML文档中才能真正的更改网页</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>三大特性</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="三大特性"><a href="#三大特性" class="headerlink" title="三大特性"></a>三大特性</h2><p>CSS的三个特性：层叠性、继承性、优先级</p><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>相同选择器给设置相同的样式，此时一个样式就是覆盖（层叠）另一个冲突的样式，层叠性主要解决样式冲突的问题</p><p>层叠性原则：</p><ul><li>样式冲突，遵循的原则就是就近原则，哪个样式离结构近，就执行哪个结构</li><li>样式不冲突，不会层叠</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">35px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>/* div中的文本会显示为粉色，字体大小35px */<br></code></pre></td></tr></table></figure><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>即子标签会继承父标签的某些样式，如文本颜色和字号</p><ul><li><p>恰当使用继承可以简化单吗，降低CSS样式的复杂性</p></li><li><p>子元素可以继承父元素的样式，如：</p><p style="color:red">text-, font-, line- 以及 color属性</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">35px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br>/* p可以继承div的样式 */<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>继承性<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>行高的继承性</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">body &#123;<br>font: 12px/1.5 &#x27;Microsoft yahei&#x27;;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.5表示的是行高是<strong>字体大小的1.5倍</strong></p><ul><li>行高可以跟单位也可以不跟单位</li><li>若子元素没有设置行高，则会继承父元素的行高，且此时子元素的行高是：当前子元素的字体大小*1.5</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="==优先级=="></a>==优先级==</h3><p>当一个元素指定多个选择器，就会有优先级产生</p><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承 或者 *(通配符)</td><td>0000</td></tr><tr><td>元素选择器</td><td>0001</td></tr><tr><td>类选择器、伪类选择器</td><td>0010</td></tr><tr><td>ID选择器</td><td>0100</td></tr><tr><td>行内样式style=“”</td><td>1000</td></tr><tr><td>!important</td><td>无穷大</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">div &#123;<br>color: pink !important;<br>&#125;<br>td &#123; height: 50px !important; &#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>权重是由4组数字组成，但是<strong>不会有进位</strong></li><li>可以理解为<strong>类选择器永远大于元素选择器</strong>，id选择器永远大于类选择器，以此类推</li><li>等级判断从左向右，若某一位数值相同，则判断下一位</li><li><strong>继承的权重是0</strong>，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#father</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* p继承的权重是0，故显示的文字颜色是绿色，而不是红色 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* a链接——浏览器默认制定了一个样式：蓝色的，有下划线，即 a &#123;color: blue;&#125; */</span></span><br><span class="language-css">        <span class="hljs-comment">/* 因此父元素的样式对a链接不起作用，并不会显示body样式里面设置的颜色 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* 要想使a链接文字显示别的颜色，可以重新定义，如：a &#123;color: pink;&#125; */</span></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#00FFFF</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>好好学习，天天向上<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>我是单独的样式<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>权重叠加</strong>：若使复合选择器，则会有权重叠加，需要计算权重</p><ul><li>div ul li 权重为 = 0001+0001+0001 = 0003</li><li>.nav ul li 权重为 = 0010+0001+0001 = 0012</li><li>a:hover 权重为 = 0001+0010 = 0011</li><li>.nav a 权重为 = 0010+0001 = 0011</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 复合选择器会有权重叠加的问题 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* ul li 的权重为 0001 + 0001 = 0002  不会进位*/</span></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* li 的权重为 0001 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* .nav li 权重为 0010 + 0001 = 0011 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>开发<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>语言<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>结构<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>元素显示模式</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/%E5%85%83%E7%B4%A0%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/%E5%85%83%E7%B4%A0%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h2><h3 id="什么是元素显示模式"><a href="#什么是元素显示模式" class="headerlink" title="什么是元素显示模式"></a>什么是元素显示模式</h3><p><strong>作用</strong>：网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好地布局我们的页面</p><p>元素显示模式就是元素（标签）以什么方式进行显示，比如&lt;div&gt;自己独占一行，比如一行可以放多个&lt;span&gt;.</p><p>HTML元素一般分为<strong>块元素</strong>和<strong>行元素</strong></p><h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><p>常见的块元素有：</p><ul><li>&lt;h1&gt;~&lt;h6&gt;</li><li>&lt;p&gt;</li><li>&lt;div&gt;</li><li>&lt;ul&gt; &lt;ol&gt; &lt;li&gt;</li></ul><p>其中&lt;div&gt;是<strong>最典型</strong>的块元素</p><p>块元素特点：</p><ul><li>独占一行</li><li>高度、宽度、外边距以及内边距都可以控制</li><li>宽度默认是容器（父级宽度）的100%</li><li>是一个容器及盒子，里面可以放<strong>行内</strong>或者<strong>块级</strong>元素</li></ul><p><strong>注意：</strong></p><ul><li>文字类的元素不能使用块级元素</li><li>&lt;p&gt;标签主要用于存放文字，因此<strong>&lt;p&gt;里面不能放块级元素，特别是不能放&lt;div&gt;</strong></li><li>同理，&lt;h1&gt;~&lt;h6&gt;等都是文字类块级标签，里面也<strong>不能</strong>放其他块级元素</li></ul><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p>常见的行内元素有：</p><ul><li>&lt;a&gt;</li><li>&lt;strong&gt; &lt;b&gt; &lt;em&gt; &lt;i&gt; &lt;del&gt; &lt;s&gt; &lt;ins&gt; &lt;u&gt; </li><li>&lt;span&gt;</li></ul><p>其中&lt;span&gt;标签是<strong>最典型</strong>的行内元素，也叫内联元素</p><p>行内元素的特点：</p><ul><li>相邻行内元素在一行上，一行可以显示多个</li><li>高、宽直接设置是无效的</li><li>默认宽度就是它本身内容的高度</li><li>行内元素只能容纳文本或者其他行内元素</li></ul><p><strong>注意：</strong></p><ul><li>链接里面不能再放链接</li><li>特殊情况链接&lt;a&gt;里面可以放块级元素，但是给&lt;a&gt;转换以下会计模式更加安全。</li></ul><h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><p>常见的行内块元素有：</p><ul><li>&lt;img /&gt;</li><li>&lt;input /&gt;</li><li>&lt;td&gt;</li></ul><p>它们同时具有块元素和行元素的特点：</p><ul><li>和相邻行内元素(行内块)在一行上，但是他们之间会<strong>有空白缝隙，</strong>一行可以显示多个（行内元素特点）</li><li>默认宽度就是它本身内容的宽度</li><li>高度、宽度、外边距以及内边距可以控制</li></ul><h3 id="元素显示模式转换"><a href="#元素显示模式转换" class="headerlink" title="元素显示模式转换"></a>元素显示模式转换</h3><p>当想要增加&lt;a&gt;的触发范围时，就需要将进行模式转换</p><p>转换方法：</p><table><thead><tr><th>属性：属性值</th><th>作用</th></tr></thead><tbody><tr><td>display: block</td><td>转换为块元素</td></tr><tr><td>display: inline</td><td>转换为行元素</td></tr><tr><td>display: inline-block</td><td>转换为行内块元素</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常见布局技巧</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="常见布局技巧"><a href="#常见布局技巧" class="headerlink" title="常见布局技巧"></a>常见布局技巧</h2><h3 id="margin负值的利用"><a href="#margin负值的利用" class="headerlink" title="margin负值的利用"></a>margin负值的利用</h3><p>让每个盒子往左侧移动 边框大小的负值 正好压住相邻盒子边框</p><p>鼠标经过某个盒子时，提高当前合资的层级即可（若无定位，则加相对定位；若有定位，则加z-index）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;</span><br><span class="language-css">        <span class="hljs-comment">/* 消除边框叠加 */</span></span><br><span class="language-css">        <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">2px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-css">    1. 若盒子没有定位，则鼠标经过时添加相对定位即可实现边框变色</span></span><br><span class="hljs-comment"><span class="language-css">    ul li:hover &#123;</span></span><br><span class="hljs-comment"><span class="language-css">    position: relative;</span></span><br><span class="hljs-comment"><span class="language-css">    border-color: blue;</span></span><br><span class="hljs-comment"><span class="language-css">    &#125; */</span></span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 若每个li都有定位，则为当前鼠标经过的li添加定位叠放z-index提高层次 */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-color</span>: blue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="文字围绕浮动元素"><a href="#文字围绕浮动元素" class="headerlink" title="文字围绕浮动元素"></a>文字围绕浮动元素</h3><p>巧妙应用浮动元素不会压住文字的特性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">135px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.pic</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">110px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">135px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.pic</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/俄乌局势.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        俄罗斯与乌克兰爆发冲突以来，俄乌和平谈判已进行多轮。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="行内块的巧妙应用"><a href="#行内块的巧妙应用" class="headerlink" title="行内块的巧妙应用"></a>行内块的巧妙应用</h3><ol><li>给页码链接的父级添加 text-align: center;  再将页码链接转换为行内块，即可实现页码居中对齐的效果</li><li>转换为行内块后，就可以设置宽高，被将页码垂直居中</li><li>主要代码如下所示：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220325114301191.png" alt="image-20220325114301191" style="zoom:80%;" /><h3 id="CSS三角"><a href="#CSS三角" class="headerlink" title="CSS三角"></a>CSS三角</h3><h4 id="三角写法"><a href="#三角写法" class="headerlink" title="三角写法"></a>三角写法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">        </span><br><span class="language-css"><span class="hljs-comment">/* 三角的写法 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.box4</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">50px</span> solid transparent;</span><br><span class="language-css">        <span class="hljs-attribute">border-left-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">49</span>, <span class="hljs-number">33</span>, <span class="hljs-number">190</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>要做如右所示的效果：<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220323224700894.png" alt="image-20220323224700894" style="zoom:40%;" /></p><p>可以定义两个盒子，其中一个盒子为正方形，为父元素；另一个为三角，为子元素，然后再用定位position来确定小三角的位置。</p><h4 id="三角强化"><a href="#三角强化" class="headerlink" title="三角强化"></a>三角强化</h4><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220325120252453.png" alt="image-20220325120252453" style="zoom:60%;" /><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220325124124753.png" alt="image-20220325124124753" style="zoom:67%;" /><p>实现代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html">.box &#123;<br>    width: 0;<br>    height: 0;<br>    border-top: 100px solid transparent;<br>    border-right: 50px solid rgb(49, 33, 190);<br>    border-bottom: 0px solid pink;<br>    border-left: 0px solid rgb(144, 230, 47);<br>&#125;<br><br>简写为：<br>.box &#123;<br>    width: 0;<br>    height: 0;<br>    border-color: transparent blue transparent transparent;<br>    border-style: solid;<br>    border-width: 100px 50px 0 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS常见需求</title>
    <link href="/2022/11/25/02-CSS/CSS/CSS%E5%B8%B8%E8%A7%81%E9%9C%80%E6%B1%82/"/>
    <url>/2022/11/25/02-CSS/CSS/CSS%E5%B8%B8%E8%A7%81%E9%9C%80%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS常见需求"><a href="#CSS常见需求" class="headerlink" title="CSS常见需求"></a>CSS常见需求</h1><h2 id="不允许用户点击（CSS3）"><a href="#不允许用户点击（CSS3）" class="headerlink" title="不允许用户点击（CSS3）"></a>不允许用户点击（CSS3）</h2><p>user-select: none;</p><h2 id="防止拖拽文本域"><a href="#防止拖拽文本域" class="headerlink" title="防止拖拽文本域"></a>防止拖拽文本域</h2><p>（如：textarea）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">resize: none; <br></code></pre></td></tr></table></figure><h2 id="取消表单轮廓"><a href="#取消表单轮廓" class="headerlink" title="取消表单轮廓"></a>取消表单轮廓</h2><p>(如 input、textarea等)</p><p>效果：鼠标点击后，边框不再变颜色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">outline: none;<br></code></pre></td></tr></table></figure><h2 id="去掉li前面小圆点"><a href="#去掉li前面小圆点" class="headerlink" title="去掉li前面小圆点"></a>去掉li前面小圆点</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">list-style: none;<br></code></pre></td></tr></table></figure><h2 id="单行文字垂直居中"><a href="#单行文字垂直居中" class="headerlink" title="单行文字垂直居中"></a>单行文字<strong>垂直居中</strong></h2><p>将盒子高度与行高相等即可实现</p><h2 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h2><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">li &#123;cursor: pointer;&#125;<br></code></pre></td></tr></table></figure><p>用于设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形式。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>default</td><td>默认</td></tr><tr><td>pointer</td><td>小手</td></tr><tr><td>move</td><td>移动</td></tr><tr><td>text</td><td>文本</td></tr><tr><td>not-allowed</td><td>禁止</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>精灵图</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/%E7%B2%BE%E7%81%B5%E5%9B%BE/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/%E7%B2%BE%E7%81%B5%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h2><p>使用精灵图是为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度</p><ol><li>主要针对背景图片的使用，即把多个小背景/图片整合到一张大图片中</li><li>这个图片也称为sprites 精灵图 或者 雪碧图</li><li>移动背景图片位置，使用background-position</li><li>移动的距离就是这个目标图片的x和y坐标（注意网页中的坐标）</li><li><strong>使用精灵图，一般是向上向左移动，故数值为负值</strong></li><li>使用精灵图需要精确测量每个小背景图片大小和位置</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">59px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">58px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/sprites.png</span>) no-repeat -<span class="hljs-number">182px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box2</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">24px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">24px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span> auto;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/sprites.png</span>) no-repeat -<span class="hljs-number">156px</span> -<span class="hljs-number">107px</span>;</span><br><span class="language-css"></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS初始化</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS初始化"><a href="#CSS初始化" class="headerlink" title="CSS初始化"></a>CSS初始化</h2><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对html文本呈现的差异，照顾浏览器的兼容，需要对CSS初始化</p><p>即重设浏览器的样式（CSS reset）</p><p>每个网页都必须首先进行CSS初始化</p><p><strong>京东CSS初始化 如下：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 把我们所有标签的内外边距清零 */</span><br>* &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-comment">/* em 和 i 斜体的文字不倾斜 */</span><br><span class="hljs-selector-tag">em</span>,<br><span class="hljs-selector-tag">i</span> &#123;<br>    <span class="hljs-attribute">font-style</span>: normal<br>&#125;<br><span class="hljs-comment">/* 去掉li 的小圆点 */</span><br><span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">list-style</span>: none<br>&#125;<br><br><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-comment">/* border 0 照顾低版本浏览器 如果 图片外面包含了链接会有边框的问题 */</span><br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">/* 取消图片底侧有空白缝隙的问题 */</span><br>    <span class="hljs-attribute">vertical-align</span>: middle<br>&#125;<br><br><span class="hljs-selector-tag">button</span> &#123;<br>    <span class="hljs-comment">/* 当我们鼠标经过button 按钮的时候，鼠标变成小手 */</span><br>    <span class="hljs-attribute">cursor</span>: pointer<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>    <span class="hljs-attribute">text-decoration</span>: none<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#c81623</span><br>&#125;<br><br><span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-tag">input</span> &#123;<br>    <span class="hljs-comment">/* &quot;\5B8B\4F53&quot; 就是宋体的意思 这样浏览器兼容性比较好 */</span><br>    <span class="hljs-attribute">font-family</span>: Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="hljs-string">&quot;\5B8B\4F53&quot;</span>, sans-serif<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-comment">/* CSS3 抗锯齿形 让文字显示的更加清晰 */</span><br>    -webkit-<span class="hljs-attribute">font-smoothing</span>: antialiased;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">font</span>: <span class="hljs-number">12px</span>/<span class="hljs-number">1.5</span> Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="hljs-string">&quot;\5B8B\4F53&quot;</span>, sans-serif;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span><br>&#125;<br><br><span class="hljs-selector-class">.hide</span>,<br><span class="hljs-selector-class">.none</span> &#123;<br>    <span class="hljs-attribute">display</span>: none<br>&#125;<br><span class="hljs-comment">/* 清除浮动 */</span><br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;.&quot;</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span> &#123;<br>    *zoom: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS定位</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E5%AE%9A%E4%BD%8D/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E5%AE%9A%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p><strong>浮动</strong>可以让多个块级盒子在一行里没有缝隙排列显示，经常用于横向排列盒子</p><p><strong>定位</strong>则是可以让盒子<strong>自由</strong>的在某个盒子内移动位置或者固定屏幕中的某个位置，并且可以<strong>压住其他盒子。</strong></p><h2 id="定位组成"><a href="#定位组成" class="headerlink" title="定位组成"></a>定位组成</h2><p>定位：将盒子定在某一个位置，故定位也是在摆放盒子，按照定位的方式移动盒子</p><p><strong>定位 = 定位模式 + 边偏移</strong></p><p><strong>定位模式</strong>用于指定一个元素在文档中的定位方式</p><p><strong>边偏移</strong>则决定了该元素的最终位置</p><h2 id="定位模式"><a href="#定位模式" class="headerlink" title="定位模式"></a>定位模式</h2><p>用于指定一个元素在文档中的定位方式</p><p>通过position属性来设置</p><table><thead><tr><th>值</th><th>语义</th></tr></thead><tbody><tr><td>static</td><td>静态定位</td></tr><tr><td>relative</td><td>相对定位</td></tr><tr><td>absolute</td><td>绝对定位</td></tr><tr><td>fixed</td><td>固定定位</td></tr></tbody></table><h3 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h3><h3 id="相对定位relative（重要）"><a href="#相对定位relative（重要）" class="headerlink" title="相对定位relative（重要）"></a>相对定位relative（重要）</h3><p>元素在移动位置的时候，是相对于它<strong>原来</strong>的位置来说的（自恋型）</p><p>语法：</p><blockquote><p>选择器 {position: relative;}</p></blockquote><p><strong>特点</strong>： </p><ul><li>是相对于自己原来的位置移动的（移动位置参照点是自己原来的位置）</li><li>原来在标准流的位置<strong>继续占有</strong>，后面的盒子仍然以标准流的方式对待（<strong>不脱标</strong>，继续保留原来的位置）</li></ul><h3 id="绝对定位absolute（重要）"><a href="#绝对定位absolute（重要）" class="headerlink" title="绝对定位absolute（重要）"></a>绝对定位absolute（重要）</h3><p>绝对定位是元素移动元素的时候，相对于他的<strong>祖先元素</strong>来说的（拼爹型）</p><p>语法:</p><blockquote><p>选择器 {position: absolute;}</p></blockquote><p><strong>特点</strong>：</p><ul><li>若<strong>没有祖先元素</strong>或<strong>祖先元素没有定位</strong>，则以浏览器为准定位         </li><li>若<strong>祖先元素有定位</strong>（相对、绝对、固定定位），则以<strong>最近一级</strong>的<strong>有定位</strong>的祖先元素为参考点        </li><li>绝对定位<strong>不再占有</strong>原先的位置（脱标）</li></ul><h4 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h4><p>即子级是绝对定位，父级是相对定位</p><ul><li>子级绝对定位，<strong>不会占有</strong>位置，可以放到父盒子里面的任何地方，不会影响其它的兄弟盒子</li><li>父盒子需要加定位<strong>限制</strong>子盒子在父盒子内显示</li><li>父盒子布局时，<strong>需要占有</strong>位置，因此父亲只能相对定位</li></ul><h3 id="固定定位fixed（重要）"><a href="#固定定位fixed（重要）" class="headerlink" title="固定定位fixed（重要）"></a>固定定位fixed（重要）</h3><p>固定定位时元素固定与<strong>浏览器可视区</strong>的位置，主要使用在浏览器页面滚动时元素的位置不会改变</p><p>语法：</p><blockquote><p>选择器 {position: fixed;}</p></blockquote><p>特点：</p><ul><li>以浏览器的可视窗口为参照点移动元素<ul><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li></ul></li><li>固定定位不再占有原先的位置</li></ul><p>固定定位也是脱标的，可以看作是一种特殊的绝对定位</p><h3 id="粘性定位sticky"><a href="#粘性定位sticky" class="headerlink" title="粘性定位sticky"></a>粘性定位sticky</h3><p>粘性定位可以被认为是相对定位和固定定位的结合</p><p>语法：</p><blockquote><p>选择器{position: sticky; top: 10px;}</p></blockquote><p>特点：</p><ul><li>以浏览器的可视窗口为参照点移动元素（固定定位的特点）</li><li>粘性定位占有原先的位置（相对定位的特点）</li><li>必须添加top bottom left right其中一个才有效</li></ul><p>与页面滚动搭配使用</p><h2 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h2><p>定位盒子移动到最终位置</p><p>有 top bottom left rigth 4个属性</p><table><thead><tr><th>边偏移属性</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>top: 80px;</td><td>顶端偏移量，定义元素相对于其父元素上边线的距离</td></tr><tr><td>bottom</td><td>bottom: 80px;</td><td>底部偏移量，定义元素相对于其父元素下边线的距离</td></tr><tr><td>left</td><td>left: 80px;</td><td>左侧偏移量，定义元素相对于其父元素左边线的距离</td></tr><tr><td>right</td><td>right: 80px;</td><td>右侧偏移量，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>![image-20220322220515965](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01</a>  HTML与CSS/image-20220322220515965-1650191811724.png)</p><h2 id="叠放次序z-index"><a href="#叠放次序z-index" class="headerlink" title="叠放次序z-index"></a>叠放次序z-index</h2><p>使用z-index来控制盒子的前后次序（z轴）</p><p>语法：</p><blockquote><p>选择器 {z-index: 1;}</p></blockquote><p>注意：</p><ul><li>数值可以是正整数、负整数或0，默认是auto，数值越大，盒子越靠上</li><li>如果属性值相同，则按书写顺序，后来居上</li><li>数字后面<strong>不能加单位</strong></li></ul><h2 id="定位的应用"><a href="#定位的应用" class="headerlink" title="定位的应用"></a>定位的应用</h2><h5 id="绝对定位的盒子居中"><a href="#绝对定位的盒子居中" class="headerlink" title="绝对定位的盒子居中"></a>绝对定位的盒子居中</h5><p>有绝对定位属性的盒子不能直接通过margin来水平或者垂直居中，需要通过以下计算才可以实现。</p><p>若盒子宽度为200px，水平居中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">position: absolute;<br>left: 50%;<br>margin-left: -100px; /* 让盒子向左移自身宽度的一半 */<br></code></pre></td></tr></table></figure><h5 id="定位特殊特性"><a href="#定位特殊特性" class="headerlink" title="定位特殊特性"></a>定位特殊特性</h5><p>绝对定位和固定定位与浮动类似</p><ol><li>行内元素添加绝对或者固定定位（或浮动），可以直接设置高度和宽度</li><li>块级元素添加绝对定位或者固定定位，若没有设置高度或宽度，默认大小是内容的大小</li><li><strong>脱标盒子不会触发外边距塌陷</strong>（浮动元素、绝对定位、固定定位元素都不会触发外边距合并的问题）</li></ol><h5 id="绝对-固定定位会压住盒子"><a href="#绝对-固定定位会压住盒子" class="headerlink" title="绝对/固定定位会压住盒子"></a>绝对/固定定位会压住盒子</h5><p>浮动元素只会压住它下面标准流的盒子，不会压住盒子里面需要显示的文字、图片等</p><p>但 绝对定位或固定定位会压住下面的标准流所有内容</p><p>（补充：浮动产生的最初目的是为了做文字环绕效果的，即文字可以围绕浮动元素，故浮动元素不会压住下面标准流盒子里面的文字或者图片）</p>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS浮动</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E6%B5%AE%E5%8A%A8/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E6%B5%AE%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS浮动"><a href="#CSS浮动" class="headerlink" title="CSS浮动"></a>CSS浮动</h2><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>网页布局——用CSS来摆放盒子，把盒子放到相应的位置</p><p>CSS提供了三种传统布局方式（即盒子如何进行排列）：</p><ul><li>普通流</li><li>浮动</li><li>定位</li></ul><h4 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h4><p>即标签按照规定好的默认方式排列</p><ol><li><p>块级元素会独占一行，从上向下顺序排列</p><p>常见元素：div, hr, p, h1-h6, ul, ol, dl, form, table</p></li><li><p>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行</p><p>常见的行内元素：span, a, i, em等</p></li></ol><p>前面学习基本都是标准流，标准流是最基本的布局方式</p><h4 id="为什么需要浮动"><a href="#为什么需要浮动" class="headerlink" title="为什么需要浮动"></a>为什么需要浮动</h4><p>标准流很难实现让几个div块级元素排列在一行，或者实现两个块级元素（行内元素）实现分别在两侧对齐，因此就需要浮动来解决。</p><p>即很多布局效果，标准流没有办法完成，此时就可以利用浮动完成布局，浮动可以改变元素标签默认的排列方式。</p><p>浮动最典型的应用：<strong>可以让多个块级元素一行内排列显示</strong></p><p><strong>网页布局第一准则</strong>：多个<strong>块级</strong>元素<strong>纵向</strong>排列找<strong>标准流</strong>，多个块级元素<strong>横向</strong>排列找<strong>浮动</strong></p><h4 id="什么是浮动"><a href="#什么是浮动" class="headerlink" title="什么是浮动"></a>什么是浮动</h4><p>float属性用于创建浮动框，将其移动到一边，知道左边缘或右边缘触及包含块或另一个浮动框的边缘。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 惠特米勒、">选择器 &#123;float: 属性值;&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动(默认值)</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><h4 id="浮动特性"><a href="#浮动特性" class="headerlink" title="浮动特性"></a>浮动特性</h4><ul><li>浮动元素会<strong>脱离标准流</strong></li><li>浮动的元素会一行内显示并且元素顶部对齐</li><li>浮动的元素会具有行内块元素的特性</li></ul><p><strong>1. 脱离标准流——浮动元素的最重要特性：</strong></p><ul><li>脱离标准普通流的控制（即“浮”），移动到指定位置（即“动”）。——俗称脱标</li><li>浮动的盒子<strong>不再保留原先的位置</strong></li></ul><p>![image-20220319175530148](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01</a>  HTML与CSS/image-20220319175530148-1650191811724.png)</p><p>黄色盒子正常标准流显示</p><ol start="2"><li>若多个盒子都设置了浮动，则它们会按照属性值<strong>一行内显示</strong>并且<strong>顶端对齐排列</strong></li></ol><p>![image-20220319180127106](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01</a>  HTML与CSS/image-20220319180127106-1650191811724.png)</p><p>![image-20220319180157227](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01</a>  HTML与CSS/image-20220319180157227-1650191811724.png)</p><p>注意：浮动元素是互相贴靠在一起的，不会有缝隙，若父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</p><ol start="3"><li>浮动的元素会具有<strong>行内块元素</strong>的特性</li></ol><p>类似span的行内元素，给宽和高是无效的，但是如果对其设置浮动，就可以生效，直接转换为行内块元素。</p><p>任何元素都可以浮动，添加浮动之后具有行内块元素的特性。</p><ul><li>若块盒子没有设置宽度，默认宽度和父级元素一样宽，但若添加了浮动，则大小根据内容来决定</li><li>浮动的盒子中间是没有缝隙的，是紧挨着一起的</li><li>行内元素同理</li></ul><p>浮动元素经常和标准流父级搭配使用：</p><p>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置，复合网页布局第一准则</p><h3 id="常见网页布局"><a href="#常见网页布局" class="headerlink" title="常见网页布局"></a>常见网页布局</h3><p>注意：只要是通栏的盒子，即和浏览器一样宽，不需要指定盒子宽度，只需要给一个高度就可以</p><h4 id="浮动布局注意"><a href="#浮动布局注意" class="headerlink" title="浮动布局注意"></a>浮动布局注意</h4><ul><li>浮动和标准流的父盒子搭配: <strong>先用</strong>标准流的父元素排列上下位置,<strong>之后</strong>内部子元素采取浮动排列左右位置</li><li>一个元素浮动了,理论上其余兄弟元素也要浮动,浮<strong>动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流</strong></li></ul><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><h4 id="为何清除浮动"><a href="#为何清除浮动" class="headerlink" title="为何清除浮动"></a>为何清除浮动</h4><p>为什么需要清除浮动？</p><ul><li><strong>父级没高度</strong></li><li>子盒子浮动了</li><li>影响了下面布局，就需要清除浮动</li></ul><p>由于浮动元素不在占有原文档流的位置，所以会对后面的元素排版产生影响。因此需要考虑如何解决这个问题。</p><ul><li><p>清除浮动就是清除浮动元素造成的影响</p></li><li><p>如果父元素本身有高度，则不需要清除浮动</p></li><li><p>清除浮动后，父级就会根据浮动的子盒子自动检测高度，父级有了高度，就不会影响下面的标准流了。</p></li></ul><p>清除浮动语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">选择器 &#123;<br>clear: 属性值；<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><p>清除浮动的策略：闭合浮动，即只让浮动再父盒子内部影响，不影响父盒子外面其它的盒子</p><p>清除浮动的方法：</p><ol><li>额外标签发即隔墙法，是W3C推荐的做法</li><li>父级添加overflow属性</li><li>父级添加after伪元素</li><li>父级添加双伪元素</li></ol><h4 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h4><p>即在浮动元素末尾添加一个空标签，例如：&lt;div style=”clear:both”&gt; &lt;/div&gt;</p><ul><li>优点：通俗易懂，书写方便</li><li>缺点：添加许多无意义的标签，结构化比较差</li></ul><h4 id="父级添加overflow"><a href="#父级添加overflow" class="headerlink" title="父级添加overflow"></a>父级添加overflow</h4><p>给浮动元素的父级元素添加overflow属性，将其属性值设置为hidden、auto、或scroll</p><p>即：overflow: hidden;</p><p>优点：代码简洁</p><p>缺点：<strong>无法显示溢出部分</strong></p><p>（后续详讲）</p><h4 id="父级添加after"><a href="#父级添加after" class="headerlink" title="父级添加after"></a>父级添加after</h4><p><code>:after</code> 方式时<strong>额外标签法的升级</strong>，也是给父元素添加</p><p>（<strong>实际</strong>也是在父元素里面浮动子元素末尾添加一个盒子）</p><p>使用时直接复制粘贴以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">.clearfix:after &#123;<br>    content: &quot;&quot;;/* 伪元素选择器必须写的 */<br>    display: block; /* after是行内元素，将其转换为块级元素 */<br>    height: 0;/* 不要显示这个盒子 */<br>    clear: both;/* 核心代码 清除浮动 */<br>    visibility: hidden;/* 不要显示这个盒子 */<br>&#125;<br><br>.clearfix &#123;<br>    /* IE6、7专用 */<br>    *zoom: 1;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：没有增加标签，结构更简单</p><p>缺点：照顾低版本浏览器</p><p>代表网站：百度、淘宝网、网易等</p><h4 id="父级添加双伪元素"><a href="#父级添加双伪元素" class="headerlink" title="父级添加双伪元素"></a>父级添加双伪元素</h4><p>（实际也是在父元素里面浮动子元素前面和末尾都添加一个盒子）</p><p>使用时直接复制粘贴以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html">.clearfix:before,<br>.clearfix:after &#123;<br>    content: &quot;&quot;;<br>    display: table;/* 转换为块级元素并且在一行显示 */<br>&#125;<br><br>.clearfix:after &#123;<br>clear: both;/* 核心代码 清除浮动 */z&#x27;x<br>&#125;<br><br>.clearfix &#123;<br>    /* IE6、7专用 */<br>    *zoom: 1;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：代码更简洁</p><p>缺点：照顾低版本浏览器</p><p>代表网站：小米、腾讯等</p>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>盒子模型</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>所谓盒子模型：就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器</p><p>CSS合作模式本质上就是一个盒子，封装周围的HTML元素，它包括：边框、外边距、内边距、实际内容</p><h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><p>border可以设置元素的边框。</p><p>边框由三部分组成：边框宽度（粗细）、边框样式、边框颜色</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">border: border-width | border-style | border-color;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>边框粗细，单位px</td></tr><tr><td>border-style</td><td>边框样式</td></tr><tr><td>border-color</td><td>边框颜色</td></tr></tbody></table><p>常用边框样式：</p><ul><li>border-style: solid; 即实现边框</li><li>border-style: dashed; 即虚线边框</li><li>border-style: dotted; 即点线边框</li></ul><p><strong>边框简写：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">border: 边框粗细 边框样式 边框颜色；<br>border: 1px solid red;<br></code></pre></td></tr></table></figure><p>设定某一条边框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">border-left: 1px solid red;<br>border-right: 1px solid red;<br>border-top: 1px solid red;<br>border-bottom: 1px solid red;<br></code></pre></td></tr></table></figure><p><strong>表格细边框</strong></p><p>border-collapse属性控制浏览器回至表格边框的方式，它控制相邻单元格的边框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">border-collapse: collapse;<br></code></pre></td></tr></table></figure><ul><li>collapse 是合并的意思</li><li>border-collapse: collapse; 表示将相邻边框合并在一起</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">table,<br>td,<br>th &#123;<br>    border: 2px solid pink;<br>    border-collapse: collapse;<br>    font-size: 14px;<br>    text-align: center;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>边框会额外增加盒子的实际大小，对此有两个处理方法</p><ul><li>测量盒子大小的时候，不量边框</li><li>若测量的时候包含了边框，则需要width、height减去边框宽度</li></ul><h4 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h4><p>当给盒子指定padding值之后，会发生两件事：</p><ul><li>内容和边框有了距离，添加了内边距</li><li>padding影响了盒子实际大小、</li></ul><p>即如果盒子已经有了宽度和高度，此时在指定内边距，会撑大盒子</p><p><strong>解决方案</strong>：</p><p>要保证盒子跟效果图大小一致，需让width、height减去多出来的内边距大小。（包括上下和左右）</p><p>如：要保证盒子大小为200px*200px，且内边距为10px，则width=200-10*2=180,同理height=180</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">div &#123;<br>    width: 180px;<br>    height: 180px;<br>    background-color: pink;<br>    padding: 10px;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果盒子本身没有指定的width和height属性，此时padding不会撑开盒子大小</p><h4 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h4><p>margin属性用于设置外边距，即控制盒子与盒子之间的距离</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr></tbody></table><p>margin: 30px; 表示上下左右四个外边距都为30px</p><p>margin: 30px 50px; 表示上下30px，左右50px</p><p>margin: 0px 10px 0px 10px; 表示上右下左（从“上”开始顺时针方向赋值）</p><p><strong>外边距典型应用</strong></p><p>外边距可以让<strong>块级</strong>盒子<strong>水平居中</strong>，但必须满足两个条件：</p><ul><li>盒子必须指定了<strong>宽度</strong>（width）</li><li>盒子<strong>左右的外边距都设置为 auto</strong></li></ul><p>常见的写法：</p><ul><li>margin-left: auto; margin-right: auto;</li><li>margin: auto;</li><li><strong>margin: 0 auto;</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>外边距合并</strong></p><p>使用margin定义块元素的垂直外边距时，可能会出现外边距的合并</p><ul><li>相邻块元素垂直外边距的合并</li><li>嵌套块元素垂直外边距的塌陷</li></ul><p><strong>相邻块元素垂直外边距的合并</strong>：</p><p>当上下两个块元素（兄弟关系）相遇时，若上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是取两个值中的较大者，这种现象称为相邻元素垂直外边距的合并。</p><p><strong>解决方案</strong>：尽量只给一个盒子添加margin值</p><p><strong>嵌套块元素垂直外边距的塌陷</strong>：</p><p>对于两个嵌套关系（父子关系）的块元素，父元素有 上外边距 同时子元素也有 上外边距 ，此时父元素会塌陷较大的外边距值。</p><p>解决方案：</p><ol><li>可以为父元素定义上边框</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加overflow:hidden;</li></ol><blockquote><p><strong>脱标盒子不会触发外边距塌陷</strong></p><p>如：浮动元素、绝对定位、固定定位元素都不会触发外边距合并的问题）</p></blockquote><h4 id="清除内外边距"><a href="#清除内外边距" class="headerlink" title="清除内外边距"></a>清除内外边距</h4><p>网页元素很多都带有默认的内外边距，而且不同的浏览器默认的也不一样，因此我们在布局前，首先要清楚下网页元素的内外边距。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">* &#123;<br>padding: 0;/* 清除内边距 */<br>margin: 0;/* 清除外边距 */<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>行内元素为了照顾兼容性，尽量值设置左右内外边距，不要设置上下内外边距，但实际转换为块级和行内块元素就可以了。</p><h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><p>在CSS3中，新增了圆角便框样式</p><p>border-radius 属性哟ing与设置元素的外边框圆角</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">border-radius:长度;<br></code></pre></td></tr></table></figure><p>radius半径（圆的半径）原理：(椭)圆与边框的交集形成的圆角效果</p><ul><li>参数可以<strong>实数值</strong>或者<strong>百分比</strong>的形式</li><li><strong>如果是正方形，要得到圆形，可以通过将数值改为高度的一半或者宽度的一半即可，或者直接写成50%</strong></li><li><strong>如果是个矩形，设置为高度一半可以将两则设置为圆角，如下所示</strong>：![image-20220319164232335](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01</a>  HTML与CSS/image-20220319164232335-1650191811723.png)</li><li>若只写一个参数，实际是一个简写方式，其后实际可以跟4个值，分别代表<strong>左上角、右上角、右下角、左下角</strong></li><li>还可以分开写每一个角：border-top-left-radius, border-top-right-radius, border-bottom-right-radius, border-bottom-left-radius</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.rectangle</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="language-css">        <span class="hljs-comment">/* border-radius后既可以是具体数值，也可以是百分比 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* border-radius: 20px; */</span></span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.circle</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">        <span class="hljs-comment">/* border-radius: 100px; */</span></span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.ellipse</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.diff</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: green;</span><br><span class="language-css">        <span class="hljs-comment">/* 四个数值分别对应 左上 右上 右下 左下， 即从“左上” 开始顺时针*/</span></span><br><span class="language-css">        <span class="hljs-comment">/* border-radius: 0px 30px 50px 70px;  */</span></span><br><span class="language-css">        <span class="hljs-comment">/* 两个数值分别对应：左上与右下为0，右上和左下为70 */</span></span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0px</span> <span class="hljs-number">70px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><p>使用box-shadow属性为盒子添加阴影</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">box-shadow: h-shadow v-shadow blur spread color inset<br></code></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><strong>h-shadow</strong></td><td>必需，水平阴影的位置，允许负值</td></tr><tr><td><strong>v-shadow</strong></td><td>必需。垂直阴影的位置，允许负值</td></tr><tr><td>blur</td><td>可选。模糊距离</td></tr><tr><td>spread</td><td>可选。阴影的尺寸</td></tr><tr><td>color</td><td>可选。阴影的颜色。（参阅CSS颜色值）</td></tr><tr><td>inset</td><td>可选。将外部阴影(outset)改为内部阴影</td></tr></tbody></table><p>注意：改为内部阴影需要写inset，但默认就是外阴影，需要外部阴影时不需要写outset</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br><br>&#125;<br><br><span class="hljs-comment">/* 鼠标经过时显示阴影效果 */</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">25px</span> <span class="hljs-number">0px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">5</span>);<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>示例效果：</p><p>无阴影时<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220701173753314.png" alt="image-20220701173753314" style="zoom:50%;" /></p><p>有阴影时<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220701173921857.png" alt="image-20220701173921857" style="zoom:50%;" /></p><p>当修改box-shadow后（添加了inset，将外部阴影改为内部阴影）：<code>box-shadow: 10px 10px 25px 0px rgba(0, 0, 0, .5) inset;</code></p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220701173822776.png" alt="image-20220701173822776" style="zoom:50%;" /><p>注意：默认是外部阴影outset，但是不能为box-shoadow写outset，会造成阴影无效，如：<code>box-shadow: 10px 10px 25px 0px rgba(0, 0, 0, .5) outset;</code> 不能这样写，会使阴影没有效果。</p>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS背景</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E8%83%8C%E6%99%AF/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E8%83%8C%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h2><p>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等</p><h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><p>backgroun-color属性定义了元素的背景颜色</p><p>一般情况下元素背景颜色默认值为：transparent(透明)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">background-color: transparent;<br></code></pre></td></tr></table></figure><p><strong>背景色半透明</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">background: rgba(0,0,0,0.3);<br></code></pre></td></tr></table></figure><ul><li>最后一个参数时alpha透明度，取值范围在0~1之间</li><li>习惯把透明度小数前的0去掉，写为background: rgba(0,0,0,.3);</li><li>注意，背景半透明指的是盒子背景半透明，盒子里面的内容的不受影响</li></ul><h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><p>background-image属性描述了元素的背景图像，实际开发中常见于logo或者一些装饰小图片、超大背景图等，优点电视非常便于控制位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">background-image: none | url(背景图地址)<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>无背景图（默认）</td></tr><tr><td>url</td><td>使用绝对或者相对地址指定背景图像，url里面的路径不需要加引号</td></tr></tbody></table><p>注意：属性值url()括号里面写路径，<strong>url不能省</strong>！</p><p>如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">01女性角色.png</span>);<br></code></pre></td></tr></table></figure><h3 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h3><p>background-repeat</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">background-repeat: repeat | no-repeat | repeat-x |repeat-y<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>背景图像可以在纵向和横向上平铺</td></tr><tr><td>no-repeat</td><td>背景图像不平铺</td></tr><tr><td>repeat-x</td><td>在横向上平铺</td></tr><tr><td>repeat-y</td><td>在纵向上平铺</td></tr></tbody></table><p>注意：页面既可以添加背景颜色，也可以添加背景图片，不过背景图片会压着背景颜色</p><h3 id="背景图片的位置"><a href="#背景图片的位置" class="headerlink" title="背景图片的位置"></a>背景图片的位置</h3><p>background-position 属性可以改变图片在背景中的位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">background-position: x y;<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>百分数 | 由浮点数和单位标识符组成的长度值</td></tr><tr><td>position</td><td>top | bottom | left | center | right 方位名词</td></tr></tbody></table><p><strong>参数是方位名词</strong></p><ul><li>若指定的两个都是方位名词，则两个值前后顺序无关，如 left top 和 top left效果一致</li><li>若之制定了一个方位名词，另一个值省略，则第二个默认居中对齐</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">background-position: top center;<br></code></pre></td></tr></table></figure><p><strong>参数是精确单位</strong></p><ul><li>若参数值是精确坐标，那么第一个一定是x坐标，第二个一定是y坐标</li><li>若只指定一个数值，那么该数值一定是x坐标，另一个默认居中</li></ul><p><strong>参数是混合单位</strong></p><ul><li>若指定的两个值是精确单位和方位名词混合使用，第一个还是x坐标，第二个值是y坐标</li></ul><h3 id="背景固定"><a href="#背景固定" class="headerlink" title="背景固定"></a>背景固定</h3><p>background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动</p><p>可以制作视差滚动的效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">background-attachment: scroll | fixed;<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>scroll</td><td>背景图像是随对象内容滚动</td></tr><tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table><h3 id="背景延伸"><a href="#背景延伸" class="headerlink" title="背景延伸"></a>背景延伸</h3><p>background-clip 设置元素的背景（背景图片或颜色）是否延伸到边框、内边距盒子、内容盒子下面</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>border-box</td><td>背景延伸至边框外沿</td></tr><tr><td>padding-box</td><td>背景延伸至内边距padding外沿</td></tr><tr><td>conten-box</td><td>背景被裁剪至内容区外沿</td></tr><tr><td>text</td><td>背景被裁剪成文字的<strong>前景</strong>色</td></tr></tbody></table><p>示例:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-clip</span>: border-box;<br></code></pre></td></tr></table></figure><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220703171729442.png" alt="image-20220703171729442"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-clip</span>: padding-box;<br></code></pre></td></tr></table></figure><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220703171803503.png" alt="image-20220703171803503" style="zoom:67%;" /><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-clip</span>: content-box;<br></code></pre></td></tr></table></figure><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220703171830251.png" alt="image-20220703171830251" style="zoom:67%;" /><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-clip</span>: text;<br>-webkit-<span class="hljs-attribute">background-clip</span>: text;<br><span class="hljs-comment">/* 通过color设置文字的透明程度，若文字完全透明，则可以完全显示出前景色 */</span><br><span class="hljs-attribute">color</span>: transparent;<br></code></pre></td></tr></table></figure><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220703171900350.png" alt="image-20220703171900350" style="zoom:67%;" /><h3 id="背景属性的复合写法"><a href="#背景属性的复合写法" class="headerlink" title="背景属性的复合写法"></a>背景属性的复合写法</h3><p>为了简化属性的代码，可以将这些背景属性合并简写在同一个属性background中。从而节约代码量。</p><p>使用简写时，没有特定的书写顺序，一般习惯性约定顺序为：</p><p>background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">background: transparent url() no-repeat fixed top;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS文本</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E6%96%87%E6%9C%AC/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E6%96%87%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS文本"><a href="#CSS文本" class="headerlink" title="CSS文本"></a>CSS文本</h1><p>CSS中的text属性可以定义文本的外观</p><h3 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h3><p>color属性用于送一文本的颜色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>color属性的属性值表示方式：</p><table><thead><tr><th>表示方式</th><th>属性值</th></tr></thead><tbody><tr><td>预定义的颜色值</td><td>red, green, blue,等</td></tr><tr><td>十六进制</td><td>#FF0000, #0000FF, #00FF00等</td></tr><tr><td>RGB代码</td><td>rgb(255,0,0)或rgb(100%,0%,0%)</td></tr></tbody></table><ul><li>常用十六进制</li></ul><h3 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h3><p>text-align属性用于设置元素内文本内容的<strong>水平对齐</strong>方式</p><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认值）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">div &#123;<br>text-align: center;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文本装饰"><a href="#文本装饰" class="headerlink" title="文本装饰"></a>文本装饰</h3><p>text-decoration属性规定添加文本的修饰，可以给文本添加下划线、删除线、上划线等</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。没有装饰线</td></tr><tr><td>underline</td><td>下划线。链接a自带下划线</td></tr><tr><td>overline</td><td>上划线。</td></tr><tr><td>line-through</td><td>删除线</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">div &#123;<br>text-decoration: underline;<br>&#125;<br></code></pre></td></tr></table></figure><p>取消链接标签a的下划线</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.xiahuaxian</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>调用：<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 取消下划线 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xiahuaxian&quot;</span>&gt;</span>取消超链接的下划线<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 自带下划线 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>超链接自带下划线<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><p>text-indent属性用来指定文本的第一行的缩进，通常是将段落的<strong>首行缩进</strong></p><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>表示缩进10px，所有段落的第一行都可以缩进一个给定的长度，甚至这个长度可以设置为负值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>em是一个相对单位</strong>，就是当前元素（font-size）1个文字的大小，如果当前元素没有设置大小，则会按照父元素的1个文字大小来进行缩进</p><h3 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h3><p>line-height属性舒勇设置行间的距离（行高），可以控制文字行与行之间的距离。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">26px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>行间距 = 文本高度+上间距+下间距（上下间距是相等的）</p><h3 id="文字阴影-CSS3"><a href="#文字阴影-CSS3" class="headerlink" title="文字阴影(CSS3)"></a>文字阴影(CSS3)</h3><p>CSS3中，使用text-shadow属性将阴影应用于文本</p><table><thead><tr><th>值</th><th>属性</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需，水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置，允许负值</td></tr><tr><td>blur</td><td>可选。模糊距离</td></tr><tr><td>color</td><td>可选。阴影的颜色。（参阅CSS颜色值）</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">6px</span> <span class="hljs-number">6px</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">5</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="文本属性总结"><a href="#文本属性总结" class="headerlink" title="文本属性总结"></a>文本属性总结</h3><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>color</td><td>文本颜色</td><td>常用十六进制</td></tr><tr><td>text-align</td><td>文本对齐</td><td>设定文本水平对齐方式</td></tr><tr><td>text-indent</td><td>文本缩进</td><td>用于段落首行缩进2个字的距离 text-indent: 2em</td></tr><tr><td>text-decoration</td><td>文本装饰</td><td>下划线underline、上划线、删除线、空none</td></tr><tr><td>line-height</td><td>行高</td><td>控制行与行之间的距离</td></tr><tr><td>text-shadow</td><td>文本阴影</td><td></td></tr></tbody></table><h3 id="行内块与文字居中对齐"><a href="#行内块与文字居中对齐" class="headerlink" title="行内块与文字居中对齐"></a>行内块与文字居中对齐</h3><p>vertical-align：经常用于设置<strong>图片或者表单（行内块元素）和文字垂直对齐</strong>。</p><p>即用于设置一个元素的垂直对齐方式，但是它只针对与行内元素或者行内块元素有效</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">vertical-align: baseline | top | middle | bottom ; <br></code></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td><strong>默认</strong>，元素放置在父元素的基线上</td></tr><tr><td>top</td><td>把元素的顶端与行中最高元素的顶端对齐</td></tr><tr><td>middle</td><td>把此元素放置在父元素的中部</td></tr><tr><td>bottom</td><td>把元素的顶端与行中最低元素的顶端对齐</td></tr></tbody></table><p>如右所示：<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220324120143177.png" alt="image-20220324120143177" style="zoom:60%;" /></p><p>可以利用vertical-align对图片、表单等行内块元素进行设置，从而达到图片、表单与文字垂直居中对齐的效果</p><h4 id="解决图片底部缝隙"><a href="#解决图片底部缝隙" class="headerlink" title="解决图片底部缝隙"></a>解决图片底部缝隙</h4><p>由于行内块元素默认与文字的基线baseline对齐，故图片底部会有一个空白缝隙。</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220704180740943.png" alt="image-20220704180740943" style="zoom:40%;" /><p>解决方法：</p><ol><li>给图片添加vertical-align: middle | top | bottom 等（提倡使用）</li><li>把图片转换成块级元素，display: block;</li></ol><h3 id="溢出文字省略号显示"><a href="#溢出文字省略号显示" class="headerlink" title="溢出文字省略号显示"></a>溢出文字省略号显示</h3><h4 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h4><p>单行文本溢出显示省略号，需满足以下条件：</p><ol><li><p>先强制一行内显示文本</p><p><code>white-space: nowrap;</code> (默认normal自动换行)</p></li><li><p>超出部分隐藏</p><p><code>overflow: hidden;</code></p></li><li><p>文字用省略号替代超出的部分</p><p><code>text-overflow: ellipsis;</code></p></li></ol><h4 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h4><p><strong>多行文本</strong>溢出显示，有兼容性问题，适合于wedKit浏览器或者移动端</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">overflow</span>: hidden;<br><span class="hljs-attribute">text-overflow</span>: ellipsis;<br><br><span class="hljs-comment">/* 弹性伸缩盒子模型显示 */</span><br><span class="hljs-attribute">display</span>: -webkit-box;<br><span class="hljs-comment">/* 限制在一个块元素显示文本的行数，在第几行显示省略号 */</span><br>-webkit-line-clamp: <span class="hljs-number">3</span>;<br><span class="hljs-comment">/* 设置或检索伸缩盒对象的子元素的排列方式 */</span><br>-webkit-box-orient: vertical;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS字体</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E5%AD%97%E4%BD%93/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E5%AD%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS字体"><a href="#CSS字体" class="headerlink" title="CSS字体"></a>CSS字体</h1><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>使用<strong>font-family</strong>属性定义文本的字体系列</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;宋体&quot;</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Microsoft Yahei&#x27;</span>, <span class="hljs-string">&#x27;Times New Roman&#x27;</span>, Times, serif;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>各种字体之间必须使用英文状态下的逗号隔开</li><li>一般情况下，如果有空格隔开的多个单词组成的字体，加引号，如：’Microsoft Yahei’</li><li>尽量使用系统默认自带字体，保证在任何用户的浏览器中都能正确显示</li><li>当定义多种字体时，若第一个字体系统没有，系统会按顺序选用下一个字体</li></ul><h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><p>CSS使用font-size属性定义字体大小</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">body &#123;<br>font-size: 20px;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>px(像素)大小时我们网页最常用的单位</li><li>谷歌浏览器默认的字体大小为16px</li><li>不同浏览器的默认字体大小可能不同，所以尽量给一个明确字体大小，不要默认大小</li><li>可以给body指定整个页面的文字大小</li></ul><h3 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h3><p>CSS使用font-weight属性设置文本字体的粗细</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">.自定义名称 &#123;<br>font-weight: bold;<br>&#125;<br><br>在body再使用class调用<br>或者用标签选择器也可以<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认值（不加粗的）</td></tr><tr><td>bold</td><td>定义粗体（加粗的）</td></tr><tr><td>100-900</td><td>定义粗细，其中400等同于normal，700等同于bold。<strong>注意：这个数字后面不跟单位</strong></td></tr></tbody></table><ul><li><p>标题时是默认加粗的，如果不加粗，就需要使用标签时期不加粗</p></li><li><p>实际开发时，更习惯与用数字来表示粗细</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.bold</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;</span><br><span class="language-css">        <span class="hljs-comment">/* font-weight: bold; */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-comment">/* 如果不需要加粗,则font-weight的属性值为normal,normal的值就是400 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.norm</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;</span><br><span class="language-css">        <span class="hljs-comment">/* font-weight: normal; */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><p>CSS中使用font-style属性来设置文本的风格</p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>normal</td><td>默认值，浏览器会显示标准的字体样式（font-style: normal;）</td></tr><tr><td>italic</td><td>浏览器会显示斜体的字体样式</td></tr></tbody></table><p>注意：平时常见的不是给字体加斜体，而是将<strong>斜体标签</strong>（&lt;em&gt;和&lt;i&gt;）改为不倾斜的字体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.fontstyle</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">font-style</span>: normal;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>调用：<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fontstyle&quot;</span>&gt;</span>CSS字体大小<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="字体的复合属性"><a href="#字体的复合属性" class="headerlink" title="字体的复合属性"></a>字体的复合属性</h3><p>CSS中可以使用font属性将所有文本样式综合来写</p><p><strong>注意顺序</strong>：<strong>font: font-style font-weight font-size/line-height font-family;</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* font: font-style font-weight font-size/line-height font-family; */</span></span><br><span class="language-css">        <span class="hljs-attribute">font</span>: italic <span class="hljs-number">700</span> <span class="hljs-number">20px</span> <span class="hljs-string">&#x27;Microsoft yahei&#x27;</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>使用font属性时，必须按上面语法格式中的顺序书写，<strong>不能更换顺序</strong>，并且各个属性间用空格隔开</li><li>不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用</li></ul><h3 id="字体属性总结"><a href="#字体属性总结" class="headerlink" title="字体属性总结"></a>字体属性总结</h3><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>font-style</td><td>字体样式</td><td>倾斜是italic，不倾斜是normal</td></tr><tr><td>font-weight</td><td>字体粗细</td><td>加粗bold的值时700，不加粗normal的值是400，没有单位</td></tr><tr><td>font-size</td><td>字体大小</td><td>通常用的单位时px像素，一定要跟上单位</td></tr><tr><td>font-family</td><td>字体</td><td>实际工作中按团队要求来约定字体</td></tr><tr><td>font</td><td>字体连写</td><td>字体连写是有顺序的，不能随意更换位置，其中字号和字体必须同时出现</td></tr></tbody></table><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><p>常用网站：</p><ul><li><a href="https://icomoon.io/">https://icomoon.io</a></li><li><a href="https://www.iconfont.cn/">https://www.iconfont.cn</a></li></ul><h3 id="字体图标的使用"><a href="#字体图标的使用" class="headerlink" title="字体图标的使用"></a>字体图标的使用</h3><ol><li><p>访问<a href="https://icomoon.io,点击icomoon/">https://icomoon.io，点击Icomoon</a> App,如下所示：</p><p>![image-20220323221558146](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01</a>  HTML与CSS/image-20220323221558146-1650191811724.png)</p></li><li><p>选择字体图标后，下载并解压如下：</p></li></ol><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220323220848507.png" alt="image-20220323220848507" style="zoom:70%;" /><ol start="2"><li>将下载好的字体文件家fonts放到html文件夹根目录下</li></ol><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220323215559728.png" alt="image-20220323215559728" style="zoom:70%;" /><ol start="3"><li>字体声明</li></ol><p>将CSS文件style.css中的@font-face的内容复制到目标html文档的style中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    </span><br><span class="language-css"><span class="hljs-keyword">@font-face</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;icomoon&#x27;</span>;</span><br><span class="language-css">  <span class="hljs-attribute">src</span>:  <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.eot?y6ak7f&#x27;</span>);</span><br><span class="language-css">  <span class="hljs-attribute">src</span>:  <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.eot?y6ak7f#iefix&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="language-css">    <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.ttf?y6ak7f&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>),</span><br><span class="language-css">    <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.woff?y6ak7f&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff&#x27;</span>),</span><br><span class="language-css">    <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.svg?y6ak7f#icomoon&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;svg&#x27;</span>);</span><br><span class="language-css">  <span class="hljs-attribute">font-weight</span>: normal;</span><br><span class="language-css">  <span class="hljs-attribute">font-style</span>: normal;</span><br><span class="language-css">  <span class="hljs-attribute">font-display</span>: block;</span><br><span class="language-css">&#125;</span><br><span class="language-css">    </span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>使用字体</li></ol><p>将demo.html文件打开，将对应字体的符号复制粘贴到html文档中</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220323220019478.png" alt="image-20220323220019478" style="zoom:50%;" /><p>如上图所示，箭头所指位置即为剪刀手的符号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>进行前三步后，还不能显示字体图标，还需要在style中为符号指定字体， 并且可更改字体大小颜色等</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">span &#123;<br>    font-family: &#x27;icomoon&#x27;;<br>    font-size: 50px;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例效果：<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220323220652842.png" alt="image-20220323220652842" style="zoom:67%;" /></p><h3 id="字体图标的追加"><a href="#字体图标的追加" class="headerlink" title="字体图标的追加"></a>字体图标的追加</h3><ol><li><p>访问<a href="https://icomoon.io,点击icomoon/">https://icomoon.io，点击Icomoon</a> App,如下所示：</p></li><li><p>点击import Icons，如下所示：</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220323221821485.png" alt="image-20220323221821485" style="zoom:80%;" /></li><li><p>在弹出的页面中，选择原来下载的字体文件夹中的selection.json文件</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220323222033114.png" alt="image-20220323222033114" style="zoom:80%;" /><p>选择后将selection.json重新上传，然后可以继续在网页中选择需要的字体图标，然后重新下来压缩包，解压后替换原来的文件即可</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML标签</title>
    <link href="/2022/11/25/01-HTML/HTML/HTML%E6%A0%87%E7%AD%BE/"/>
    <url>/2022/11/25/01-HTML/HTML/HTML%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h1><h2 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h2><p>参考： <a href="https://www.isolves.com/it/wlyx/SEO/2022-07-20/58246.html">https://www.isolves.com/it/wlyx/SEO/2022-07-20/58246.html</a></p><p>meta可用于搜索引擎优化（seo)，定义页面使用语言，自动刷新并指向新的页面，实现网页转换时的动态效果，控制页面缓冲，网页定级评价，控制网页显示的窗口等</p><h3 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h3><p>name属性主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</p><p>meta标签的name属性语法格式是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;参数&quot;</span><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;具体的参数值&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="name属性的参数"><a href="#name属性的参数" class="headerlink" title="name属性的参数"></a>name属性的参数</h4><h5 id="Keywords"><a href="#Keywords" class="headerlink" title="Keywords"></a>Keywords</h5><p>Keywords用来告诉搜索引擎你的网页的关键字是什么</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;网上购物,网上商城,家电,手机,电脑,服装,居家,母婴,美妆,个护,食品,生鲜,京东&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="description"><a href="#description" class="headerlink" title="description"></a>description</h5><p>description用来告诉搜索引擎你的网站主要内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;京东JD.COM-专业的综合网上购物商城，为您提供正品低价的购物选择、优质便捷的服务体验。商品来自全球数十万品牌商家，囊括家电、手机、电脑、服装、居家、母婴、美妆、个护、食品、生鲜等丰富品类，满足各种购物需求。&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h5><p>robots用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引</p><p>content得参数有all,none,index,noindex,follow,nofollow。默认是all</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;robots&quot;</span><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>信息参数为all：文件将被检索，且页面上的链接可以被查询；</p><p>信息参数为none：文件将不被检索，且页面上的链接不可以被查询；</p><p>信息参数为index：文件将被检索；</p><p>信息参数为follow：页面上的链接可以被查询；</p><p>信息参数为noindex：文件将不被检索，但页面上的链接可以被查询；</p><p>信息参数为nofollow：文件将被检索，但页面上的链接不可以被查询；</p><h5 id="viewpoint"><a href="#viewpoint" class="headerlink" title="viewpoint"></a>viewpoint</h5><p>webkit内核中的私有的meta标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”viewport”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”width</span>=<span class="hljs-string">device-width,</span> <span class="hljs-attr">initial-scale</span>=<span class="hljs-string">1.0,</span> <span class="hljs-attr">maximum-scale</span>=<span class="hljs-string">1.0,</span> <span class="hljs-attr">user-scalable</span>=<span class="hljs-string">0;”</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>强制让文档的宽度与设备的宽度保持1:1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览；</p><h5 id="theme-color"><a href="#theme-color" class="headerlink" title="theme-color"></a>theme-color</h5><p>定义页面的主题颜色 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;theme-color&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="author"><a href="#author" class="headerlink" title="author"></a>author</h5><p>说明：标注网页的作者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;root,root@xxxx.com&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;generator&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;信息参数&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>meta标签的generator的信息参数，代表说明网站采用的什么软件制作。</p><h5 id="COPYRIGHT"><a href="#COPYRIGHT" class="headerlink" title="COPYRIGHT"></a>COPYRIGHT</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">META</span> <span class="hljs-attr">NAME</span>=<span class="hljs-string">&quot;COPYRIGHT&quot;</span> <span class="hljs-attr">CONTENT</span>=<span class="hljs-string">&quot;信息参数&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>meta标签的COPYRIGHT的信息参数，代表说明网站版权信息。</p><h5 id="revisit-after"><a href="#revisit-after" class="headerlink" title="revisit-after"></a>revisit-after</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">META</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;revisit-after&quot;</span> <span class="hljs-attr">CONTENT</span>=<span class="hljs-string">&quot;7days&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>revisit-after代表网站重访,7days代表7天，依此类推。</p><h3 id="http-equiv属性"><a href="#http-equiv属性" class="headerlink" title="http-equiv属性"></a>http-equiv属性</h3><h4 id="http-equiv属性参数"><a href="#http-equiv属性参数" class="headerlink" title="http-equiv属性参数"></a>http-equiv属性参数</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge,chrome=1&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>这是个是IE8的专用标记,用来指定IE8浏览器去模拟某个特定版本的IE浏览器的渲染方式（比如IE6），以此来解决部分兼容问题</p><p>例如模拟IE7的具体方式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt; meta http-equiv = &quot;X-UA-Compatible&quot; content =&quot;IE=EmulateIE7&quot; /&gt;<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf8&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&#x27;1&#x27;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;renderer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;webkit&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="结构标签"><a href="#结构标签" class="headerlink" title="结构标签"></a>结构标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>第一个页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        主体 <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>标签名</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td>&lt;html&gt;&lt;/html&gt;</td><td>HTML标签</td><td>页面中最大的标签，称为 跟标签</td></tr><tr><td>&lt;head&gt;&lt;/head&gt;</td><td>文档的头部</td><td>注意在head标签中我们<strong>必须要设置</strong>的标签是title</td></tr><tr><td>&lt;title&gt;&lt;/title&gt;</td><td>文档的标题</td><td>让页面拥有一个属于自己的网页标题</td></tr><tr><td>&lt;body&gt;&lt;/body&gt;</td><td>文档的主体</td><td>元素包含文档的所有内容，页面内容基本都是放到body里面的</td></tr></tbody></table><p>HTMl文档的后缀名必须是.html或者.htm，浏览器的最用是读取HTML文档，并以网页的形式显示它们。用浏览器打开这个网页就可以预览我们写的一个HTML文件了。</p><h2 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>    一级标题<br><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h2><p>单词paragraph的缩写</p><p>标签语义：将HTML文档分隔为若干段落</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>我就是一个段落<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    我是第二个段落<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>特点：</p><ul><li>文本在一个段落中会根据浏览器窗口大小自动换行</li><li>段落和段落之间有一定空隙</li></ul><h2 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h2><p>HTML中一个段落的文字从左到右排列直至浏览器窗口的右端，然后才会自动换行。如果希望可以强制换行，就需要使用换行标签&lt;br /&gt;（单词break的缩写）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h2><table><thead><tr><th>语义</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td><strong>加粗</strong></td><td><strong></strong> 或者<b></b></td><td>更推荐使用<strong>标签加粗</td></tr><tr><td><strong>倾斜</strong></td><td><em></em>或者<i></i></td><td>更推荐使用<em></td></tr><tr><td>删除线</td><td><del></del>或者<s></s></td><td>更推荐使用<del></td></tr><tr><td>下划线</td><td><ins></ins>或者<u></u></td><td>更推荐使用<ins></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="lt-div-gt-和-lt-span-gt-标签"><a href="#lt-div-gt-和-lt-span-gt-标签" class="headerlink" title="&lt;div&gt;和&lt;span&gt;标签"></a>&lt;div&gt;和&lt;span&gt;标签</h2><p>div是dvision的缩写，表示分割、分区；span表示跨度、跨距</p><p>特点：</p><ul><li>&lt;div&gt;标签用于布局，一行只能放一个&lt;div&gt;（可理解为一个大盒子）</li><li>&lt;span&gt;变迁用来布局，一行可以由多个&lt;span&gt;（可理解为小盒子）</li></ul><h2 id="图像标签和路径"><a href="#图像标签和路径" class="headerlink" title="图像标签和路径"></a>图像标签和路径</h2><p>图像标签</p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td><td>必须属性</td></tr><tr><td>alt</td><td>文本</td><td>替换文本，图像不能显示的文字</td></tr><tr><td>title</td><td>文本</td><td>提示文本，鼠标放到图像上，显示的文字</td></tr><tr><td>width</td><td>像素</td><td>设置图像的宽度</td></tr><tr><td>height</td><td>像素</td><td>设置图像的高度</td></tr><tr><td>border</td><td>像素</td><td>设置图像的边框粗细</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;证件照.jpg&quot;</span> <span class="hljs-attr">alt</span> = <span class="hljs-string">&quot;证件照&quot;</span> <span class="hljs-attr">title</span> = <span class="hljs-string">&quot;证件照&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">300</span> <span class="hljs-attr">border</span> = <span class="hljs-string">5</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>图像标签可以多个属性，必须卸载标签名img的后面</li><li>属性之间不分先后顺序，标签名和属性、属性和属性之间均以空格分开</li><li>属性采取键值对的格式，即key = “value” 的格式，<strong>属性 = “属性值”</strong>。</li></ul><p>路径之相对路径</p><p><strong>相对路径：</strong>以引用文件所在位置为参考基础，而建立出的目录路径</p><table><thead><tr><th>相对路径分类</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>同一级路径</td><td></td><td>图像文件位于HTML文件同一级 如：&lt;img src = “img.jpg” /&gt;</td></tr><tr><td>下一级路径</td><td>/</td><td>图像文件位于HTML文件下一级 如：&lt;img src = “images/img.jpg” /&gt;</td></tr><tr><td>上一级路径</td><td>../</td><td>图像文件位于HTML文件上一级 如：&lt;img src = “../img.jpg” /&gt;</td></tr></tbody></table><p>路径之绝对路径</p><p><strong>绝对路径：</strong>是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径</p><p>注意：绝对路径用的是反斜杠“\”,而相对路径用的是斜杠“/”</p><p>如：“C:\Users\Desktop\学习\前端\前端基础班第一天\案例\img,jpg”</p><h2 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h2><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;跳转目标&quot;</span> <span class="hljs-attr">target</span> = <span class="hljs-string">&quot;目标窗口弹出的方式&quot;</span>&gt;</span>文本或图像<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>a为anchor(锚)的缩写</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>必须属性，用于指定链接目标的url地址</td></tr><tr><td>target</td><td>用于指定链接页面的打开方式，其中**_self<strong>为默认值，</strong>_blank**为在新窗口中开方式</td></tr></tbody></table><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">target</span> = <span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="链接分类"><a href="#链接分类" class="headerlink" title="链接分类"></a>链接分类</h3><ul><li><p>外部链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">target</span> = <span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>内部链接</p><p>网站内部页面之间的相互链接。直接链接内部页面名称即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;风景2.jpg&quot;</span> <span class="hljs-attr">target</span> = <span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>风景图<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>空链接</p><p>如果当时没有确定链接目标时，可将href的属性值设为“#”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;#&quot;</span>&gt;</span>空链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>下载链接</p><p>如果href里面地址时一个文件或者压缩包，会下载这个文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;证件照.zip&quot;</span> <span class="hljs-attr">target</span> = <span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>下载证件照<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>网页元素链接</p><p>在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;https://t7.baidu.com/it/u=1819248061,230866778&amp;fm=193&amp;f=GIF&quot;</span> <span class="hljs-attr">target</span> = <span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>网页图片<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>*注意**：可将&lt;img src = “风景1.jpg” width=100 /&gt; 看作文本添加超链接，同样表格、音频、视频类似。</p></li></ul><ul><li><p><strong>锚点链接</strong></p><p>点击链接，可以快速定位到页面中的某个位置</p><ul><li>在链接文本的href属性中，设置属性为**#名字**的形式，如：</li><li>找到目标位置标签，里面添加一个<strong>id属性 = 刚才的名字</strong>，如：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"> <br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;#geren&quot;</span>&gt;</span>个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>.<br>.（中间内容略去）<br>.<br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;geren&quot;</span>&gt;</span>个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li></ul><h3 id="rel属性"><a href="#rel属性" class="headerlink" title="rel属性"></a>rel属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/paopao0108&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noopener&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="rel-”noopener”提高网站安全性"><a href="#rel-”noopener”提高网站安全性" class="headerlink" title="rel=”noopener”提高网站安全性"></a>rel=”noopener”提高网站安全性</h4><p>使用target=_blank打开新的窗口时，JavaScript功能赋予了新的窗口一些权限可以操作原tab页，如果我们的网站链接到受恶意代码影响的外部网站，则该网站可以使用<code>window.opener</code>JavaScript属性更改原始页面（您的网站）以窃取信息并传播恶意代码。</p><p>实例：<br>当你使用target=”_blank”打开一个新的标签页时，新页面的window对象上有一个属性opener，它指向的是前一个页面的 window对象，这样，后一个页面就获得了前一个页面的控制权，可以使用<code>window.opener.location.replace</code>更改前一个页面的url。简单来说就是，用户点击了一个超链接，该链接在新窗口打开的同时，竟然更改了前一个页面的链接。</p><p>这时候rel=”noopener”闪亮登场，打开链接后你会发现<code>window.opener</code>已经被置为了null</p><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><h3 id="表格标签-1"><a href="#表格标签-1" class="headerlink" title="表格标签"></a>表格标签</h3><p><code>table</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>刘德华<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>56<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>郭富城<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>51<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张学友<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>58<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>黎明<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>57<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>&lt;table&gt;&lt;/table&gt;是用于定义表格的标签</li><li>&lt;tr&gt;&lt;/tr&gt;标签用于定义表格中的行，必须嵌套在&lt;table&gt;&lt;/table&gt;标签中</li><li>&lt;td&gt;&lt;/td&gt;用于定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;标签中</li><li>字母td指表格数据(table data),即数据单元格的内容</li></ol><h4 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h4><p>（不常用，后续通过CSS来实现）</p><blockquote><p>注意：这些属性都需要写到表格标签table里面</p></blockquote><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left、center、right</td><td>规定表格相对周围元素的对齐方式</td></tr><tr><td>border</td><td>1或“”</td><td>规定表格单源是否拥有边框，默认为“”，表示没有边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>规定<strong>单元边沿与其内容</strong>之间的空白，默认为1像素</td></tr><tr><td>cellspacing</td><td>像素值</td><td>规定<strong>单元格之间</strong>的空白，默认为2像素</td></tr><tr><td>width</td><td>像素值或百分比</td><td>规定表格的宽度</td></tr><tr><td>height</td><td>像素值或百分比</td><td>规定表格的高度</td></tr></tbody></table><ul><li><p>举例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>align=”center” 会让整个表格居中显示</li><li>border=”1” 表格边框设置为1</li><li>cellpadding=”0”时，<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220630160636620.png" alt="image-20220630160636620" style="zoom:50%;" /></li><li>cellpadding=”10”时,<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220630160731419.png" alt="image-20220630160731419" style="zoom:50%;" /></li><li>cellspacing=”0”时，<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220630160731419.png" alt="image-20220630160731419" style="zoom:60%;" /></li><li>cellspacing=”10”时，<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220630160844104.png" alt="image-20220630160844104" style="zoom:60%;" /></li></ul></li></ul><h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><p>方式</p><ul><li>跨行合并：rowspan = “合并单元格数量”</li><li>跨列合并：colspan = “合并单元格数量”</li></ul><p>目标单元格</p><ul><li>跨行：最上侧单元格为目标单元格，写合并代码</li><li>跨列：最左侧单元格为目标单元格，写合并代码</li></ul><p>![image-20220315105235545](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01</a>  HTML与CSS/image-20220315105235545.png)</p><p>合并单元格三部曲：</p><ol><li>先确定跨行还是跨列</li><li>找到目标单元格，写上合并方式 = 合并的单元格数量，比如：&lt;td colspan = “2”&gt;&lt;/td&gt;</li><li>删除多语的单元格</li></ol><p>示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例效果：<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220630161352820.png" alt="image-20220630161352820" style="zoom:50%;" /></p><h3 id="表头单元格标签"><a href="#表头单元格标签" class="headerlink" title="表头单元格标签"></a>表头单元格标签</h3><p><code>th</code></p><p>一般表头单元格位于第一行或者第一列。表头单元格里面文本内容<strong>加粗居中</strong>显示</p><p>&lt;th&gt;即table head</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>刘德华<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>56<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>郭富城<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>51<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张学友<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>58<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>黎明<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>57<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表格结构标签"><a href="#表格结构标签" class="headerlink" title="表格结构标签"></a>表格结构标签</h3><p><code>thead</code> 与 <code>tbody</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--表格头部--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--表格主体--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>&lt;thead&gt;&lt;/thead&gt;用于定义表格的头部。&lt;thead&gt;内部必须拥有&lt;tr&gt;标签，一般是位于第一行</li><li>&lt;tbody&gt;&lt;/tbody&gt;用于定义表格的主体，主要用于放数据本体</li></ul><p>注意：以上标签都是要放在&lt;table&gt;&lt;/table&gt;标签中</p><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><h3 id="无序列表（重要）"><a href="#无序列表（重要）" class="headerlink" title="无序列表（重要）"></a>无序列表（重要）</h3><p>&lt;ul&gt;标签表示HTML页面中项目的无序列表，一般会以项目符号呈现列表项。而列表项使用&lt;li&gt;标签定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>工作<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>娱乐<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>无序列表各个列表项之间没有顺序级别之分，是并列的</li><li>&lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或者文字的做法都是<strong>不被允许</strong>的</li><li>&lt;li&gt;与&lt;/li&gt;之间相当于一个容器，可以容纳所有元素。（如：输入其他标签或者文字）</li><li>无序列表会带有自己的样式属性，但是在实际使用时，我们会用CSS来设置。</li></ul><p><strong>使用CSS去掉li前面的项目符号（小圆点）：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">list-style: none;<br></code></pre></td></tr></table></figure><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>在HTML中, &lt;ol&gt;标签用于定义有序列表，列表排序以数字来显示，并且使用&lt;li&gt;标签来定义表项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>刘德华 10000<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>刘若英 2000<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>pink老师 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>&lt;ol&gt;&lt;/ol&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ol&gt;&lt;/ol&gt;标签中输入其他标签或者文字的做法是不被允许的</li><li>&lt;li&gt;&lt;/li&gt;之间相当于一个容器，可以容纳所有元素（如：输入其他标签或者文字）</li><li>有序列表会带有自己样式属性，但是在实际使用时，我们会用CSS来设置。</li></ul><h3 id="自定义列表（重要）"><a href="#自定义列表（重要）" class="headerlink" title="自定义列表（重要）"></a>自定义列表（重要）</h3><p>如要实现以下效果：</p><p>![image-20220315151238173](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01</a>  HTML与CSS/image-20220315151238173.png)</p><p>在HTML标签中，&lt;dl&gt;标签用于定义描述列表（或定义列表），该标签会与&lt;dt&gt;(定义项目/名字)和&lt;dd&gt;（描述每一个项目/名字)一起使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>站点信息<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>意见反馈<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>免责声明<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>关于我们<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>文章归类<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="列表总结"><a href="#列表总结" class="headerlink" title="列表总结"></a>列表总结</h3><table><thead><tr><th>标签名</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td>&lt;ul&gt;&lt;/ul&gt;</td><td>无序标签</td><td>里面只包含&lt;li&gt;&lt;/li&gt;，没有顺序，使用较多，li里面可以包含任何标签</td></tr><tr><td>&lt;ol&gt;&lt;/ol&gt;</td><td>有序标签</td><td>里面只包含&lt;li&gt;&lt;/li&gt;，没有顺序，使用较少，li里面可以包含任何标签</td></tr><tr><td>&lt;dl&gt;&lt;/dl&gt;</td><td>自定义标签</td><td>里面只包含&lt;dt&gt;&lt;/dt&gt;和&lt;dd&gt;&lt;/dd&gt;，dt和dd里面可以放任何标签</td></tr></tbody></table><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><p>使用表单的目的：为了手机用户信息</p><p>如要实现某网站用户注册或者登录某网站：</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220315153023934.png" alt="image-20220315153023934" style="zoom:60%;" /><h3 id="表单的组成"><a href="#表单的组成" class="headerlink" title="表单的组成"></a>表单的组成</h3><p>在HTML标签中，一个完整的表单通常由<strong>表单域</strong>、<strong>表单控件（也称表单元素</strong>）和<strong>提示信息</strong>3个部分组成</p><h4 id="表单域form标签"><a href="#表单域form标签" class="headerlink" title="表单域form标签"></a>表单域form标签</h4><p>是一个<strong>包含表单元素的区域</strong></p><p>在HTML标签中，&lt;form&gt;标签用于定义表单域，以实现用户信息的收集和传递</p><p><strong>&lt;form&gt;会把它返回内的表单元素信息提交给服务器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url地址&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;提交方式&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;表单域名称&quot;</span>&gt;</span><br>    各种表单元素控件<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>常用属性</strong></p><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url地址</td><td>用于指定接收并处理表单数据的服务器程序的url地址</td></tr><tr><td>method</td><td>get/post</td><td>用于设置表单数据的提交方式，其取值为get或post</td></tr><tr><td>name</td><td>名称</td><td>用于指定表单的名称，以区分同一个页面中的多个表单域</td></tr></tbody></table><h4 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h4><h5 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h5><p>&lt;input&gt;标签用于手机用户信息，在这个标签中包含了一个type属性，根据不同的type属性值，输入字段拥有很多种形式（如：文本、字段、复选框、掩码后的文本控件、单选按钮、按钮等）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;属性值&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;属性值</span></span><br></code></pre></td></tr></table></figure><p><strong>type属性的属性值</strong>如下：</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>button</td><td>定义可点击按钮（多数情况下，用于通过javascript启动脚本）</td></tr><tr><td>checkbox</td><td>定义复选框</td></tr><tr><td>file</td><td>定义输入字段和“浏览”按钮，供文件上传</td></tr><tr><td>hidden</td><td>定义隐藏的输入字段</td></tr><tr><td>image</td><td>定义图像形式的提交按钮</td></tr><tr><td><strong>password</strong></td><td>定义密码字段，该字段的字符被掩码</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>reset</td><td>定义重置按钮，重置按钮会清除表单中的所有数据</td></tr><tr><td>submit</td><td>定义提交按钮，提交按钮会把表单数据发送到服务器</td></tr><tr><td>text</td><td>定义单行的输入字段，用户可以在其中输入文本，默认宽度为20个字符</td></tr></tbody></table><p>type属性的举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- text 文本框，用户可以输入任何文本 --&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- password 密码框，用户看不见输入的密码 --&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- radio 单选按钮，可以实现多选一，但下面的还实现不了 --&gt;</span><br>    性别：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span>男 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span>女 <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- checkbox 复选框，可以实现多选 --&gt;</span><br>    爱好：吃饭<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> 睡觉<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> 看剧<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 点击提交按钮，可以把表单域form里面的表单元素 里面的值提交给后台服务器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 重置按钮可以还原表单元素初始的默认状态 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重新提交&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 普通按钮button 现在点击没有效果，后期结合JS搭配使用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取短信验证码&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 文件域 使用场景 上传文件使用的 --&gt;</span><br>    上传文件：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例效果：</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01  HTML与CSS/image-20220701101418334.png" alt="image-20220701101418334" style="zoom:67%;" /><p>除type属性外的其他属性：</p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>由用户自定义</td><td>定义input元素的名称</td></tr><tr><td>value</td><td>由用户自定义</td><td>规定input元素的值</td></tr><tr><td>checked</td><td>checked</td><td>规定此input元素首席加载时应该被选中</td></tr><tr><td>maxlength</td><td>正整数</td><td>规定输入字段中的字符的最大长度</td></tr></tbody></table><p>name和value属性的举例，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name1&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- text 文本框，用户可以输入任何文本 --&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- password 密码框，用户看不见输入的密码 --&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- radio 单选按钮，可以实现多选一，但下面的还实现不了 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- name是表单元素名字，这里性别单选按钮必须由相同的名字name，才可以实现多选一 --&gt;</span><br>    性别：男 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span> 女 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- checkbox 复选框，可以实现多选 --&gt;</span><br>    爱好：吃饭<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;吃饭&quot;</span>&gt;</span> 睡觉<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;睡觉&quot;</span>&gt;</span> 看剧<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;看剧&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>name和value是每个表单元素都有的属性值，主要给后台人员使用</li><li>name表单元素的名字要求<strong>单选按钮和复选框要有相同的name值</strong></li></ul><p>checked和maxlength属性的举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 单选按钮和复选按钮可以设置checked属性，当页面打开的时候可以默认选中这个按钮，如下默认选择了“男” --&gt;</span><br>性别：男 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span> 女 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-comment">&lt;!-- text 文本框，用户可以输入任何文本，长度不超过6个字符 --&gt;</span><br>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>checked属性主要针对于单旋按钮和复选框，主要作用是一打开页面，可以默认选中某个表单元素</li><li>maxlength是用户可以在表单元素输入的最大字符数，一般较少使用</li></ul><h5 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h5><p>&lt;label&gt;标签为input元素定义标注，用于绑定一个表单元素，当点击&lt;label&gt;标签内的文本时，浏览器就会自动将焦点（光标）转到或者选择对应的表单元素上，用来增用户体验</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;性别&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- 实现效果是：直接点击“男”就可以选中该性别，否则必须点击选框才能选中 --&gt;</span><br></code></pre></td></tr></table></figure><p>核心：&lt;label&gt;标签中的<strong>for属性</strong>应该与相关元素的<strong>id属性</strong>相同</p><h5 id="select标签"><a href="#select标签" class="headerlink" title="select标签"></a>select标签</h5><p>下拉表单元素</p><p>在页面中，若由所个选项让用户选择，并且相邀节约页面空间是，可以使用&lt;select&gt;标签控件<strong>下拉列表</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">籍贯：<br><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>四川<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>广东<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>&lt;select&gt;中至少包含一对&lt;option&gt;</li><li>在&lt;option&gt;中定义<strong>selected=”selected”<strong>时，当前想即为</strong>默认选中</strong>项</li></ul><h5 id="textarea标签"><a href="#textarea标签" class="headerlink" title="textarea标签"></a>textarea标签</h5><p>文本域元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    今日反馈:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">clos</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>请写下你的心得<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>通过&lt;textarea&gt;标签可以轻松地创建多行文本输入框</li><li>cols=“每行中的字符”，rows=“现实的行数”，实际开发中不会使用，都是使用CSS来改变大小</li></ul><h2 id="form表单详述"><a href="#form表单详述" class="headerlink" title="form表单详述"></a>form表单详述</h2><p>什么是表单？</p><p>表单在网页中主要负责<strong>数据采集功能</strong>。HTML中的&lt;form&gt;标签，就是用于采集用户输入的信息，并通过&lt;form&gt;标签的提交操作，把采集到的信息提交到服务器端进行处理。</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li><p>表单标签</p><p><code>&lt;form&gt;</code></p></li><li><p>表单域</p><p>包含了文本框、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框和文件上传框等。</p></li><li><p>表单按钮</p><p><code>&lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</code></p></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email_or_mobile&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="lt-form-gt-标签"><a href="#lt-form-gt-标签" class="headerlink" title="&lt;form&gt;标签"></a><code>&lt;form&gt;</code>标签</h3><p><code>&lt;form&gt;</code>标签用来采集数据，<code>&lt;form&gt;</code>标签的属性则是用来规定<span style="color:red">如何把采集到的数据发送到服务器</span></p><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>action</td><td>URL地址</td><td>规定当提交表单时，向何处发送表单数据</td></tr><tr><td>method</td><td>get或post</td><td>规定以何种方式把表单数据提交到 action URL</td></tr><tr><td>enctype</td><td>application/x-www-form-urlencoded<br />multipart/form-data<br />text/plain</td><td>规定在发送表单数据之前如何对其进行编码</td></tr><tr><td>target</td><td>_blank<br />_self<br />_parent<br />_top<br /><em>framename</em></td><td>规定在何处打开 action URL</td></tr></tbody></table><h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><ul><li>action 属性用来规定当提交表单时，向何处发送表单数据。</li><li>action 属性的值应该是后端提供的一个 URL 地址，这个 URL 地址专门负责接收表单提交过来的数据。</li><li>当 &lt;form&gt; 表单在未指定 action 属性值的情况下，action 的默认值为当前页面的 URL 地址。</li></ul><p>注意：当提交表单后，页面会立即跳转到 action 属性指定的 URL 地址</p><h4 id="target"><a href="#target" class="headerlink" title="target"></a>target</h4><ul><li>target 属性用来规定在何处打开 action URL。</li><li>它的可选值有5个，默认情况下，target 的值是 _self，表示在相同的框架中打开 action URL</li></ul><table><thead><tr><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>_blank</td><td>在新窗口中打开。</td></tr><tr><td>_self</td><td>默认。在相同的框架中打开。</td></tr><tr><td>_parent</td><td>在父框架集中打开。（很少用）</td></tr><tr><td>_top</td><td>在整个窗口中打开。（很少用）</td></tr><tr><td><em>framename</em></td><td>在指定的框架中打开。（很少用）</td></tr></tbody></table><h4 id="method"><a href="#method" class="headerlink" title="method"></a>method</h4><ul><li>method 属性用来规定以何种方式把表单数据提交到 action URL。</li><li>它的可选值有两个，分别是 get 和 post。</li><li>默认情况下，method 的值为 get，表示通过URL地址的形式，把表单数据提交到 action URL。</li></ul><p>注意：<br>get 方式适合用来提交少量的、简单的数据。<br>post 方式适合用来提交大量的、复杂的、或包含文件上传的数据。<br>在实际开发中，<strong>&lt;form&gt; 表单的 post 提交方式用的最多，很少用 get</strong>。例如登录、注册、添加数据等表单操作，都需要使用 post 方式来提交表单。</p><h4 id="enctype"><a href="#enctype" class="headerlink" title="enctype"></a>enctype</h4><ul><li>enctype 属性用来规定在发送表单数据之前如何对数据进行编码。</li><li>它的可选值有三个，默认情况下，enctype 的值为 application/x-www-form-urlencoded，表示在<strong>发送前编码所有的字符</strong></li></ul><table><thead><tr><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>application/x-www-form-urlencoded</td><td>在发送前编码所有字符（默认）</td></tr><tr><td>multipart/form-data</td><td>不对字符编码。在使用包含<strong>文件上传控件</strong>的表单时，<strong>必须</strong>使用该值。</td></tr><tr><td>text/plain</td><td>空格转换为 “+” 加号，但不对特殊字符编码。（很少用）</td></tr></tbody></table><p><strong>注意：</strong><br><span style="color:red">在涉及到文件上传的操作时，必须将 enctype 的值设置为 multipart/form-data</span><br>如果表单的提交不涉及到文件上传操作，则直接将 enctype 的值设置为 application/x-www-form-urlencoded 即可！</p><h3 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h3><h4 id="表单的同步提交"><a href="#表单的同步提交" class="headerlink" title="表单的同步提交"></a>表单的同步提交</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>通过点击 submit 按钮，触发表单提交的操作，从而使页面跳转到 action URL 的行为，叫做表单的同步提交</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li>&lt;form&gt;表单同步提交后，整个页面会发生跳转，跳转到 action URL 所指向的地址，用户体验很差。</li><li>&lt;form&gt;表单同步提交后，页面之前的状态和数据会丢失。</li></ol><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>如果使用表单提交数据，则会导致以下两个问题：</p><ol><li>页面会发生跳转</li><li>页面之前的状态和数据会丢失</li></ol><p><strong>解决方案</strong>：<span style="color:red">表单只负责采集数据，Ajax 负责将数据提交到服务器。</span></p><h4 id="Ajax提交表单数据"><a href="#Ajax提交表单数据" class="headerlink" title="Ajax提交表单数据"></a>Ajax提交表单数据</h4><h5 id="监听表单提交事件"><a href="#监听表单提交事件" class="headerlink" title="监听表单提交事件"></a>监听表单提交事件</h5><p>在 jQuery 中，可以使用如下两种方式，监听到表单的提交事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;f1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user_name&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 第一种方式</span></span><br><span class="language-javascript">        <span class="hljs-comment">// $(&#x27;#f1&#x27;).submit(function () &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//   alert(&#x27;监听到了表单的提交事件&#x27;)</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 第二种方式</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;#f1&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;监听到了表单的提交事件2&#x27;</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="阻止表单默认提交行为"><a href="#阻止表单默认提交行为" class="headerlink" title="阻止表单默认提交行为"></a>阻止表单默认提交行为</h5><p>当监听到表单的提交事件以后，可以调用事件对象的 <code>e.preventDefault()</code> 函数，来阻止表单的提交和页面的跳转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 第一种方式</span></span><br><span class="language-javascript">        <span class="hljs-comment">// $(&#x27;#f1&#x27;).submit(function (e) &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//   alert(&#x27;监听到了表单的提交事件&#x27;)</span></span><br><span class="language-javascript">        <span class="hljs-comment">//   e.preventDefault()</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 第二种方式</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;#f1&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;  </span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;监听到了表单的提交事件2&#x27;</span>)</span><br><span class="language-javascript">            e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="快速获取表单中的数据"><a href="#快速获取表单中的数据" class="headerlink" title="快速获取表单中的数据"></a>快速获取表单中的数据</h5><h5 id="1-serialize-函数"><a href="#1-serialize-函数" class="headerlink" title="1 serialize()函数"></a>1 serialize()函数</h5><p>为了简化表单中数据的获取操作，jQuery 提供了 <code>serialize()</code> 函数，其语法格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(selector).<span class="hljs-title function_">serialize</span>()<br></code></pre></td></tr></table></figure><p><span style="color:red">serialize()可以一次性获取表单中的所有数据</span></p><p><strong>注意</strong>：</p><p><span style="color:red">在使用 serialize() 函数快速获取表单数据时，必须为每个表单元素添加 <strong>name 属性！</strong></span></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;f1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user_name&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 第一种方式</span></span><br><span class="language-javascript">        <span class="hljs-comment">/* $(&#x27;#f1&#x27;).submit(function (e) &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">        e.preventDefault()</span></span><br><span class="hljs-comment"><span class="language-javascript">        var data = $(this).serialize()</span></span><br><span class="hljs-comment"><span class="language-javascript">        console.log(data)</span></span><br><span class="hljs-comment"><span class="language-javascript">      &#125;) */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 第二种方式</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;#f1&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            e.<span class="hljs-title function_">preventDefault</span>()</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> data = $(<span class="hljs-string">&#x27;#f1&#x27;</span>).<span class="hljs-title function_">serialize</span>()</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>执行结果：（当分别输入 qq 和 123 后）</p><p>结果为：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">user_name=qq&amp;password=<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>01-HTML</category>
      
      <category>HTML</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>待学</title>
    <link href="/2022/11/25/%E5%BE%85%E5%AD%A6/"/>
    <url>/2022/11/25/%E5%BE%85%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="待学"><a href="#待学" class="headerlink" title="待学"></a>待学</h1><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><h2 id="大事件后台管理系统"><a href="#大事件后台管理系统" class="headerlink" title="大事件后台管理系统"></a>大事件后台管理系统</h2><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><h2 id="Maysql数据库"><a href="#Maysql数据库" class="headerlink" title="Maysql数据库"></a>Maysql数据库</h2><h2 id="NodeApi接口项目"><a href="#NodeApi接口项目" class="headerlink" title="NodeApi接口项目"></a>NodeApi接口项目</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>技术点关系</title>
    <link href="/2022/11/25/%E6%8A%80%E6%9C%AF%E7%82%B9%E5%85%B3%E7%B3%BB/"/>
    <url>/2022/11/25/%E6%8A%80%E6%9C%AF%E7%82%B9%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="技术点关系"><a href="#技术点关系" class="headerlink" title="技术点关系"></a>技术点关系</h2><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06 前后端交互/image-20220511113843919.png" alt="image-20220511113843919" style="zoom:60%;" />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Emmet</title>
    <link href="/2022/11/25/08-Emmet%E8%AF%AD%E6%B3%95/Emmet/"/>
    <url>/2022/11/25/08-Emmet%E8%AF%AD%E6%B3%95/Emmet/</url>
    
    <content type="html"><![CDATA[<h2 id="安装Emmet插件"><a href="#安装Emmet插件" class="headerlink" title="安装Emmet插件"></a>安装Emmet插件</h2><h2 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h2><h3 id="快速生成HTML结构语法"><a href="#快速生成HTML结构语法" class="headerlink" title="快速生成HTML结构语法"></a>快速生成HTML结构语法</h3><ul><li><p>生成骨架结构</p><p>用VScode创建HTML文件后，生成页面骨架结构的快捷方式：可以<strong>直接输入“!”</strong>, <strong>按下tab键</strong>，编辑器可以直接填充HTML结构标签</p></li><li><p>利用插件在浏览器中阅览页面</p><p>单击鼠标右键，在弹出的选择栏中点击 “Open in Default Browser”</p></li><li><p>生成标签——直接输入标签名，按下tab键即可，</p></li><li><p>生成多个相同标签——标签名*数量即可</p></li><li><p>若是父子级关系的标签，可以用&gt;(大于符号)。如：ul&gt;li</p></li><li><p>若是兄弟关系的标签，用 +(加号) 就可以。如：div+p</p></li><li><p>若生成带有类名或者id名的，直接写.demo或者#two，再按下tab键‘</p></li><li><p>若生成的div类名是有顺序的，可以用自增符号$</p></li><li><p>若想要再生成的标签内部写内容可以用{}表示</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 输入标签名div，再按下tab键 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 输入：p*6，再按下tab键 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 输入：ul&gt;li 再按下回车键enter --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 输入：div+p 再按下回车键enter --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 输入：.demo (默认是div)--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 输入：#two (默认是div)--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 输入：p.demo (默认是div，可更改为p) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 输入：p#two (默认是div，可更改为p) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 输入：.demo*3 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 输入：.demo$*3 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 输入：div&#123;文字&#125; 按下回车键 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>文字<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 输入：div&#123;$&#125;*3 按下回车键 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="快速生成CSS样式"><a href="#快速生成CSS样式" class="headerlink" title="快速生成CSS样式"></a>快速生成CSS样式</h3><p>基本采取简写形式即可：</p><ul><li>如w200 按tab键 生成width: 200px;</li><li>如lh26 按tab键 生成line-height: 26px;</li></ul><h3 id="快速格式化代码"><a href="#快速格式化代码" class="headerlink" title="快速格式化代码"></a>快速格式化代码</h3>]]></content>
    
    
    <categories>
      
      <category>08-Emmet语法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>axios</title>
    <link href="/2022/11/25/03-JS/NodeJS/axios/"/>
    <url>/2022/11/25/03-JS/NodeJS/axios/</url>
    
    <content type="html"><![CDATA[<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>Axios 是一个基于 promise 网络请求库，作用于<code>node.js</code>和浏览器中</p><p>Axios 是专注于网络数据请求的库。<br>相比于原生的 XMLHttpRequest 对象，axios 简单易用。<br>相比于 jQuery，axios 更加轻量化，只专注于网络数据请求</p><blockquote><p>axios一个专注于请求的库</p><p>注意：axios()方法返回的是一个 Promise 实例</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm install axios</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 调用 axios 方法得到的返回值是 Promise 对象</span><br><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-comment">// 请求方式</span><br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-comment">// 请求的地址</span><br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-comment">// URL 中的查询参数 GET请求时用params</span><br>    <span class="hljs-attr">params</span>: &#123;&#125;,<br>    <span class="hljs-comment">// 请求体参数 POST请求时 用data</span><br>    <span class="hljs-attr">data</span>: &#123;&#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;<br>    <br>&#125;)<br></code></pre></td></tr></table></figure><p>注意：属性 params 与 data 二者选一，根据发的是 GET 请求 还是POST请求决定</p><h2 id="axios-直接发请求"><a href="#axios-直接发请求" class="headerlink" title="axios()直接发请求"></a>axios()直接发请求</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 调用 axios 方法得到的返回值是 Promise 对象</span><br><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-comment">// 请求方式</span><br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    <span class="hljs-comment">// 请求的地址</span><br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,<br>    <span class="hljs-comment">// URL 中的查询参数 GET请求时用params</span><br>    <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span><br>    &#125;,<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br>&#125;)<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220809100741659.png" alt="image-20220809100741659"></p><p>真正的数据在 result.data.data 中</p><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>    &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="await与async"><a href="#await与async" class="headerlink" title="await与async"></a>await与async</h3><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><ol><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">[param[, param[, ... param]]]</span>) &#123;<br>    statements<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>返回值：</p><p>一个<code>Promise</code>，这个 promise 要么会通过一个由 async 函数返回的值被解决，要么会通过一个从 async 函数中抛出的（或其中没有被捕获到的）异常被拒绝。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>描述：</p><p>async 函数的函数体可以被看作是由 0 个或者多个 await 表达式分割开来的。<strong>从第一行代码直到（并包括）第一个 await 表达式</strong>（如果有的话）都是<strong>同步</strong>运行的。这样的话，一个不含 await 表达式的 async 函数是会同步运行的。然而，如果函数体内有一个 await 表达式，async 函数就一定会异步执行</p><p>示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">await</span> <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-literal">undefined</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><p>await 表达式会暂停当前 <code>async function</code> 的执行，等待 Promise 处理完成。</p><ul><li>若 Promise 正常处理 (fulfilled)，其回调的 resolve 函数参数作为 await 表达式的值，继续执行 <code>async function</code>。</li><li>若 Promise 处理异常 (rejected)，await 表达式会把 Promise 的异常原因抛出。</li></ul><p>若 Promise 处理异常 (rejected)，await 表达式会把 Promise 的异常原因抛出。</p><p>另外，如果 await 操作符后的表达式的值不是一个 Promise，则返回该值本身。</p><p>某个方法的返回值是 <code>Promise</code> 实例，则前面可以添加 <code>await</code> 但 await 只能用在被 <code>async</code> 修饰的方法中, </p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnGet&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 将获得的数据进行解构，并重命名为res</span><br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: res &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,<br>        <span class="hljs-attr">params</span>: &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-number">1</span><br>        &#125;<br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>&#125;)<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnPost&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 将获得的数据进行解构，并重命名为res</span><br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: res &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,<br>        <span class="hljs-attr">data</span>: &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>        &#125;<br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="axios-get"><a href="#axios-get" class="headerlink" title="axios.get()"></a>axios.get()</h3><p>还可以用 <code>axios.get()</code> <code>axios.post()</code> 直接发起请求</p><blockquote><p>axios.get(url, { params: { id: 1 } })</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnGet&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span><br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: res &#125; = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(url, &#123;<br>        <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;<br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="axios-post"><a href="#axios-post" class="headerlink" title="axios.post()"></a>axios.post()</h3><blockquote><p>axios.post(url, { name: ‘zs’, age: 19 })</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnPost&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span><br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: res &#125; = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">post</span>(url, &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">19</span><br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>NodeJS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>防抖与节流</title>
    <link href="/2022/11/25/03-JS/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
    <url>/2022/11/25/03-JS/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a>防抖与节流</h1><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>防抖策略（debounce）是当事件被触发后，<strong>延迟 n 秒</strong>后再执行回调，如果在这 n 秒内事件又被触发，则重新计时</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>用户在输入框中连续输入一串字符时，可以通过防抖策略，只在输入完后，才执行查询的请求，这样可以有效减少请求次数，节约请求资源</p><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>节流策略（throttle），顾名思义，可以减少一段时间内事件的触发频率</p><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>鼠标连续不断地触发某事件（如点击），只在<strong>单位时间内</strong>只触发一次；（如：鼠标跟随效果）</li><li>懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费 CPU 资源；</li></ul><h2 id="节流与防抖区别"><a href="#节流与防抖区别" class="headerlink" title="节流与防抖区别"></a>节流与防抖区别</h2><p>防抖：如果事件被频繁触发，防抖能保证只有最后一次触发生效！前面 N 多次的触发都会被忽略！<br>节流：如果事件被频繁触发，节流能够减少事件触发的频率，因此，节流是有选择性地执行一部分事件！</p>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTP</title>
    <link href="/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/WebAPI/HTTP/"/>
    <url>/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/WebAPI/HTTP/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h2><p>HTTP 协议即超文本传送协议 (HyperText Transfer Protocol) ，它规定了<strong>客户端与服务器</strong>之间进行网页内容传输时，所必<strong>须遵守的传输格式</strong>。<br>例如：</p><ul><li>客户端要以HTTP协议要求的格式把数据提交到服务器</li><li>服务器要以HTTP协议要求的格式把内容响应给客户端</li></ul><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p> HTTP 协议属于客户端浏览器和服务器之间的通信协议。因此，客户端发起的请求叫做 HTTP 请求，客户端发送到服务器的消息，叫做 HTTP 请求消息</p><h3 id="HTTP-请求消息"><a href="#HTTP-请求消息" class="headerlink" title="HTTP 请求消息"></a>HTTP 请求消息</h3><p>HTTP 请求消息由请求行（request line）、请求头部（ header ） 、空行 和 请求体 4 个部分组成</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220925213036902.png" alt="image-20220925213036902"></p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>请求行由请求方式、URL 和 HTTP 协议版本 3 个部分组成，他们之间使用空格隔开。</p><p>第一行： POST /api/post HTTP/1.1 就是请求行</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220925213808760.png" alt="image-20220925213808760"></p><h4 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h4><p>请求头部用来<strong>描述客户端的基本信息</strong>，从而把客户端相关的信息告知服务器。</p><p>比如</p><ul><li><p>User-Agent 用来说明当前是什么类型的浏览器；</p></li><li><p>Content-Type 用来描述发送到服务器的数据格式；</p></li><li><p>Accept 用来描述客户端能够接收什么类型的返回内容；</p></li><li><p>Accept-Language 用来描述客户端期望接收哪种人类语言的文本内容。</p></li></ul><p>请求头部由多行 键/值对 组成，每行的键和值之间用英文的冒号分隔</p><p><strong>常见请求头字段</strong></p><table><thead><tr><th><strong>头部字段</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Host</td><td>要请求的服务器域名</td></tr><tr><td>Connection</td><td>客户端与服务器的连接方式(close 或 keepalive)</td></tr><tr><td>Content-Length</td><td>用来描述请求体的大小</td></tr><tr><td>Accept</td><td>客户端可识别的响应内容类型列表</td></tr><tr><td>User-Agent</td><td>产生请求的浏览器类型</td></tr><tr><td>Content-Type</td><td>客户端告诉服务器实际发送的数据类型</td></tr><tr><td>Accept-Encoding</td><td>客户端可接收的内容压缩编码形式</td></tr><tr><td>Accept-Language</td><td>用户期望获得的自然语言的优先顺序</td></tr></tbody></table><h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><p>最后一个请求头字段的后面是一个空行，通知服务器请求头部至此结束。<br>请求消息中的空行，用来分隔请求头部与请求体</p><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><p>请求体中存放的，是要通过 <code>POST</code> 方式提交到服务器的数据</p><p><strong>注意：</strong>只有 POST 请求才有请求体，GET 请求没有请求体</p><h2 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><h3 id="HTTP响应消息"><a href="#HTTP响应消息" class="headerlink" title="HTTP响应消息"></a>HTTP响应消息</h3><p>响应消息就是服务器响应给客户端的消息内容，也叫作响应报文</p><h3 id="响应消息的组成部分"><a href="#响应消息的组成部分" class="headerlink" title="响应消息的组成部分"></a>响应消息的组成部分</h3><p>HTTP响应消息由 <strong>状态行、响应头部、空行</strong> 和 <strong>响应体</strong> 4 个部分组成，如下图所示</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220925215005419.png" alt="image-20220925215005419"></p><h3 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h3><p>状态行由 <strong>HTTP 协议版本</strong>、<strong>状态码</strong>和<strong>状态码的描述文本</strong> 3 个部分组成，他们之间使用空格隔开</p><p>第一行：HTTP/1.1 200 OK 为状态行</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220925215223694.png" alt="image-20220925215223694"></p><h3 id="响应头部"><a href="#响应头部" class="headerlink" title="响应头部"></a>响应头部</h3><p>响应头部用来<strong>描述服务器的基本信息</strong>。响应头部由多行 键/值对 组成，每行的键和值之间用英文的冒号分隔</p><h3 id="空行-1"><a href="#空行-1" class="headerlink" title="空行"></a>空行</h3><p>在最后一个响应头部字段结束之后，会紧跟一个空行，用来通知客户端响应头部至此结束。<br>响应消息中的空行，用来分隔响应头部与响应体</p><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>响应体中存放的，是服务器响应给客户端的资源内容</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220925220229798.png" alt="image-20220925220229798"></p><h2 id="HTTP请求法"><a href="#HTTP请求法" class="headerlink" title="HTTP请求法"></a>HTTP请求法</h2><p>HTTP 请求方法，属于 HTTP 协议中的一部分，请求方法的作用是：用来表明要对服务器上的资源执行的操作。最常用的请求方法是 GET 和 POST</p><table><thead><tr><th><strong>序号</strong></th><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>(查询)发送请求来获得服务器上的资源，请求体中不会包含请求数据，请求数据放在协议头中。</td></tr><tr><td>2</td><td>POST</td><td>(新增)向服务器提交资源（例如提交表单或上传文件）。数据被包含在请求体中提交给服务器。</td></tr><tr><td>3</td><td>PUT</td><td>(修改)向服务器提交资源，并使用提交的新资源，<strong>替换</strong>掉服务器对应的旧资源。</td></tr><tr><td>4</td><td>DELETE</td><td>(删除)请求服务器删除指定的资源。</td></tr><tr><td>5</td><td>HEAD</td><td>HEAD 方法请求一个与 GET 请求的响应相同的响应，但没有响应体。</td></tr><tr><td>6</td><td>OPTIONS</td><td>获取http服务器支持的http请求方法，允许客户端查看服务器的性能，比如ajax跨域时的预检等。</td></tr><tr><td>7</td><td>CONNECT</td><td>建立一个到由目标资源标识的服务器的隧道。</td></tr><tr><td>8</td><td>TRACE</td><td>沿着到目标资源的路径执行一个消息环回测试，主要用于测试或诊断。</td></tr><tr><td>9</td><td>PATCH</td><td>是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h2 id="HTTP响应状态码"><a href="#HTTP响应状态码" class="headerlink" title="HTTP响应状态码"></a>HTTP响应状态码</h2><p>HTTP 响应状态码（HTTP Status Code），也属于 HTTP 协议的一部分，用来标识响应的状态。</p><p>响应状态码会随着响应消息一起被发送至客户端浏览器，浏览器根据服务器返回的响应状态码，就能知道这次 HTTP 请求的结果是成功还是失败了</p><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><p>HTTP 状态码由三个十进制数字组成，<strong>第一个</strong>十进制数字定义了<strong>状态码的类型</strong>，后两个数字用来对状态码进行细分</p><table><thead><tr><th><strong>分类</strong></th><th><strong>分类描述</strong></th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作（实际开发中很少遇到 1** 类型的状态码）</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h3 id="2-成功相关的响应状态码"><a href="#2-成功相关的响应状态码" class="headerlink" title="2** 成功相关的响应状态码"></a>2** 成功相关的响应状态码</h3><p>表示服务器已成功接收到请求并进行处理</p><table><thead><tr><th><strong>状态码</strong></th><th><strong>状态码英文名称</strong></th><th><strong>中文描述</strong></th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>请求成功。一般用于 GET 与 POST 请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源，通常用于 POST 或 PUT 请求</td></tr></tbody></table><h3 id="3-重定向相关的响应状态码"><a href="#3-重定向相关的响应状态码" class="headerlink" title="3** 重定向相关的响应状态码"></a>3** 重定向相关的响应状态码</h3><p>表示服务器要求客户端重定向，需要客户端进一步的操作以完成资源的请求</p><table><thead><tr><th><strong>状态码</strong></th><th><strong>状态码英文名称</strong></th><th><strong>中文描述</strong></th></tr></thead><tbody><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源（响应消息中不包含响应体）。客户端通常会缓存访问过的资源。</td></tr></tbody></table><h3 id="4-客户端错误相关的响应状态码"><a href="#4-客户端错误相关的响应状态码" class="headerlink" title="4** 客户端错误相关的响应状态码"></a>4** 客户端错误相关的响应状态码</h3><p>表示客户端的请求有非法内容，从而导致这次请求失败</p><table><thead><tr><th><strong>状态码</strong></th><th><strong>状态码英文名称</strong></th><th><strong>中文描述</strong></th></tr></thead><tbody><tr><td>400</td><td>Bad Request</td><td>1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。2、请求参数有误。</td></tr><tr><td>401</td><td>Unauthorized</td><td>当前请求需要用户验证。</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器已经理解请求，但是拒绝执行它。</td></tr><tr><td><strong>404</strong></td><td><strong>Not Found</strong></td><td><strong>服务器无法根据客户端的请求找到资源（网页）。</strong></td></tr><tr><td>408</td><td>Request Timeout</td><td>请求超时。服务器等待客户端发送的请求时间过长，超时。</td></tr></tbody></table><h3 id="5-服务端错误相关的响应状态码"><a href="#5-服务端错误相关的响应状态码" class="headerlink" title="5** 服务端错误相关的响应状态码"></a>5** 服务端错误相关的响应状态码</h3><p>表示服务器未能正常处理客户端的请求而出现意外错误</p><table><thead><tr><th><strong>状态码</strong></th><th><strong>状态码英文名称</strong></th><th><strong>中文描述</strong></th></tr></thead><tbody><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求。</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持该请求方法，无法完成请求。只有 GET 和 HEAD 请求方法是要求每个服务器必须支持的，其它请求方法在不支持的服务器上会返回501</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。</td></tr></tbody></table><h2 id="HTTP-与-HTTPS-区别"><a href="#HTTP-与-HTTPS-区别" class="headerlink" title="HTTP 与 HTTPS 区别"></a>HTTP 与 HTTPS 区别</h2><ul><li>HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。</li><li>使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。</li><li>HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。</li><li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</li><li>HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源</li></ul><h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><h3 id="什么是同源"><a href="#什么是同源" class="headerlink" title="什么是同源"></a>什么是同源</h3><p>如果两个页面的协议，域名和端口都相同，则两个页面具有相同的源</p><p>下表给出了相对于 <a href="http://www.test.com/index.html">http://www.test.com/index.html</a> 页面的同源检测</p><table><thead><tr><th><strong>URL</strong></th><th><strong>是否同源</strong></th><th><strong>原因</strong></th></tr></thead><tbody><tr><td><a href="http://www.test.com/other.html">http://www.test.com/other.html</a></td><td>是</td><td>同源（协议、域名、端口相同）</td></tr><tr><td><a href="https://www.test.com/about.html">https://www.test.com/about.html</a></td><td>否</td><td>协议不同（http 与 https）</td></tr><tr><td><a href="http://blog.test.com/movie.html">http://blog.test.com/movie.html</a></td><td>否</td><td>域名不同（<a href="http://www.test.com/">www.test.com</a> 与 blog.test.com）</td></tr><tr><td><a href="http://www.test.com:7001/home.html">http://www.test.com:7001/home.html</a></td><td>否</td><td>端口不同（默认的 80 端口与 7001 端口）</td></tr><tr><td><a href="http://www.test.com/main.html">http://www.test.com:80/main.html</a></td><td>是</td><td>同源（协议、域名、端口相同）</td></tr></tbody></table><h3 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h3><p>同源策略（英文全称 Same origin policy）是浏览器提供的一个安全功能</p><p>通俗的理解：浏览器规定，A 网站的 JavaScript，不允许和非同源的网站 C 之间，进行资源的交互，例如：</p><ul><li>无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</li><li>无法接触非同源网页的 DOM</li><li>无法向非同源地址发送 Ajax 请求</li></ul><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>同源指的是两个 URL 的协议、域名、端口一致，反之，则是跨域。<br>出现跨域的<strong>根本原因</strong>：浏览器的同源策略不允许非同源的 URL 之间进行资源的交互</p><blockquote><p>注意：浏览器允许发起跨域请求，但是，跨域请求回来的数据，会被浏览器拦截，无法被页面获取到！</p></blockquote><h4 id="实现跨域请求"><a href="#实现跨域请求" class="headerlink" title="实现跨域请求"></a>实现跨域请求</h4><p>实现跨域数据请求，最主要的两种解决方案，分别是 JSONP 和 CORS</p><ul><li>JSONP：出现的早，兼容性好（兼容低版本IE）。是前端程序员为了解决跨域问题，被迫想出来的一种临时解决方案。<strong>缺点</strong>是只支持 GET 请求，不支持 POST 请求。</li><li>CORS：出现的较晚，它是 W3C 标准，属于跨域 Ajax 请求的根本解决方案。支持 GET 和 POST 请求。缺点是不兼容某些低版本的浏览器</li></ul><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>JSONP (JSON with Padding) 是 JSON 的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题</p><h4 id="JSONP的实现原理"><a href="#JSONP的实现原理" class="headerlink" title="JSONP的实现原理"></a>JSONP的实现原理</h4><p>由于浏览器同源策略的限制，网页中无法通过 Ajax 请求非同源的接口数据。但是 <code>&lt;script&gt;</code> 标签<strong>不受浏览器同源策略的影响</strong>，可以通过 src 属性，请求非同源的 js 脚本。<br>因此，JSONP 的实现原理，就是通过 <code>&lt;script&gt;</code> 标签的 src 属性，请求跨域的数据接口，并通过函数调用的形式，接收跨域接口响应回来的数据</p><h4 id="实现一个简单的JSONP"><a href="#实现一个简单的JSONP" class="headerlink" title="实现一个简单的JSONP"></a>实现一个简单的JSONP</h4><p>定义一个 success 回调函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-keyword">function</span> <span class="hljs-title function_">success</span>(<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;获取到了data数据：&#x27;</span>)</span><br><span class="language-javascript">     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)</span><br><span class="language-javascript">   &#125;</span><br><span class="language-javascript"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 通过 &lt;script&gt; 标签，请求接口数据： --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://ajax.frontend.itheima.net:3006/api/jsonp?callback=success&amp;name=zs&amp;age=20&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>通过callback来指定要调用的回调函数</p><h4 id="JSONP的缺点"><a href="#JSONP的缺点" class="headerlink" title="JSONP的缺点"></a>JSONP的缺点</h4><p>由于 JSONP 是通过 <code>&lt;script&gt;</code> 标签的 src 属性，来实现跨域数据获取的，所以，JSONP 只支持 GET 数据请求，不支持 POST 请求。</p><blockquote><p>注意：<strong>JSONP 和 Ajax 之间没有任何关系</strong>，不能把 JSONP 请求数据的方式叫做 Ajax，因为 JSONP 没有用到 XMLHttpRequest 这个对象</p></blockquote><h4 id="jQuery中的JSONP"><a href="#jQuery中的JSONP" class="headerlink" title="jQuery中的JSONP"></a>jQuery中的JSONP</h4><p>如果要使用 $.ajax() 发起 JSONP 请求，<strong>必须指定 datatype 为 jsonp</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://ajax.frontend.itheima.net:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,<br>    <span class="hljs-comment">// 如果要使用 $.ajax() 发起 JSONP 请求，必须指定 datatype 为 jsonp</span><br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;jsonp&#x27;</span>,<br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>    &#125;<br> &#125;)<br></code></pre></td></tr></table></figure><p>默认情况下，使用 jQuery 发起 JSONP 请求，会自动携带一个 <strong>callback=jQueryxxx</strong> 的参数，jQueryxxx 是随机生成的一个回调函数名称。</p><p>若想要自定义 JSONP 的参数以及回调函数名称（上面的callback=jQueryxxx)，需要添加如下操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 发送到服务端的参数名称，默认值为 callback</span><br><span class="hljs-attr">jsonp</span>: <span class="hljs-string">&#x27;callback&#x27;</span><br><span class="hljs-comment">// 自定义的回调函数名称，默认值为 jQueryxxx 格式</span><br><span class="hljs-attr">jsonpCallback</span>: <span class="hljs-string">&#x27;abc&#x27;</span><br></code></pre></td></tr></table></figure><p>即：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://ajax.frontend.itheima.net:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;jsonp&#x27;</span>,<br>    <span class="hljs-comment">// 发送到服务端的参数名称，默认值为 callback</span><br>    <span class="hljs-attr">jsonp</span>: <span class="hljs-string">&#x27;callback&#x27;</span>,<br>    <span class="hljs-comment">// 自定义的回调函数名称，默认值为 jQueryxxx 格式</span><br>    <span class="hljs-attr">jsonpCallback</span>: <span class="hljs-string">&#x27;abc&#x27;</span>,<br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><h5 id="jQuery中JSONP的实现过程"><a href="#jQuery中JSONP的实现过程" class="headerlink" title="jQuery中JSONP的实现过程"></a>jQuery中JSONP的实现过程</h5><p>jQuery 中的 JSONP，也是通过 <code>&lt;script&gt;</code> 标签的 src 属性实现跨域数据访问的，只不过，jQuery 采用的是动态创建和移除 <code>&lt;script&gt;</code> 标签的方式，来发起 JSONP 数据请求。</p><ul><li>在发起 JSONP 请求的时候，动态向 <code>&lt;header&gt;</code> 中 append 一个 <code>&lt;script&gt;</code> 标签；</li><li>在 JSONP 请求成功以后，动态从 <code>&lt;header&gt;</code>  中移除刚才 append 进去的 <code>&lt;script&gt;</code> 标签</li></ul>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>JS语法</category>
      
      <category>WebAPI</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Koa2</title>
    <link href="/2022/11/25/03-JS/NodeJS/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/Koa2/"/>
    <url>/2022/11/25/03-JS/NodeJS/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/Koa2/</url>
    
    <content type="html"><![CDATA[<h1 id="Koa2"><a href="#Koa2" class="headerlink" title="Koa2"></a>Koa2</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><p>支持async/await</p></li><li><p>洋葱模型的中间件</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E5%9B%BE%E7%89%871.png" alt="图片1" style="zoom:50%;" /></li></ul><h2 id="Koa2基本使用"><a href="#Koa2基本使用" class="headerlink" title="Koa2基本使用"></a>Koa2基本使用</h2><ol><li><p>检查Node的环境</p><p>Koa2 的使用要求 Node 版本在7.6及以上，通过 <code>node -v</code> 检查node的版本</p></li><li><p>安装Koa</p><ul><li><p><code>npm init -y</code> 创建package.json 文件，用于维护第三方包的信息</p></li><li><p><code>npm i koa</code> 下载最新版本的koa到当前项目中</p><p>下载速度慢的话，可以通过淘宝进行下载 </p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">npm <span class="hljs-keyword">set</span> <span class="hljs-keyword">registry</span> https://<span class="hljs-keyword">registry</span>.npm.taobao.org/<br></code></pre></td></tr></table></figure></li></ul></li><li><p>创建并编写app.js文件</p><ul><li><p>创建Koa实例对象</p></li><li><p>编写响应函数（中间件）</p><ul><li><em>ctx 上下文，web容器，ctx.request 可以拿到请求对象 ctx.response可以拿到响应对象</em></li><li><em>next 下一个中间件，下一层中间件是否能够得到执行，取决于next这个函数有没有被调用</em></li></ul></li><li><p>绑定端口号 3000</p><p>通过 <code>app.listen</code> 就可以指明一个端口号</p></li></ul><p>如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1 创建koa实例对象</span><br><span class="hljs-comment">// 1.1 导入构造方法</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa&#x27;</span>);<br><span class="hljs-comment">// 1.2 通过构造方法创建实例对象</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><br><span class="hljs-comment">// 2 编写响应函数（中间件）</span><br><span class="hljs-comment">// ctx 上下文，web容器，ctx.request ctx.response</span><br><span class="hljs-comment">// next 下一个中间件，下一层中间件是否能够得到执行，取决于next这个函数有没有被调用</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">ctx, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ctx.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>);<br>  ctx.<span class="hljs-property">response</span>.<span class="hljs-property">body</span> = <span class="hljs-string">&#x27;hello world!&#x27;</span>;<br>&#125;);<br><br><span class="hljs-comment">// 3 绑定端口号 3000</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure></li><li><p>启动服务器</p><p>通过 <code>node app.js</code> 就可以启动服务器了</p></li></ol><p>随即打开浏览器, 在浏览器中输入 127.0.0.1:3000/ 你将会看到浏览器中出现 hello world 的字符 串, 并且在服务器的终端中, 也能看到请求的 url</p><h3 id="中间件特点"><a href="#中间件特点" class="headerlink" title="中间件特点"></a>中间件特点</h3><ul><li>Koa对象通过use方法加入一个中间件</li><li>一个中间件就是一个函数</li><li>中间件的执行顺序符合洋葱模型</li><li>内层中间件能否篇执行取决于外层中间件的next函数是否调用</li><li>调用next函数得到的是Promise对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1 创建koa实例对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><br><span class="hljs-comment">// 2 编写响应函数（中间件）</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">ctx, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第一层中间件1&#x27;</span>);<br>  ctx.<span class="hljs-property">response</span>.<span class="hljs-property">body</span> = <span class="hljs-string">&#x27;hello world!&#x27;</span>;<br>  <span class="hljs-title function_">next</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第一层中间件2&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 2.2 第二层中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">ctx, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第二层中间件1&#x27;</span>);<br>  <span class="hljs-comment">// next();</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第二层中间件2：&#x27;</span>, <span class="hljs-title function_">next</span>());<br>&#125;);<br><span class="hljs-comment">// 2.3 第三层中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">ctx, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第三层中间件&#x27;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;第三层中间件&#x27;</span>;<br>&#125;);<br><br><span class="hljs-comment">// 3 绑定端口号 3000</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">第一层中间件<span class="hljs-number">1</span><br>第二层中间件<span class="hljs-number">1</span><br>第三层中间件<br>第二层中间件<span class="hljs-number">2</span>： <span class="hljs-built_in">Promise</span> &#123; <span class="hljs-string">&#x27;第三层中间件&#x27;</span> &#125;<br>第一层中间件<span class="hljs-number">2</span><br><br>第一层中间件<span class="hljs-number">1</span><br>第二层中间件<span class="hljs-number">1</span><br>第三层中间件<br>第二层中间件<span class="hljs-number">2</span>： <span class="hljs-built_in">Promise</span> &#123; <span class="hljs-string">&#x27;第三层中间件&#x27;</span> &#125;<br>第一层中间件<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>通过next函数进入下一个中间件（下一个函数的调用），但是next并不是简单的下一个函数的调用，而是其返回值外包裹一层promise，返回的是Promise对象</p><p>若想要拿到promise里面的内容，可以使用 <code>async await</code></p><p>如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>  <span class="hljs-comment">// 1 将进入中间件的逻辑写在此处</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第二层中间件1&#x27;</span>);<br>  <span class="hljs-comment">// 2 调用next函数</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第二层中间件2：&#x27;</span>, <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>());<br>  <span class="hljs-comment">// 3  调用next函数之后可以写内层中间件结束之后的逻辑</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>完整逻辑如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1 创建koa实例对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><br><span class="hljs-comment">// 2 编写响应函数（中间件）</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">ctx, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第一层中间件1&#x27;</span>);<br>  ctx.<span class="hljs-property">response</span>.<span class="hljs-property">body</span> = <span class="hljs-string">&#x27;hello world!&#x27;</span>;<br>  <span class="hljs-title function_">next</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第一层中间件2&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 2.2 第二层中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第二层中间件1&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第二层中间件2：&#x27;</span>, <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>());<br>&#125;);<br><span class="hljs-comment">// 2.3 第三层中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">ctx, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第三层中间件&#x27;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;第三层中间件&#x27;</span>;<br>&#125;);<br><br><span class="hljs-comment">// 3 绑定端口号 3000</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br><br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs">第一层中间件1<br>第二层中间件1<br>第三层中间件<br>第一层中间件2<br>第二层中间件2： 第三层中间件<br><br>第一层中间件1<br>第二层中间件1<br>第三层中间件<br>第一层中间件2<br>第二层中间件2： 第三层中间件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>NodeJS</category>
      
      <category>后端框架</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常见问题</title>
    <link href="/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>常见问题</p><p>如何访问对象属性值？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;andy&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">19</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[key]);<br>&#125;<br><br><span class="hljs-comment">// console.log(obj[name]);  // undefined，原因是name没有加引号会被识别为变量</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[<span class="hljs-string">&#x27;name&#x27;</span>]);   <span class="hljs-comment">// andy</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">name</span>);      <span class="hljs-comment">// andy</span><br></code></pre></td></tr></table></figure><p>检测字符串是否符合正则表达式要求的规范? <code>test()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> regexp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-regexp">/123/</span>);<br>regexp.<span class="hljs-title function_">test</span>(<span class="hljs-number">123</span>)<span class="hljs-comment">// true</span><br>regexp.<span class="hljs-title function_">test</span>(‘abc’)<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>JS语法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常见问题</title>
    <link href="/2022/11/25/01-HTML/HTML/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2022/11/25/01-HTML/HTML/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="id相关"><a href="#id相关" class="headerlink" title="id相关"></a>id相关</h2><h3 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;#geren&quot;</span>&gt;</span>个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  .<br>  .（中间内容略去）<br>  .<br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;geren&quot;</span>&gt;</span>个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表单中的label标签"><a href="#表单中的label标签" class="headerlink" title="表单中的label标签"></a>表单中的label标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;性别&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- 实现效果是：直接点击“男”就可以选中该性别，否则必须点击选框才能选中 --&gt;</span><br></code></pre></td></tr></table></figure><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 样式#定义，结构id调用，只能调用一次，别人切勿使用 */</span></span><br><span class="language-css">    <span class="hljs-selector-id">#pink</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: greenyellow;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><br>调用<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pink&quot;</span>&gt;</span>id选择器<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="元素模式"><a href="#元素模式" class="headerlink" title="元素模式"></a>元素模式</h2><p>有哪些元素模式？区别是什么</p><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><ul><li>&lt;h1&gt;~&lt;h6&gt;</li><li>&lt;p&gt;</li><li>&lt;div&gt;</li><li>&lt;ul&gt; &lt;ol&gt; &lt;li&gt;</li></ul><h3 id="行内元素："><a href="#行内元素：" class="headerlink" title="行内元素："></a>行内元素：</h3><ul><li>&lt;a&gt;</li><li>&lt;strong&gt; &lt;b&gt; &lt;em&gt; &lt;i&gt; &lt;del&gt; &lt;s&gt; &lt;ins&gt; &lt;u&gt; </li><li>&lt;span&gt;</li></ul><h3 id="行内块元素："><a href="#行内块元素：" class="headerlink" title="行内块元素："></a>行内块元素：</h3><ul><li>&lt;img /&gt;</li><li>&lt;input /&gt;</li><li>&lt;td&gt;</li><li>&lt;textarea&gt;&lt;/textarea&gt;</li></ul><p>行内块元素之间存在一定边距</p>]]></content>
    
    
    <categories>
      
      <category>01-HTML</category>
      
      <category>HTML</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JS高级</title>
    <link href="/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/JS%E9%AB%98%E7%BA%A7/"/>
    <url>/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/JS%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Javascript面向对象"><a href="#Javascript面向对象" class="headerlink" title="Javascript面向对象"></a>Javascript面向对象</h1><p>面向对象：易维护、易复用、易扩展，有封装、继承、多态的特性，可以设计出低耦合的系统，更加灵活、易于维护</p><h2 id="ES6中的类和对象"><a href="#ES6中的类和对象" class="headerlink" title="ES6中的类和对象"></a>ES6中的类和对象</h2><p>对象：一个具体的事物。在js中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象。</p><h3 id="类class"><a href="#类class" class="headerlink" title="类class"></a>类class</h3><ul><li>类：抽象了对象的公共部分，泛指某一大类</li><li>对象特指某一个，通过实例化一个具体的对象</li></ul><p>面向对象的思维特点：</p><ol><li>抽取（抽象）对象公用的属性和行为组织（封装）成一个类（模板）</li><li>对类进行实例化，获取类的对象</li></ol><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><p>语法：</p><blockquote><p>class name {</p><p>​    // class body</p><p>}</p></blockquote><p>创建实例：</p><blockquote><p>var xx = <strong>new</strong> name();</p></blockquote><p><strong>注意：</strong></p><ol><li>类必须使用<strong>new</strong>实例化对象</li><li>通过class 关键字创建类，类名习惯性定义首字母大写</li><li>类里面有个constructor函数，（<span style="color:red">类的共有属性放在constructor里面</span>）可以接收传递过来的参数，同时返回实例对象</li><li>constructor函数 只要new生成实例时，就会自动调用这个函数，若不写这个函数，类也会自动生成这个函数</li><li>语法规范：<ul><li>创建类——类名后面不需要加小括号</li><li>生成实例——类名后面要加小括号</li><li>构造函数——不需要加function</li></ul></li><li>多个函数方法之间不需要加逗号分隔</li></ol><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Star</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 类的共有属性放在constructor里面</span></span><br><span class="language-javascript">            <span class="hljs-title function_">constructor</span>(<span class="hljs-params">uname, age</span>) &#123;   <span class="hljs-comment">// constructor构造器或者构造函数</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = uname;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 多个函数方法之间不需要加逗号分隔，（constructor()和sing()之间无需加逗号）</span></span><br><span class="language-javascript">            <span class="hljs-title function_">sing</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ldh);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><h4 id="继承-extends实现（ES6）"><a href="#继承-extends实现（ES6）" class="headerlink" title="继承-extends实现（ES6）"></a>继承-extends实现（ES6）</h4><p>子类可以继承父类的一些属性和方法</p><p>语法：</p><blockquote><p>class Father {}    // 父类</p><p>class Son extends Father {    // 子类继承父类</p><p>}</p></blockquote><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-title function_">money</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">100</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Father</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();</span><br><span class="language-javascript">        son.<span class="hljs-title function_">money</span>();</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意:</p><ol><li>继承中，若实例化子类输出一个方法，先看子类有无此方法，若有就先执行子类的</li><li>继承中，若子类里面没有，则取查找父类有无这个方法，若有，就执行父类的这个方法（就近原则）</li></ol><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Father</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 此处的x y 是子类的独有的x y，不是Father里面的x,y.因此此时不能使用Father的sum方法</span></span><br><span class="language-javascript">            <span class="hljs-comment">// constructor(x, y) &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     this.x = x;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     this.y = y;</span></span><br><span class="language-javascript">            <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">            </span><br><span class="language-javascript">            <span class="hljs-comment">// 解决：利用super 调用父类的x y</span></span><br><span class="language-javascript">            <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// super调用了父类的 x y</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">super</span>(x, y);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);</span><br><span class="language-javascript">        son.<span class="hljs-title function_">sum</span>()</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="super关键字"><a href="#super关键字" class="headerlink" title="==super关键字=="></a>==super关键字==</h4><p>用于访问和调用对象父类上的函数，可以<strong>调用父类的构造函数</strong>，也可以<strong>调用父类的普通函数</strong></p><p>语法示例：</p><ol><li><p>调用父类普通函数</p><p>super.父类普通函数()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;father&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Father</span> &#123;<br>    <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">say</span>() + <span class="hljs-string">&quot;&#x27;s son.&quot;</span>;<br>        <span class="hljs-comment">// super.say()就是调用父类的普通函数 say()</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-title function_">say</span>());<br></code></pre></td></tr></table></figure></li><li><p>调用父类构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">surname</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">surname</span> = surname;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Father</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">surname, firstname</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(surname);<span class="hljs-comment">// 调用父类的constructor(surname)</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstname</span> = firstname;<span class="hljs-comment">// 定义子类独有的属性</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p style="color: red">注意：子类在构造函数中使用super，必须放在this的前面（即：必须先调用父类的构造方法，再使用子类的构造方法）</p></li></ol><p>子类继承父类的同时扩展自己的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y;<br>    &#125;<br><br>    <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Father</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;<br>        <span class="hljs-comment">// super一定要先在子类this前面</span><br>        <span class="hljs-variable language_">super</span>(x, y);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y;<br>    &#125;<br>    <span class="hljs-comment">// 子类扩展的自己的方法</span><br>    <span class="hljs-title function_">subtract</span>(<span class="hljs-params">x, y</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(<span class="hljs-number">5</span>, <span class="hljs-number">1</span>);<br>son.<span class="hljs-title function_">subtract</span>();<span class="hljs-comment">// 4</span><br>son.<span class="hljs-title function_">sum</span>();<span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><h4 id="类的注意事项"><a href="#类的注意事项" class="headerlink" title="==类的注意事项=="></a>==类的注意事项==</h4><ol><li><p>在ES6中没有变量提升，因此，<span style="color:red">必须先定义类，才能通过类实例化对象</span></p></li><li><p>类里面的<span style="color:red">共有属性和方法一定要加this</span>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Star</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">uname, age</span>) &#123;<br>        <span class="hljs-comment">// 类的共有属性和方法一定要加this</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = uname;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>        <span class="hljs-comment">// 此处sing后加了小括号</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">sing</span>();<br>    &#125;<br><br>    sing () &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>唱歌<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Star</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">constructor</span>(<span class="hljs-params">uname, age</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 类的共有属性和方法一定要加this</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = uname;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;</span><br><span class="language-javascript">                <span class="hljs-comment">// 以下情况，sing不加小括号，只有当点击时才会执行sing</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 若sing加了小括号就会立即执行</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">btn</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">btn</span>.<span class="hljs-property">onclick</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">sing</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-title function_">sing</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我会唱歌&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;刘德华&#x27;</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>类里面this的指向问题</p><p><strong>constructor里面的this指向实例对象，方法里面的this指向这个方法的调用者</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>唱歌<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Star</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">constructor</span>(<span class="hljs-params">uname, age</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 类的共有属性和方法一定要加this</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = uname;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;</span><br><span class="language-javascript">                <span class="hljs-comment">// this.sing();</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 以下情况，sing不加小括号，只有当点击时才会执行sing</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 若sing加了小括号就会立即执行</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">btn</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">btn</span>.<span class="hljs-property">onclick</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">sing</span>;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);  <span class="hljs-comment">// this指向实例对象</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-title function_">sing</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我会唱歌&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);  <span class="hljs-comment">// this指向btn（btn调用这个函数）</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-title function_">dance</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// this指向实例对象ldh（因ldh调用了这个函数）</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;刘德华&#x27;</span>);</span><br><span class="language-javascript">        ldh.<span class="hljs-title function_">dance</span>();</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="面向对象案例（待做）"><a href="#面向对象案例（待做）" class="headerlink" title="面向对象案例（待做）"></a>面向对象案例（待做）</h3><p>面向对象版tab栏切换</p><p>功能要求：</p><ol><li>点击tab栏，可以切换效果</li><li>点击 + 号，可以添加tab项和内容项</li><li>点击 x 号，可以删除当前的tab项和内容项</li><li>双击tab项文字或者内容项文字，可以修改里面的文字内容</li></ol><p>抽象对象：Tab对象</p><ol><li>该对象具有切换功能</li><li>该对象具有添加功能</li><li>该对象具有删除功能</li><li>该对象具有修改功能</li></ol><h2 id="构造函数和原型"><a href="#构造函数和原型" class="headerlink" title="构造函数和原型"></a>构造函数和原型</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>构造函数是一种特殊的函数，主要<strong>用来初始化对象</strong>，即为对象成员变量赋初始值，与new一起使用。可以将对象中的一些公共属性和方法抽取出来，然后封装到这个函数里面</p><p>在JS中，使用构造函数要注意：</p><ol><li>构造函数<strong>用于创建某一类对象</strong>，其首字母要大写</li><li>构造函数要和new一起使用</li></ol><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Star是一个构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">uname, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = uname;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sing</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>    &#125;;<br>&#125;<br><br><span class="hljs-comment">// 使用new实例化对象</span><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br></code></pre></td></tr></table></figure><h4 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h4><p>存在浪费内存的问题</p><p>每实例化一个对象，就会开辟一个内存空间</p><h3 id="构造函数原型prototype"><a href="#构造函数原型prototype" class="headerlink" title="构造函数原型prototype"></a>构造函数原型prototype</h3><p>构造函数通过原型分配的函数是所有对象所共享的</p><p>JavaScript规定，每一个构造函数都有一个prototype属性，指向另一个对象。（prototype就是一个对象，这个对象的所有属性和方法。都会被构造函数所拥有）</p><p>因此<span style="color:red">可以将一些不变的方法直接定义在prototype对象上，这样所有对象的实例就可以共享这些方法</span></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="原型是什么？"><a href="#原型是什么？" class="headerlink" title="原型是什么？"></a>原型是什么？</h5><p>答：一个对象，称prototype为原型对象</p><h5 id="原型的作用是什么？"><a href="#原型的作用是什么？" class="headerlink" title="原型的作用是什么？"></a>原型的作用是什么？</h5><p>答：共享方法</p><h3 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h3><p>静态成员：</p><ul><li>在构造函数本身上添加的成员</li><li>静态成员只能通过构造函数来访问</li></ul><p>实例成员：</p><ul><li>构造函数内部通过this添加的成员</li><li>实例成员只能通过实例化的对象来访问</li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">uname, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = uname;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sing</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>    &#125;;<br>&#125;<br><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-comment">// 实例成员：name age sing</span><br><span class="hljs-comment">// 实例成员通过实例化对象来访问</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ldh.<span class="hljs-property">name</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ldh.<span class="hljs-property">age</span>);<br>ldh.<span class="hljs-title function_">sing</span>();<br><br><span class="hljs-comment">// 静态成员: sex</span><br><span class="hljs-comment">// 静态成员只能通过构造函数来访问</span><br><span class="hljs-title class_">Star</span>.<span class="hljs-property">sex</span> = <span class="hljs-string">&#x27;男&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Star</span>.<span class="hljs-property">sex</span>);<br></code></pre></td></tr></table></figure><h3 id="对象原型-proto"><a href="#对象原型-proto" class="headerlink" title="对象原型_proto_"></a>对象原型_<em>proto</em>_</h3><h4 id="proto-与-prototype"><a href="#proto-与-prototype" class="headerlink" title="_proto_ 与 prototype"></a>_<em>proto</em>_ 与 prototype</h4><p>对象都会有一个属性_<em>proto</em>_ <strong>指向</strong> 构造函数的prototype原型对象。</p><p>之所以对象可以使用构造函数prototype原型对象的属性和方法，就是因为对象有__proto__原型的存在</p><ul><li>__proto__对象原型和原型对象prototype是等价的</li><li>__proto__对象原型的 <strong>意义</strong> 在于 为对象的查找机制提供一个方向（一条路线），但它是一个非标准属性，因此实际开发中，不可以使用这个属性</li></ul><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220505170549533.png" alt="image-20220505170549533" style="zoom:50%;" /><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">uname, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = uname;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><br><span class="hljs-title class_">Star</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sing</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 若合并写为下面的对象形式赋值，实际上是重写了prototype</span><br><span class="hljs-comment">// 因此需要手动利用 constructor 指回原来的构造函数</span><br><br><span class="hljs-comment">// Star.prototype = &#123;</span><br><span class="hljs-comment">//     constructor: Star,  // constructor 指回原来的构造函数</span><br><span class="hljs-comment">//     sing: function () &#123;</span><br><span class="hljs-comment">//         console.log(&#x27;我会唱歌&#x27;);</span><br><span class="hljs-comment">//     &#125;,</span><br><span class="hljs-comment">//     movie: function () &#123;</span><br><span class="hljs-comment">//         console.log(&#x27;我会演戏&#x27;);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-comment">// 还可以为实例化对象添加方法，此时对象原型里面是没有该方法的</span><br>ldh.<span class="hljs-property">eat</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我要吃&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> zxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;张学友&#x27;</span>, <span class="hljs-number">20</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ldh);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ldh);<br>ldh.<span class="hljs-title function_">sing</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ldh.<span class="hljs-property">__proto__</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ldh.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Star</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);  <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 即实例化对象ldh存在对象原型__proto__ 指向构造函数Star的原型对象prototype</span><br></code></pre></td></tr></table></figure><h4 id="方法查找原则"><a href="#方法查找原则" class="headerlink" title="方法查找原则"></a>方法查找原则</h4><p>首先看ldh对象自己是否有sing方法，若有就执行这个对象上面的sing方法；<br>若没有，因为__proto__的存在，就会去构造函数原型对象prototype上去查找</p><h3 id="构造函数、实例、原型对象的关系"><a href="#构造函数、实例、原型对象的关系" class="headerlink" title="构造函数、实例、原型对象的关系"></a>构造函数、实例、原型对象的关系</h3><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220505183416844.png" alt="image-20220505183416844" style="zoom:67%;" /><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220505184509367.png" alt="image-20220505184509367"></p><h3 id="JS的成员查找机制"><a href="#JS的成员查找机制" class="headerlink" title="JS的成员查找机制"></a>JS的成员查找机制</h3><ol><li>访问一个对象的属性（包括方法）时，首先查找这个对象自身有无该属性</li><li>若没有，则查找它的原型（即__proto__指向的prototype原型对象）</li><li>若仍没有，则查找原型对象的原型（Object原型对象）</li><li>依此类推一直找到Object为止(null)</li><li>__proto__对象原型的意义在于为对象成员查找机制提供一个方向（路线）</li></ol><h3 id="原型对象的应用"><a href="#原型对象的应用" class="headerlink" title="原型对象的应用"></a>原型对象的应用</h3><h4 id="扩展内置对象方法"><a href="#扩展内置对象方法" class="headerlink" title="扩展内置对象方法"></a>扩展内置对象方法</h4><p>通过原型对象，对原来的内置对象那个进行扩展自定义的方法，比如：给数组增加自定义求偶数和的功能</p><p style="color:red">注意：数组和字符内置对象不能给原型对象覆盖操作,如Array.prototype = {}，只能是添加操作：Array.prototype.xxx = function () {} 的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 原型对象的应用——扩展内置对象方法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><span class="hljs-comment">// Array原型对象里面没有求和的方法，可以利用原型对象为其添加对象方法</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sum</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>; i++) &#123;<br>        sum += <span class="hljs-variable language_">this</span>[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="继承-构造函数-amp-原型对象实现"><a href="#继承-构造函数-amp-原型对象实现" class="headerlink" title="继承-构造函数&amp;原型对象实现"></a>继承-构造函数&amp;原型对象实现</h2><p>ES6之前没有提供extends继承，但可以通过 <strong>构造函数 + 原型对象</strong> 模拟实现继承，被称为 <strong>组合继承</strong></p><h3 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h3><p>作用：</p><ol><li><p>fn.call()可以调用函数fn</p></li><li><p>可以修改函数运行时的this指向</p><blockquote><p>func.call(thisArg, arg1, arg2, . . . );</p></blockquote></li></ol><ul><li>thisArg: 当前调用函数this的指向对象</li><li>arg1， arg2：传递的其他参数</li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是fn&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;andy&quot;</span><br>&#125;<br><span class="hljs-comment">// 1. 调用fn函数</span><br>fn.<span class="hljs-title function_">call</span>();<br><span class="hljs-comment">// 2. 将fn的this指向改为obj这个对象</span><br>fn.<span class="hljs-title function_">call</span>(obj);<br></code></pre></td></tr></table></figure><h3 id="继承属性-借用父构造函数"><a href="#继承属性-借用父构造函数" class="headerlink" title="继承属性-借用父构造函数"></a>继承属性-借用父构造函数</h3><p>利用call实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 父构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params">uname, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">uname</span> = uname;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-comment">// 子构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params">uname, age</span>) &#123;<br>    <span class="hljs-comment">// this 指向 子构造函数的对象实例</span><br>    <span class="hljs-title class_">Father</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, uname, age);<br>    <span class="hljs-comment">// 此处调用父构造函数；利用call将Father的this改为了Son的this，</span><br>    <span class="hljs-comment">// 由此子构造函数就可以调用父构造函数的属性</span><br>    <span class="hljs-comment">// 注意：还需要将要传递的参数写入</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">score</span> = score; <span class="hljs-comment">// score是子构造函数独有的</span><br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(<span class="hljs-string">&#x27;andy&#x27;</span>, <span class="hljs-number">14</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son);<br></code></pre></td></tr></table></figure><h3 id="继承方法-借用原型对象"><a href="#继承方法-借用原型对象" class="headerlink" title="继承方法-借用原型对象"></a>继承方法-借用原型对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params">uname, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">uname</span> = uname;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params">uname, age, score</span>) &#123;<br>    <span class="hljs-comment">// 1. 借用父构造函数继承属性</span><br>    <span class="hljs-title class_">Father</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, uname, age);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">score</span> = score; <span class="hljs-comment">// score是子构造函数独有的</span><br>&#125;<br><span class="hljs-comment">// 2. 借用原型对象继承方法</span><br><span class="hljs-comment">// 方法1: 直接用原型对象赋值。问题：如果修改了 子原型对象，父原型对象也会跟着一起改变</span><br><span class="hljs-comment">// Son.prototype = Father.prototype;</span><br><br><span class="hljs-comment">// 方法2：利用对象的形式修改原型对象。但不要忘记将constructor指回原来的构造函数son</span><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>();<br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Son</span>;<br><span class="hljs-comment">// 利用方法2后，可以为子构造函数添加独有的方法，且此时不会影响Father</span><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">exam</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;每学期要考试&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(<span class="hljs-string">&#x27;andy&#x27;</span>, <span class="hljs-number">14</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Father</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br></code></pre></td></tr></table></figure><p>==注意==</p><blockquote><p>借用原型对象继承方法</p><p>方法1: 直接用原型对象赋值。问题：如果修改了 子原型对象，父原型对象也会跟着一起改变<br>Son.prototype = Father.prototype;</p><p>方法2：利用对象的形式修改原型对象。但不要忘记将constructor指回原来的构造函数son<br><strong>Son.prototype = new Father();</strong><br><strong>Son.prototype.constructor = Son;</strong></p></blockquote><h2 id="ES5中新增方法"><a href="#ES5中新增方法" class="headerlink" title="ES5中新增方法"></a>ES5中新增方法</h2><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><p>foreach() map() filter() some() every()</p><h4 id="forEach-遍历数组"><a href="#forEach-遍历数组" class="headerlink" title="forEach()遍历数组"></a>forEach()遍历数组</h4><blockquote><p>array.forEach(function (currentValue, index, arr) { “执行程序” });</p></blockquote><ul><li>currentValue：数组当前项的值</li><li>index：数组当前项的索引</li><li>arr：数组对象本身</li></ul><p>示例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">val, index, array</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;val:&#x27;</span> + val);<span class="hljs-comment">// 数组元素</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;index:&#x27;</span> + index);<span class="hljs-comment">// 数组索引</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;array: &quot;</span> + array);<span class="hljs-comment">// 数组本身</span><br>    sum += val;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sum:&#x27;</span> + sum);<br></code></pre></td></tr></table></figure><h4 id="map-方法"><a href="#map-方法" class="headerlink" title="map()方法"></a>map()方法</h4><blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">array</span>.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">currentValue,index,arr</span>), <span class="hljs-title function_">thisValue</span>)<br></code></pre></td></tr></table></figure></blockquote><ul><li><p>第一个参数：function函数 必须，数组中的每个元素都会执行这个函数</p><ul><li>currentValue 必须，当前元素的值</li><li>index 可选，当前元素的索引</li><li>arr 可选， 当前元素数据的数组对象</li></ul></li><li><p>第二个参数：thisValue 可选，对象作为该执行回调时使用，传递给函数，用作 “this” 的值。</p><p>如果省略了 thisValue，或者传入 null、undefined，那么回调函数的 this 为全局对象</p></li></ul><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>map() 方法<strong>返回一个新数组</strong>，数组中的元素为原始数组元素调用函数处理后的值。</p><p>map() 方法按照原始数组元素顺序依次处理元素。</p><p><strong>注意：</strong> </p><ul><li>map() 不会对空数组进行检测。</li><li>map() 不会改变原始数组</li></ul><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;<br>    x = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>)<br>    x.<span class="hljs-property">innerHTML</span> = numbers.<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">sqrt</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="filter-筛选数组"><a href="#filter-筛选数组" class="headerlink" title="filter()筛选数组"></a>filter()筛选数组</h4><blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">array</span>.filter(<span class="hljs-keyword">function</span> <span class="hljs-title"></span>(currentValue, index, arr) &#123; “执行程序” &#125;);<br></code></pre></td></tr></table></figure></blockquote><ul><li>filter()方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素，主要用于筛选数组</li><li>filter()是直接返回一个<strong>新数组</strong></li><li>currentValue：数组当前项的值</li><li>index：数组当前项的索引</li><li>arr：数组对象本身</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">var</span> newArr = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">val, index, arr</span>) &#123;<br>    <span class="hljs-keyword">return</span> val &gt; <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// return val % 2 == 0;</span><br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<span class="hljs-comment">// [3, 4]</span><br></code></pre></td></tr></table></figure><h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><blockquote><p>array.some(function (currentValue, index, arr) { “执行程序” });</p></blockquote><ul><li><p>some()方法用于检测数组中的元素是否满足指定条件</p></li><li><p>注意：它返回值是<strong>布尔值</strong>，若查找指定元素，返回true，否则返回false</p></li><li><p>若<strong>找到第一个</strong>满足条件的元素，<strong>则终止循环</strong>，不再继续查找</p></li><li><p>参数说明</p><ul><li>currentValue：数组当前项的值</li><li>index：数组当前项的索引</li><li>arr：数组对象本身</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">var</span> flag = arr.<span class="hljs-title function_">some</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">val, index, arr</span>) &#123;<br>    <span class="hljs-keyword">return</span> val &gt; <span class="hljs-number">2</span>;<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag);<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h4><blockquote><p>arr.every(func(currVal,index,arr){ “执行程序” }, thisVal)</p></blockquote><ul><li>every() 检测数组所有元素是否都符合指定条件</li><li>every() 方法使用指定函数检测数组中的所有元素：<ul><li>如果数组中检测到有一个元素不满足，则整个表达式返回 <em>false</em> ，且剩余的元素不会再进行检测。</li><li>如果所有元素都满足条件，则返回 true</li></ul></li><li><strong>注意：</strong><ul><li>every() 不会对空数组进行检测。</li><li>every() 不会改变原始数组。</li></ul></li><li>参数说明<ul><li>第一个参数func函数 必需，数组中的每个元素都会执行这个函数<ul><li>currentValue：必需，数组当前项的值</li><li>index：可选，数组当前项的索引</li><li>arr：可选，当前元素所属数组对象</li></ul></li><li>第二个参数 可选，对象作为该执行回调时使用，传递给函数，用作 “this” 的值</li></ul></li></ul><h4 id="案例-利用数组方法操作数据"><a href="#案例-利用数组方法操作数据" class="headerlink" title="案例-利用数组方法操作数据"></a>案例-利用数组方法操作数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setData</span>(data);<br><span class="hljs-comment">// 将数据渲染到表格中</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setData</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// 添加数据之前，先清空tbody</span><br>    tbody.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    data.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">row, index, arr</span>) &#123;<br>        <span class="hljs-keyword">var</span> tr = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;tr&#x27;</span>);<br>        <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> row) &#123;<br>            <span class="hljs-keyword">var</span> td = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;td&#x27;</span>);<br>            td.<span class="hljs-property">innerHTML</span> = row[key];<br>            tr.<span class="hljs-title function_">appendChild</span>(td);<br>        &#125;<br>        tbody.<span class="hljs-title function_">appendChild</span>(tr);<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">// 按价格查询</span><br>priceBtn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> newData = data.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;<br>        <span class="hljs-comment">// 使用filter筛选满足价格区间的数据</span><br>        <span class="hljs-keyword">return</span> val.<span class="hljs-property">price</span> &lt;= maxPrice.<span class="hljs-property">value</span> &amp;&amp; val.<span class="hljs-property">price</span> &gt;= minPrice.<span class="hljs-property">value</span>;<br>    &#125;)<br>    <span class="hljs-title function_">setData</span>(newData);<br>&#125;);<br><br><span class="hljs-comment">// 按商品名称查询</span><br>pnameBtn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(product.<span class="hljs-property">value</span>);<br>    <span class="hljs-keyword">var</span> arr = [];<br>    <span class="hljs-comment">// 使用some来查找，找到一个就退出循环，效率更高</span><br>    data.<span class="hljs-title function_">some</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;<br>        <span class="hljs-keyword">if</span> (val.<span class="hljs-property">pname</span> == product.<span class="hljs-property">value</span>) &#123;<br>            arr.<span class="hljs-title function_">push</span>(val);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-comment">// return后必须写true</span><br>        &#125;<br>    &#125;)<br>    <span class="hljs-title function_">setData</span>(arr)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="forEach与some的区别"><a href="#forEach与some的区别" class="headerlink" title="forEach与some的区别"></a>forEach与some的区别</h4><p>forEach里面若有return，不会终止迭代</p><p>但是some里面的return，会终止，迭代效率更高</p><p>filter里面的return也不会终止迭代</p><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><p>trim()方法会从一个字符串的两端删除空白字符</p><blockquote><p>str.trim()</p></blockquote><p>trim()方法不会影响字符串本身，返回的是一个新的字符串</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;    Kat hy &quot;</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">trim</span>());</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 若输入空格，会提示重新输入</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (input.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>() == <span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请输入内容&quot;</span>);</span><br><span class="language-javascript">                input.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(input.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><h4 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h4><p>用于获取对象自身所有的属性</p><blockquote><p>Object.keys(obj)</p></blockquote><ul><li>效果类似于 for. . . in. . .</li><li>返回一个由属性名组成的数组</li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ldh = &#123;<br>    <span class="hljs-attr">uname</span>: <span class="hljs-string">&quot;刘德华&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br><span class="hljs-comment">// 1. Object.keys(obj)遍历对象属性</span><br><span class="hljs-comment">// Object.keys(ldh)返回的ldh的所有属性，且是一个数组</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(ldh));<br><span class="hljs-comment">// 还可以利用forEach来访问每个属性名</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(ldh);<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h4><p>定义对象中新属性或修改原有的属性</p><blockquote><p>Object.defineProperty(obj, prop, descriptor);</p></blockquote><ul><li>obj: 必需,目标对象</li><li>prop: 必需,需定义或修改的属性名字</li><li>descriptor: 必需,目标属性所拥有的特性<ul><li>以对象的形式{}书写</li><li>value: 设置属性的值,默认为undefined</li><li>writable: 值是否可以重写,true|false 默认为false</li><li>enumerable: 目标属性是否可以被枚举,true|false, 默认为false</li><li>configurable: 目标属性是否可以被删除 或 是否可以再次修改特性 true|false, 默认为false</li></ul></li></ul><p>示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ldh = &#123;<br>    <span class="hljs-attr">uname</span>: <span class="hljs-string">&quot;刘德华&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br><span class="hljs-comment">// 2. 为对象添加或修改属性</span><br><span class="hljs-comment">// (1)原来的方法</span><br><span class="hljs-comment">// age已存在，则为修改属性</span><br>ldh.<span class="hljs-property">age</span> = <span class="hljs-number">20</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ldh);<br><span class="hljs-comment">// address不存在，则为添加属性</span><br>ldh.<span class="hljs-property">address</span> = <span class="hljs-string">&quot;香港&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ldh);<br><br><span class="hljs-comment">// (2)现在的方法：利用 Object.defineProperty(obj, prop, descriptor)</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(ldh, <span class="hljs-string">&#x27;age&#x27;</span>, &#123; <span class="hljs-comment">// 注意修改的属性需要加引号</span><br>    <span class="hljs-attr">value</span>: <span class="hljs-number">30</span>,<br>&#125;);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(ldh, <span class="hljs-string">&#x27;address&#x27;</span>, &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;中国&quot;</span>,<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>   <span class="hljs-comment">// 无法枚举address（false无法遍历）</span><br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ldh);<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(ldh, <span class="hljs-string">&#x27;uname&#x27;</span>, &#123;<br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,    <span class="hljs-comment">// 不允许修改</span><br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 不允许删除这个属性，不允许修改descriptor里面的特性          </span><br>&#125;);<br><span class="hljs-comment">// 下面会报错，因为上面的configurable已经设置为false，不能再更改里面的特性（此处就是不能再设置为true）</span><br><span class="hljs-comment">// Object.defineProperty(ldh, &#x27;uname&#x27;, &#123;</span><br><span class="hljs-comment">//     enumerable: true,</span><br><span class="hljs-comment">//     writable: true,</span><br><span class="hljs-comment">//     configurable: true</span><br><span class="hljs-comment">// &#125;);</span><br></code></pre></td></tr></table></figure><h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><h3 id="函数定义及调用"><a href="#函数定义及调用" class="headerlink" title="函数定义及调用"></a>函数定义及调用</h3><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><ol><li><p>函数声明</p><blockquote><p>function fn () {};</p></blockquote></li><li><p>函数表达式(匿名函数)</p><blockquote><p>var fun = function () {};</p></blockquote></li><li><p>利用 new Function(‘arg1’, ‘arg2’, . . . , ‘函数体’);</p><blockquote><p>var func = new Function(‘a’, ‘b’, ‘return a + b’);</p></blockquote></li></ol><p>注意:</p><ul><li>Function里面参数都必须是<strong>字符串格式</strong></li><li>第三种方式执行效率低,不常用</li><li>所有函数都是Function的实例对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hi~&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 2 </span><br><span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;匿名函数&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 3</span><br><span class="hljs-keyword">var</span> func = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;return a+b&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">func</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><h4 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h4><ol><li><p>普通函数</p><blockquote><p>function func() {}</p><p>调用：func() 或 func.call()</p></blockquote></li><li><p>对象的方法</p><blockquote><p>var obj = { sing：function() {‘执行程序’}}</p><p>调用：obj.sing();</p></blockquote></li><li><p>构造函数</p><blockquote><p>function Star() {}</p><p>调用：new Star();</p></blockquote></li><li><p>绑定事件函数</p><blockquote><p>btn.onclick = function () {}</p></blockquote></li><li><p>定时器函数</p><blockquote><p>setInterval(function () {}, 1000)</p><p>每隔一秒调用一次</p></blockquote></li><li><p>立即执行函数</p><blockquote><p>(function () {“执行程序”;})();</p></blockquote><p>又叫 自调用函数（<strong>匿名自我调用的函数</strong>）</p></li></ol><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><h4 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h4><table><thead><tr><th>调用方式</th><th>this指向</th></tr></thead><tbody><tr><td>普通函数</td><td>window</td></tr><tr><td>构造函数</td><td>实例对象 原型对象中的方法也指向实例对象</td></tr><tr><td>对象方法</td><td>该方法所属对象</td></tr><tr><td>事件绑定</td><td>绑定事件对象</td></tr><tr><td>定时器函数</td><td>window</td></tr><tr><td>立即执行函数</td><td>window</td></tr><tr><td>箭头函数</td><td>上一级作用域的this指向（不改变this指向）</td></tr></tbody></table><h4 id="改变this指向"><a href="#改变this指向" class="headerlink" title="改变this指向"></a>改变this指向</h4><p>处理this指向，常用的方法有：bind() call() apply()</p><h5 id="call-1"><a href="#call-1" class="headerlink" title="call()"></a>call()</h5><ol><li>call()调用函数</li><li>可以改变函数内的this指向，主要作用是可以实现继承</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是fn&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;andy&quot;</span><br>&#125;<br><span class="hljs-comment">// 1. 调用fn函数</span><br>fn.<span class="hljs-title function_">call</span>();<br><span class="hljs-comment">// 2. 将fn的this指向改为obj这个对象</span><br>fn.<span class="hljs-title function_">call</span>(obj);<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">我是fn<br>Window<br>我是fn<br>Object<br></code></pre></td></tr></table></figure><h5 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h5><p>调用一个函数。</p><blockquote><p>func.apply(thisArg, [argsArray]);</p></blockquote><ul><li>thisArg: 在func函数运行时指定的this值</li><li>argsArray: 传递的值，必须包含在<span style="color:red">数组</span>里面</li><li>由于apply就是调用函数，因此返回值就是函数的返回值</li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// apply() 调用函数，改变this指向</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">suibian</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);           <span class="hljs-comment">// pink, 打印出的没有中括号</span><br>&#125;<br>suibian.<span class="hljs-title function_">apply</span>(fn, [<span class="hljs-string">&#x27;pink&#x27;</span>]);    <span class="hljs-comment">// 此时随便里面的this指向fn，</span><br></code></pre></td></tr></table></figure><p>注意apply的应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1 2 3 中的最大值：&#x27;</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));   <span class="hljs-comment">// Math.max中不能直接传入数组</span><br><br><span class="hljs-comment">// 方式1：通过扩展运算符，将数组拆开</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(...arr));  <br><br><span class="hljs-comment">// 方式2：利用apply参数需要数组形式，通过apply就将数组作为参数传入</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">23</span>, <span class="hljs-number">567</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">456</span>];<br><span class="hljs-keyword">var</span> max = <span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">Math</span>, arr);    <span class="hljs-comment">// 因this指向不需要改变，因此还是Math</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(max)<br></code></pre></td></tr></table></figure><h5 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h5><p>bind()方法不会调用函数，但是可以改变this指向</p><blockquote><p>fun.bind(thisArg, arg1, arg2, . . . );</p></blockquote><ul><li>thisArg: 在func函数运行时指定的this值</li><li>arg1, arg2: 传递的其他参数</li><li>返回由指定的this值和初始化参数改造的<strong>原函数拷贝</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> o = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;andy&quot;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a + b);<br>&#125;<br><span class="hljs-comment">// 返回的是改变this之后产生的新函数</span><br><span class="hljs-keyword">var</span> f = sum.<span class="hljs-title function_">bind</span>(o, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// bind不会调用原来的函数，只改变this指向，需要通过返回来的函数调用</span><br><span class="hljs-title function_">f</span>();<br></code></pre></td></tr></table></figure><p>bind的应用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(btn);</span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;       <span class="hljs-comment">// this指向btn</span></span><br><span class="language-javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// this指向window，需要禁用的时btn，因此需要更改this指向</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);</span><br><span class="language-javascript">            &#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-number">3000</span>);        <span class="hljs-comment">// 利用bind改变定时器内部函数的this指向</span></span><br><span class="language-javascript">            <span class="hljs-comment">// bind括号里面本可以写btn,但此处是在定时器函数外部，</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 此处的this指向的就是事件调用者btn，因此可以直接写this</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>call apply bind</p><p>都可以改变函数内部的this指向</p><p>区别：</p><ul><li>call 和 apply 会调用函数，改变函数内部的this指向</li><li>call 和 apply 传递的参数不同</li><li>bind 不会调用函数，可以函数内部this的指向</li></ul><p>主要应用场景：</p><ol><li>call常用于做继承</li><li>apply常跟数组有关，如：借助于数学内置对象求最值</li><li>bind 不调用函数，改变定时器里面的this指向</li></ol><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><h4 id="开启严格模式"><a href="#开启严格模式" class="headerlink" title="开启严格模式"></a>开启严格模式</h4><p>严格模式可以用到<strong>整个脚本</strong>或<strong>个别函数</strong>中，因此可以将严格模式分为为脚本开启严格模式和为函数开启严格模式</p><h5 id="为脚本开启"><a href="#为脚本开启" class="headerlink" title="为脚本开启"></a>为脚本开启</h5><p>为<strong>整个</strong>脚本文件开启严格模式，需要在所有语句之前放啊一个特定语句 ‘use strict’;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-javascript">        &#x27;use strict&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">// 开启严格模式</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="为某个函数开启"><a href="#为某个函数开启" class="headerlink" title="为某个函数开启"></a>为某个函数开启</h5><p>由于有的script是严格模式，有些脚本文件是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数里面，（独立创建一个作用域而不会影响其它的script脚本文件）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 立即执行函数</span></span><br><span class="language-javascript">    (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;use strict&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-string">&quot;执行程序&quot;</span></span><br><span class="language-javascript">       <span class="hljs-comment">// 此处是严格模式</span></span><br><span class="language-javascript">    &#125;)();</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> () &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 这里是普通模式</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="严格模式中的规定"><a href="#严格模式中的规定" class="headerlink" title="严格模式中的规定"></a>严格模式中的规定</h4><h5 id="变量规定"><a href="#变量规定" class="headerlink" title="变量规定"></a>变量规定</h5><ul><li>正常模式中，若一个变量没有声明就赋值，默认是全局变量，但严格模式<strong>禁止</strong>这种用法，变量<strong>必须都先用var 命令声明</strong>，然后再使用</li><li><strong>严禁删除</strong>已经声明的变量，例：delete x; 语法是错误的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-comment">// 1 严格模式下 必须先用var声明变量，再使用</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br><span class="hljs-comment">// 2 严格模式不能随意删除已声明变量</span><br><span class="hljs-comment">// delete num;</span><br><span class="hljs-comment">// 3 严格模式下 全局作用域中的this是undefined</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);  <span class="hljs-comment">// this 是 undefined</span><br>&#125;<br><span class="hljs-title function_">fn</span>();<br><br><span class="hljs-comment">// 4 严格模式下，若构造函数不加new使用，this会报错</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span> = <span class="hljs-string">&quot;男&quot;</span>;<br>&#125;<br><span class="hljs-comment">// Star(); // 没有加new 会报错</span><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>();<br><br><span class="hljs-comment">// 5 定时器this还是指向window</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><h5 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h5><p>变化</p><table><thead><tr><th>普通模式</th><th>严格模式</th></tr></thead><tbody><tr><td>全局作用域中this指向window</td><td>全局作用域中this指向undefined</td></tr><tr><td>构造函数不加new可调用，当作普通函数，this指向全局对象</td><td>构造函数不加new会报错</td></tr></tbody></table><p>new实例化的构造函数指向创建的对象实例</p><p>定时器的this还是指向window</p><p>事件、对象还是指向调用者</p><h5 id="函数变化"><a href="#函数变化" class="headerlink" title="函数变化"></a>函数变化</h5><ul><li><p>函数不能有重名的参数</p></li><li><p>函数必须声明在顶层，【新版本JS中引入“块级作用域”（ES6中已引入），为与新版本接轨，不允许在非函数的代码块内声明函数】</p></li></ul><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>是对其他函数进行操作的函数，接收函数作为参数，或者 将函数作为返回值输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 高阶函数-函数可以作为参数传递</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> (a, b, callback) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a + b);<br>    callback &amp;&amp; <span class="hljs-title function_">callback</span>();<br>&#125;<br><br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是最后调用&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 回调函数，就是常常作为参数传递</span><br></code></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h4 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h4><p>闭包（closure) 指有权访问另一个函数作用域中的变量的函数</p><p>简单理解：一个作用域可以访问另一个函数内部的局部变量</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 闭包：func这个函数作用域，访问了另一个函数fn里面的局部变量 num</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>    &#125;<br>    <span class="hljs-title function_">func</span>();<br>&#125;<br><br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><h4 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h4><p>fn 外面的作用域可以访问 fn 内部的局部变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">// function func() &#123;</span><br>    <span class="hljs-comment">//     console.log(num);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// return func();</span><br>    <span class="hljs-comment">// 简写为</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// fn 外面的作用与可以访问 fn 内部的局部变量</span><br><span class="hljs-keyword">var</span> f = <span class="hljs-title function_">fn</span>();<br><span class="hljs-title function_">f</span>();<br></code></pre></td></tr></table></figure><h4 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h4><h5 id="1-点击li输出索引号"><a href="#1-点击li输出索引号" class="headerlink" title="1 点击li输出索引号"></a>1 点击li输出索引号</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>green<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>white<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>black<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 原来的方法是：在遍历lis时为每个li添加一个索引属性，相当于先存起来，方便后面用</span></span><br><span class="language-javascript">        <span class="hljs-comment">// for (var i = 0; i &lt; lis.length; i++) &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     lis[i].index = i;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     lis[i].onclick = function () &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//         console.log(this.index);</span></span><br><span class="language-javascript">        <span class="hljs-comment">//         // console.log(i);</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     &#125;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 闭包实现</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            (<span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 将实参 i 传入形参 index</span></span><br><span class="language-javascript">                lis[index].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 此处函数是闭包，可以访问index</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;)(i);  <span class="hljs-comment">// 此处为立即执行函数传入参数 i</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-3s后打印所有li元素的内容"><a href="#2-3s后打印所有li元素的内容" class="headerlink" title="2 3s后打印所有li元素的内容"></a>2 3s后打印所有li元素的内容</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>green<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>white<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>black<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 闭包实现</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 3s后打印所有li元素的内容</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            (<span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lis[index].<span class="hljs-property">innerHTML</span>);</span><br><span class="language-javascript">                &#125;, <span class="hljs-number">3000</span>)</span><br><span class="language-javascript">            &#125;)(i);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-打车价格"><a href="#3-打车价格" class="headerlink" title="3 打车价格"></a>3 打车价格</h5><p>打车起步价13（3公里以内），之后每多一公里增加5块钱，用户输入公里数可以计算打车价格；若有拥堵情况，总价多收取10块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 打车起步价13（3公里以内），之后每多一公里增加5块钱，</span><br><span class="hljs-comment">// 用户输入公里数可以计算打车价格；若有拥堵情况，总价多收取10块</span><br><span class="hljs-keyword">var</span> car = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> start = <span class="hljs-number">13</span>;<br>    <span class="hljs-keyword">var</span> total = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">price</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) &#123;<br>            <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">3</span>) &#123;<br>                total = start;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                total = start + (n - <span class="hljs-number">3</span>) * <span class="hljs-number">5</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> total;<br>        &#125;,<br>        <span class="hljs-attr">yd</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">flag</span>) &#123;<br>            <span class="hljs-keyword">return</span> flag ? total + <span class="hljs-number">10</span> : total;<br>        &#125;<br>    &#125;<br>&#125;)();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(car.<span class="hljs-title function_">price</span>(<span class="hljs-number">5</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(car.<span class="hljs-title function_">yd</span>(<span class="hljs-literal">true</span>));<br></code></pre></td></tr></table></figure><h5 id="4-思考题"><a href="#4-思考题" class="headerlink" title="4 思考题"></a>4 思考题</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;the window&quot;</span>;<br><span class="hljs-keyword">var</span> object = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;my object&quot;</span>,<br>    <span class="hljs-attr">getName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)  <span class="hljs-comment">// this指向object</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;   <span class="hljs-comment">// this指向window</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object.<span class="hljs-title function_">getName</span>()());    <span class="hljs-comment">// the window</span><br><br><span class="hljs-comment">// object.getName()()可拆解为：</span><br><span class="hljs-comment">// var f = object.getName();</span><br><span class="hljs-comment">// f();</span><br><br><span class="hljs-comment">// // 类似于</span><br><span class="hljs-comment">//  var f = function () &#123;</span><br><span class="hljs-comment">//      return this.name;  // this是指向window</span><br><span class="hljs-comment">//  &#125;</span><br><span class="hljs-comment">//  f())</span><br></code></pre></td></tr></table></figure><p>其中object里面的方法可以写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> object = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;my object&quot;</span>,<br>    getName () &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)  <span class="hljs-comment">// this指向object</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;   <span class="hljs-comment">// this指向window</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol><li>对象里面方法中的this指向是 <strong>对象本身</strong></li><li>对象里面方法中若返回的是一个函数，则返回的函数中this指向是 window</li></ol></blockquote><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><p>函数内部自己调用自己</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;打印第&#x27;</span> + num + <span class="hljs-string">&#x27;句话&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">5</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<span class="hljs-comment">//递归中必须加终止条件</span><br>    &#125;<br>    num++;<br>    <span class="hljs-title function_">fn</span>();<span class="hljs-comment">// 调用自己</span><br>&#125;<br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><h4 id="递归应用"><a href="#递归应用" class="headerlink" title="递归应用"></a>递归应用</h4><h5 id="对象深拷贝"><a href="#对象深拷贝" class="headerlink" title="对象深拷贝"></a>对象深拷贝</h5><p>拷贝分为浅拷贝和深拷贝</p><ol><li>浅拷贝知识拷贝一层，更深层次的对象级别的指拷贝引用</li><li>深拷贝拷贝多层，每一级别的数据都被拷贝、</li></ol><p><strong>浅拷贝</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> oldObj = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kathy&#x27;</span>,<br>    <span class="hljs-attr">msg</span>: &#123;<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> newObj = &#123;&#125;;<br><span class="hljs-comment">// 1 浅拷贝：只拷贝一层，更深层次的对象级别只拷贝引用</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> oldObj) &#123;<br>    newObj[k] = oldObj[k];<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newObj);<br>newObj.<span class="hljs-property">msg</span>.<span class="hljs-property">age</span> = <span class="hljs-number">20</span>;    <span class="hljs-comment">// 更改拷贝的对象里面复杂数据类型</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oldObj);    <span class="hljs-comment">// 原来的对象也跟着改变</span><br></code></pre></td></tr></table></figure><p><strong>深拷贝</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> oldObj = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kathy&#x27;</span>,<br>    <span class="hljs-attr">msg</span>: &#123;<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>        <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> newObj = &#123;&#125;;<br><span class="hljs-comment">// 2 深拷贝</span><br><span class="hljs-comment">// 封装函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepcopy</span>(<span class="hljs-params">newObj, oldObj</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> oldObj) &#123;<br>        <span class="hljs-comment">// 取oldObj的属性值</span><br>        <span class="hljs-keyword">var</span> item = oldObj[k];<br>        <span class="hljs-comment">// 判断是否属于复杂数据类型——数组</span><br>        <span class="hljs-keyword">if</span> (item <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>) &#123;<br>            <span class="hljs-comment">// 若是，就需要继续拷贝</span><br>            newObj[k] = [];<br>            <span class="hljs-title function_">deepcopy</span>(newObj[k], item);<br>            <span class="hljs-comment">// 判断是否属于复杂数据类型——对象</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>) &#123;<br>            <span class="hljs-comment">// 若是，就需要继续拷贝</span><br>            newObj[k] = &#123;&#125;;<br>            <span class="hljs-title function_">deepcopy</span>(newObj[k], item);<br>            <span class="hljs-comment">// 判断是否属于简单数据类型</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 若是，就直接拷贝</span><br>            newObj[k] = item;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title function_">deepcopy</span>(newObj, oldObj);<br>newObj.<span class="hljs-property">msg</span>.<span class="hljs-property">age</span> = <span class="hljs-number">20</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oldObj.<span class="hljs-property">msg</span>.<span class="hljs-property">age</span>);    <span class="hljs-comment">// 深拷贝，不会影响原来的数据，还是18</span><br></code></pre></td></tr></table></figure><h2 id="正则表达式及应用"><a href="#正则表达式及应用" class="headerlink" title="==正则表达式及应用=="></a>==正则表达式及应用==</h2><p>正则表达式-Regular Expression —— 用于匹配字符串中字符组合的模式。</p><p>在JS中，<strong>正则表达式也是对象</strong>，主要用于 匹配 替换 提取</p><h3 id="正则表达式的创建"><a href="#正则表达式的创建" class="headerlink" title="正则表达式的创建"></a>正则表达式的创建</h3><ul><li><p>利用RegExp对象来创建</p><blockquote><p>var regexp = new RegExp(/123/);</p></blockquote></li><li><p>利用字面量来创建</p><blockquote><p>var regexp = /123/;</p></blockquote></li></ul><p>注意: 正则表达式里面不需要加引号, 不管事字符型还是数字型</p><p>示例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> regexp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-regexp">/123/</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regexp);<br><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/123/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-number">123</span>));     <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));   <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="正则表达式中的特殊字符"><a href="#正则表达式中的特殊字符" class="headerlink" title="正则表达式中的特殊字符"></a>正则表达式中的特殊字符</h3><h4 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h4><p>正则表达式中的边界符(位置符)用来提示字符所处的位置</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 含有abc即可</span><br><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/abc/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));    <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>));   <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;eabcd&#x27;</span>));  <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 以abc开头</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^abc/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));   <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>));  <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;eabcd&#x27;</span>)); <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// 以abc结尾</span><br><span class="hljs-keyword">var</span> regexp = <span class="hljs-regexp">/abc$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regexp.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));    <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regexp.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>));   <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regexp.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;eabc&#x27;</span>));   <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 精确匹配，必须是abc</span><br><span class="hljs-keyword">var</span> rege = <span class="hljs-regexp">/^abc$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rege.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));    <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rege.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>));   <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rege.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;eabc&#x27;</span>));   <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h4><p>[一系列字符]: [] 表示有一系列字符可以供选择,只要匹配其中一个就可以了</p><p><strong>注意: 若中括号里面含有 ^ ,则表示取反的意思, 不要和边界符 ^ 混淆</strong></p><p>示例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 包含 a 或 b 或 c ，都返回true</span><br><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/[abc]/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));    <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;Kathy&#x27;</span>));   <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;red&#x27;</span>));  <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// 以a b c 中任意一个开头</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[abc]/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));   <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;bb&#x27;</span>));  <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;cc&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;dd&#x27;</span>)); <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// 以a b c 中任意一个结尾</span><br><span class="hljs-keyword">var</span> regexp = <span class="hljs-regexp">/[abc]$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regexp.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));    <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regexp.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aa&#x27;</span>));   <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regexp.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;bb&#x27;</span>));   <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regexp.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;dd&#x27;</span>));   <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// 只能是 a 或 b 或 c</span><br><span class="hljs-keyword">var</span> rege = <span class="hljs-regexp">/^[abc]$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rege.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));    <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rege.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>));   <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rege.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;b&#x27;</span>));   <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rege.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;c&#x27;</span>));   <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// a-z 26个小写字母中任何一个 返回true</span><br><span class="hljs-keyword">var</span> rg1 = <span class="hljs-regexp">/^[a-z]$/</span>;<br><br><span class="hljs-comment">// 26个大小写字母、数字0-9、短杠线-、下划线 中的任何一个 返回true</span><br><span class="hljs-keyword">var</span> rg2 = <span class="hljs-regexp">/^[a-zA-Z0-9_-]$/</span>;<br><br><span class="hljs-comment">// 中括号里面含有 ^ ,则表示取反的意思</span><br><span class="hljs-comment">// 不能是 26个大小写字母、数字0-9、短杠线-、下划线 中的任何一个</span><br><span class="hljs-keyword">var</span> rg3 = <span class="hljs-regexp">/^[^a-zA-Z0-9_-]$/</span>;<br></code></pre></td></tr></table></figure><h4 id="量词符"><a href="#量词符" class="headerlink" title="量词符"></a>量词符</h4><p>用来设定某个模式出现的次数</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或者更多次 (&gt;= 0次)</td></tr><tr><td>+</td><td>重复一次或更多次 (&gt;= 1次)</td></tr><tr><td>?</td><td>重复零次或一次 (0次 || 1次)</td></tr><tr><td>{n}</td><td>重复n次 (n次)</td></tr><tr><td>{n,}</td><td>重复n次 或 更多次 (&gt;= n次)</td></tr><tr><td>{n,m}</td><td>重复n到m次(注意: <strong>逗号后面不要有空格</strong>)</td></tr></tbody></table><p>示例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// * 出现次数： &gt;=0</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a*$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>));      <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>));     <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaaa&#x27;</span>));  <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// + 出现次数： &gt;=1</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a+$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>));      <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>));     <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaaa&#x27;</span>));  <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// ? 出现次数： 0 或 1</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a?$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>));      <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>));     <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaaa&#x27;</span>));  <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// &#123;n&#125; 出现次数： n</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a&#123;4&#125;$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>));      <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>));     <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaaa&#x27;</span>));  <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// &#123;n,&#125; 出现次数： &gt;=n</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a&#123;4,&#125;$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>));      <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>));     <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaaa&#x27;</span>));  <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>));  <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// &#123;n,m&#125; 出现次数： n &lt;= 次数 &lt;= m</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^a&#123;4,6&#125;$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>));      <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>));     <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaaaa&#x27;</span>));  <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>));  <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="案例-用户名合法验证"><a href="#案例-用户名合法验证" class="headerlink" title="案例:用户名合法验证"></a>案例:用户名合法验证</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        请输入用户名：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>            X 输入格式不对<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>;</span><br><span class="language-javascript">        input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;blur&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> userName = input.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (reg.<span class="hljs-title function_">test</span>(userName)) &#123;</span><br><span class="language-javascript">                span.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;✔ 输入格式正确&quot;</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 若修改的内容较多，可以将需要修改的样式包装到一个类里面，满足不同条件，删除添加类即可</span></span><br><span class="language-javascript">                span.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;green&#x27;</span>;</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                span.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;X 输入格式不对&quot;</span>;</span><br><span class="language-javascript">                span.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h4><p>指的是 某些常见模式的简写方式</p><table><thead><tr><th>预定于</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配0-9之间的任一数字, 相当于[0-9]</td></tr><tr><td>\D</td><td>匹配<strong>除</strong>0-9之外的任一字符, 相当于[^0-9]</td></tr><tr><td>\w</td><td>匹配任意的字母, 数字和下划线, 相当于[a-zA-Z0-9_]</td></tr><tr><td>\W</td><td>匹配<strong>除</strong>所有的字母, 数字和下划线以外的字符, 相当于[^a-zA-Z0-9_]</td></tr><tr><td>\s</td><td>匹配空格(包括换行符, 制表符, 空格符等),相当于 [\t\r\n\v\f]</td></tr><tr><td>\S</td><td>匹配<strong>非</strong>空格符, 相当于[^\t\r\n\v\f]</td></tr></tbody></table><ol><li><strong>正则里面的 “或” 符号: |</strong></li><li>座机号码验证</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 号码格式：010-12345678 或者 0530-1234567</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>手机号验证</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 格式</span><br><span class="hljs-keyword">var</span> regtel = <span class="hljs-regexp">/^1[3|4|5|7|8]\d&#123;9&#125;$/</span>;<br></code></pre></td></tr></table></figure><ol start="4"><li>中文:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[\u4e00-\u9fa5]&#123;2,8&#125;$/</span><br></code></pre></td></tr></table></figure><h4 id="正则表达式中的替换"><a href="#正则表达式中的替换" class="headerlink" title="正则表达式中的替换"></a>正则表达式中的替换</h4><h5 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h5><p>可以实现替换字符串操作,用来替换的参数可以是一个字符串或是一个正则表达式</p><blockquote><p>stringObject.replace(regexp/substr, replacement);</p></blockquote><ul><li>第一个参数：被替换的字符串 或者 正则表达式</li><li>第二个参数：替换为的字符串</li><li>返回值是一个替换完毕的新字符串</li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;kathy and andy&quot;</span>;<br><span class="hljs-keyword">var</span> newstr1 = str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;kathy&#x27;</span>, <span class="hljs-string">&#x27;Amy&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr1);<br><span class="hljs-keyword">var</span> newstr2 = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/andy/</span>, <span class="hljs-string">&#x27;baby&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr2);<br></code></pre></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><blockquote><p>/表达式/[switch]</p></blockquote><p>switch（也称为修饰符）—— 按照什么样的模式来匹配。有三种值可选：</p><ul><li>g: 全局匹配</li><li>i： 忽略大小写</li><li>gi: 全局匹配 + 忽略大小写</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;kathy and andy&quot;</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> newstr1 = str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;kathy&#x27;</span>, <span class="hljs-string">&#x27;Amy&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr1);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> newstr2 = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/andy/</span>, <span class="hljs-string">&#x27;baby&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr2);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;textarea&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(text.value);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 将text中出现的 “激情” “gay” 不区分大小写，都替换为 **</span></span><br><span class="language-javascript">            text.<span class="hljs-property">value</span> = text.<span class="hljs-property">value</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/激情|gay/gi</span>, <span class="hljs-string">&quot;**&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="ES6新增语法"><a href="#ES6新增语法" class="headerlink" title="ES6新增语法"></a>ES6新增语法</h2><h3 id="let与const"><a href="#let与const" class="headerlink" title="let与const"></a>let与const</h3><h4 id="let"><a href="#let" class="headerlink" title="==let=="></a>==let==</h4><p>ES6中新增的关于用于声明变量的关键字</p><ul><li><p>let 声明的变量<strong>只在所处于的块级</strong>有效</p><blockquote><p>if (true) {</p><p>​    let a = 10;</p><p>​    var b = 11;</p><p>}</p><p>console.log(a);    // a is not define</p><p>console.log(b);    // 11, 可访问</p></blockquote><ul><li><p>let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域的特性</p></li><li><p>let可用于声明循环变量，防止循环变量变成全局变量</p><blockquote><p>for (var i=0; i&lt;3; i++) {</p><p>}</p><p>console.log(i);    // var声明的变量，循环结束后还能使用</p><p>for (let i=0; i&lt;3; i++) {</p><p>}</p><p>console.log(i);    // 报错，let声明的变量，循环结束后不能使用</p></blockquote></li></ul></li><li><p><strong>不存在变量提升</strong></p><blockquote><p>console.log(a);    // a is not define</p><p>let a = 20;</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>    <span class="hljs-keyword">let</span> num = <span class="hljs-number">20</span>;<br>&#125;<br><span class="hljs-comment">// 执行结果：报错</span><br><span class="hljs-comment">// 原因：在if语句里面，num处于let的块级作用域，</span><br><span class="hljs-comment">// 因此num会与let进行绑定，不会使用外部的var num </span><br><span class="hljs-comment">// 但let声明的变量没有变量提升,因此报错</span><br></code></pre></td></tr></table></figure></li><li><p>经典面试题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> arr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>    arr[i] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>    &#125;<br>&#125;<br><br>arr[<span class="hljs-number">0</span>]();   <span class="hljs-comment">// 2</span><br>arr[<span class="hljs-number">1</span>]();   <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>注意：都为2</p><p>关键点：i是全局变量，函数执行时输出的都是全局作用于下的i值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr1 = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>    arr1[i] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>    &#125;<br>&#125;<br><br>arr1[<span class="hljs-number">0</span>]();   <span class="hljs-comment">// 0</span><br>arr1[<span class="hljs-number">1</span>]();   <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p>关键点：每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是循环产生的块级作用域下的i值</p></li></ul><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><ul><li><p>const关键字声明的常量具有<strong>块级作用域</strong></p><blockquote><p>if (true) {</p><p>​    const a = 10;</p><p>}</p><p>console.log(a)    // a is not define</p></blockquote></li><li><p>声明常量时<strong>必须赋值</strong></p><blockquote><p>const PI;    // 报错</p></blockquote></li><li><p>常量赋值后，不能更改，存在以下两种情况</p><blockquote><p>const PI = 3.14;</p><p>PI = 100;    // 报错</p></blockquote><blockquote><p><em>const</em> ary = [100, 200];</p><p>ary[0] = ‘a’;  // <strong>可赋值</strong></p><p>ary[1] = ‘b’;  <em>// 可赋值</em></p><p>console.log(ary);  <em>// [‘a’, ‘b’]</em></p><p>ary = [‘a’, ‘b’];    // 报错</p></blockquote></li></ul><h4 id="let-const-var-区别"><a href="#let-const-var-区别" class="headerlink" title="let const var 区别"></a>let const var 区别</h4><table><thead><tr><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>函数级作用域</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>变量提升</td><td>不存在变量提升</td><td>不存在变量提升</td></tr><tr><td>值可更改</td><td>值可更改</td><td>值不可更改</td></tr></tbody></table><h3 id="ES6解构赋值"><a href="#ES6解构赋值" class="headerlink" title="ES6解构赋值"></a>ES6解构赋值</h3><p>即允许从数组中提取值，按照对象位置，对变量赋值，对象也可以实现解构</p><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><p>允许按照一一对应的关系从数组中提取值，然后将值赋给变量</p><blockquote><p><em>let</em> ary = [1, 2, 3];</p><p><em>let</em> [a, b, c] = ary;</p><p>console.log(a);    // 1</p><p>console.log(b);    // 2</p><p>console.log(c);    // 3</p></blockquote><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;andy&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;;<br><span class="hljs-keyword">let</span> &#123; name, age &#125; = person;<span class="hljs-comment">// 此处的name和age一定要和person里面的属性名相同，变量顺序可改变</span><br><span class="hljs-comment">// let &#123; age, name &#125; = person;// 顺序改变不影响</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 通过属性名name和age匹配</span><br><span class="hljs-comment">// 相当于将person里面name的属性值赋给了变量myname, myage同理</span><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">name</span>: myname, <span class="hljs-attr">age</span>: myage &#125; = person;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myname);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myage);<br></code></pre></td></tr></table></figure><h3 id="ES6箭头函数"><a href="#ES6箭头函数" class="headerlink" title="ES6箭头函数"></a>ES6箭头函数</h3><p>() =&gt; {}</p><ol><li><p>新增定义函数的方式：</p><blockquote><p>const fn = () =&gt; {};</p></blockquote></li></ol><ol start="2"><li><p>当函数体只有一句代码，且执行的结果就是返回值，可以省略return和大括号</p><blockquote><p>function sum (num1, num2) {</p><p>​    return num1 + num2;</p><p>}</p><p>const sum = (num1, num2) =&gt; num1 + num2；</p></blockquote><p> 示例：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// function sum (num1, num2) &#123;</span><br><span class="hljs-comment">//     return num1 + num2;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// 上面函数可以表示为箭头函数：</span><br><span class="hljs-comment">// const sum = (num1, num2) =&gt; &#123; return num1 + num2 &#125;;</span><br><br><span class="hljs-comment">// 当函数体只有一句代码，且执行的结果就是返回值，可以同时省略return和大括号</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">num1, num2</span>) =&gt; num1 + num2;<br><span class="hljs-keyword">const</span> a = <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);     <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure></li><li><p>形参只有一个时，小括号也可以省略</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 形参只有一个时，小括号也可以省略</span><br><span class="hljs-comment">// const test = (val) =&gt; &#123; alert(val); &#125;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">test</span> = val =&gt; &#123; <span class="hljs-title function_">alert</span>(val); &#125;<br><span class="hljs-title function_">test</span>(<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure></li><li><p>箭头函数不绑定this<br> 箭头函数没有自己的this关键字，若在箭头函数中使用this，<strong>this指向</strong>箭头函数的<strong>定义位置</strong>的this</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 箭头函数不绑定this</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); &#125;;<br>&#125;<br><br><span class="hljs-keyword">var</span> f = <span class="hljs-title function_">fn</span>();   <span class="hljs-comment">// 打印fn里面第一个this指向：window</span><br><span class="hljs-title function_">f</span>();            <span class="hljs-comment">// 打印返回值里面的this指向：window</span><br><br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;andy&#x27;</span> &#125;;<br><span class="hljs-keyword">const</span> newf = fn.<span class="hljs-title function_">call</span>(obj);  <span class="hljs-comment">// 通过call改变fn里面的this指向：obj</span><br><span class="hljs-title function_">newf</span>();         <span class="hljs-comment">// 返回值箭头函数里面的this指向也改变：obj</span><br></code></pre></td></tr></table></figure></li><li><p>练习</p><p>  <strong>注意</strong></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attr">say</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>    &#125;,<br>    <span class="hljs-attr">sing</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-comment">// 箭头函数的this指向的是上一级作用域，即person的上一级window</span><br>    &#125;<br>&#125;<br><br>person.<span class="hljs-title function_">say</span>();   <span class="hljs-comment">// this指向person</span><br>person.<span class="hljs-title function_">sing</span>();  <span class="hljs-comment">// this指向window</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><blockquote><p><em>let</em> arr = [1, 2, 3];</p><p><em>let</em> [a, …b] = arr;</p><p>console.log(a);   <em>// 1</em></p><p>console.log(b);   <em>// [2, 3]</em></p></blockquote><h3 id="Array的扩展方法"><a href="#Array的扩展方法" class="headerlink" title="Array的扩展方法"></a>Array的扩展方法</h3><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><p>可以将<strong>数组</strong>转为用逗号分隔的参数序列</p><blockquote><p>let arr = [1, 2, 3];<br>console.log(…arr);    // 1 2 3</p><p>console.log(1, 2, 3);    // 1 2 3</p></blockquote><p>注意：</p><ul><li><p>…arr 将 arr 转为 1, 2, 3 逗号分隔</p></li><li><p>console.log将1, 2, 3之间的逗号作为输出的分隔符（类似于 + ），因此没有将 逗号 输出</p></li></ul><h4 id="扩展运算符应用"><a href="#扩展运算符应用" class="headerlink" title="扩展运算符应用"></a>扩展运算符应用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// (1)合并数组:</span><br><span class="hljs-comment">// 方法一</span><br><span class="hljs-keyword">let</span> ary1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> ary2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">let</span> ary3 = [...ary1, ...ary2];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ary3);<br><span class="hljs-comment">// 方法二</span><br>ary1.<span class="hljs-title function_">push</span>(...ary2);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ary1);<br><br><span class="hljs-comment">// (2)将类数组或可遍历对象转换为真正的数组</span><br><span class="hljs-keyword">let</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-comment">// 将伪数组转换为数组后，就可以使用数组的方法了</span><br>divs = [...divs];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(divs);<br>divs.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// 数组方法push</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(divs);<br></code></pre></td></tr></table></figure><h4 id="构造函数方法Array-from"><a href="#构造函数方法Array-from" class="headerlink" title="构造函数方法Array.from()"></a>构造函数方法Array.from()</h4><p>将类数组或可遍历对象转换为真正的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// Array.from() 将类数组和可遍历对象转换为真正的数组</span><br><span class="hljs-keyword">let</span> arrLike = &#123;<br>    <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">3</span><br>&#125;;<br><br><span class="hljs-keyword">let</span> arr = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(arrLike);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br></code></pre></td></tr></table></figure><h4 id="实例方法find"><a href="#实例方法find" class="headerlink" title="实例方法find()"></a>实例方法find()</h4><p>用于找出第一个符合条件的<strong>数组成员</strong>，若没有找到，则返回undefined</p><blockquote><p><em>let</em> target = ary.find((item, index) <em>=&gt;</em> item.id == 2);</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// find()找出第一个符合条件的数组成员，若没找到，则返回undefined</span><br><span class="hljs-keyword">let</span> ary = [&#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;andy&#x27;</span><br>&#125;, &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;kathy&#x27;</span><br>&#125;];<br><br><span class="hljs-comment">// 传入ary每个元素item，查找元素item的id为2的元素</span><br><span class="hljs-comment">// let target = ary.find(item =&gt; &#123;</span><br><span class="hljs-comment">//     return item.id == 2;</span><br><span class="hljs-comment">// &#125;)</span><br><span class="hljs-comment">// 简写为：</span><br><span class="hljs-keyword">let</span> target = ary.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">id</span> == <span class="hljs-number">2</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target);<br></code></pre></td></tr></table></figure><h4 id="实例方法findIndex"><a href="#实例方法findIndex" class="headerlink" title="实例方法findIndex()"></a>实例方法findIndex()</h4><p>用于查找第一个符合条件的<strong>数组成员的位置</strong>，若没有找到则返回-1</p><blockquote><p><em>let</em> index = ary1.findIndex((value, index) <em>=&gt;</em> value &gt; 9);</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 2 findIndex() 用于查找第一个符合条件的数组成员的位置，若没有找到则返回-1</span><br><span class="hljs-keyword">let</span> ary1 = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>];<br><span class="hljs-keyword">let</span> index = ary1.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function">(<span class="hljs-params">value, index</span>) =&gt;</span> value &gt; <span class="hljs-number">9</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index);<span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h4 id="实例方法includes"><a href="#实例方法includes" class="headerlink" title="实例方法includes()"></a>实例方法includes()</h4><p>表示某个数组是否包含给定的值,返回布尔值</p><blockquote><p>[1, 2, 3].includes(2);    // true</p><p>[1, 2, 3].includes(4);    // false</p></blockquote><h3 id="String的扩展方法"><a href="#String的扩展方法" class="headerlink" title="String的扩展方法"></a>String的扩展方法</h3><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><ol><li><p>ES6新增的创建字符串的方式,使用反引号定义</p><blockquote><p>let name = `zhangsan`;</p></blockquote></li><li><p>模板字符串可以解析变量</p><blockquote><p><em>let</em> sayHello = `hello, my name is ${name}`;</p><p>console.log(sayHello);  <em>// hello, my name is andy</em></p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 1 模板字符串：新增创建子字符串的方式，使用 反引号 定义  ``</span><br><span class="hljs-keyword">let</span> name = <span class="hljs-string">`andy`</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br><br><span class="hljs-comment">// 2 模板字符串可以解析变量</span><br><span class="hljs-keyword">let</span> sayHello = <span class="hljs-string">`hello, my name is <span class="hljs-subst">$&#123;name&#125;</span>`</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sayHello);  <span class="hljs-comment">// hello, my name is andy</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>模板字符串可以换行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;andy&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;<br><span class="hljs-keyword">let</span> html = <span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">&lt;span&gt;<span class="hljs-subst">$&#123;person.name&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">&lt;span&gt;<span class="hljs-subst">$&#123;person.age&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">&lt;/div&gt;`</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(html);<br></code></pre></td></tr></table></figure></li><li><p>模板字符串可以调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sayHi = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hi~&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> greet = <span class="hljs-string">`<span class="hljs-subst">$&#123;sayHi()&#125;</span>`</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(greet);<span class="hljs-comment">// Hi~</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="实例方法startsWith和endsWith"><a href="#实例方法startsWith和endsWith" class="headerlink" title="实例方法startsWith和endsWith"></a>实例方法startsWith和endsWith</h4><ul><li>startsWith() 表示参数字符串是否在原字符串的头部,返回布尔值</li><li>endswith() 表示参数字符串是否在原字符串的尾部,返回布尔值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;Hello world!&#x27;</span>;<br><span class="hljs-keyword">let</span> flag1 = str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;H&#x27;</span>);<br><span class="hljs-keyword">let</span> flag2 = str.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;!&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag1);     <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag2);     <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="实例方法repeat"><a href="#实例方法repeat" class="headerlink" title="实例方法repeat()"></a>实例方法repeat()</h4><p>表示将原字符串重复n次,返回一个新字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str1 = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">let</span> str2 = <span class="hljs-string">&#x27;Hi~&#x27;</span>;<br><span class="hljs-keyword">let</span> newStr1 = str1.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">let</span> newStr2 = str2.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">3</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newStr1);   <span class="hljs-comment">// aaa</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newStr2);   <span class="hljs-comment">// Hi~Hi~Hi~</span><br></code></pre></td></tr></table></figure><h3 id="set数据结构"><a href="#set数据结构" class="headerlink" title="set数据结构"></a>set数据结构</h3><p>类似于数组,但成员的值都是唯一的,没有重复的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// set</span><br><span class="hljs-keyword">const</span> str1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str1.<span class="hljs-property">size</span>);     <span class="hljs-comment">// 0</span><br><br><span class="hljs-keyword">const</span> str2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2.<span class="hljs-property">size</span>);     <span class="hljs-comment">// 2</span><br><br><span class="hljs-comment">// set有去重的作用</span><br><span class="hljs-keyword">const</span> str3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str3.<span class="hljs-property">size</span>);     <span class="hljs-comment">// 2</span><br><span class="hljs-keyword">const</span> arr = [...str3];<span class="hljs-comment">// 转换为数组</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);           <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;]</span><br></code></pre></td></tr></table></figure><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul><li>add(value): 添加某个值,返回Set结构本身</li><li>delete(value): 删除某个值,返回一个布尔值,表示删除是否成功</li><li>has(value): 返回一个布尔值,表示该值是否为Set的成员</li><li>clear(): 清除所有成员,没有返回值</li></ul><p>示例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br>s.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">add</span>(<span class="hljs-number">3</span>);<br>s.<span class="hljs-title function_">delete</span>(<span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-title function_">has</span>(<span class="hljs-number">2</span>));<br>s.<span class="hljs-title function_">clear</span>();<br></code></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>利用forEach方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 遍历set数据结构</span><br><span class="hljs-keyword">const</span> str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-comment">// str.forEach(function (value) &#123;</span><br><span class="hljs-comment">//     console.log(value);</span><br><span class="hljs-comment">// &#125;);</span><br>str.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value); &#125;)<br></code></pre></td></tr></table></figure><h2 id="Js全局函数"><a href="#Js全局函数" class="headerlink" title="Js全局函数"></a>Js全局函数</h2><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-decodeuri.html">decodeURI()</a></td><td align="left">解码某个编码的 URI。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-decodeuricomponent.html">decodeURIComponent()</a></td><td align="left">解码一个编码的 URI 组件。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-encodeuri.html">encodeURI()</a></td><td align="left">把字符串编码为 URI。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-encodeuricomponent.html">encodeURIComponent()</a></td><td align="left">把字符串编码为 URI 组件。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-escape.html">escape()</a></td><td align="left">对字符串进行编码。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-eval.html">eval()</a></td><td align="left">计算 JavaScript 字符串，并把它作为脚本代码来执行。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-isfinite.html">isFinite()</a></td><td align="left">检查某个值是否为有穷大的数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-isnan.html">isNaN()</a></td><td align="left">检查某个值是否是数字。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-number.html">Number()</a></td><td align="left">把对象的值转换为数字。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-parsefloat.html">parseFloat()</a></td><td align="left">解析一个字符串并返回一个浮点数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-parseint.html">parseInt()</a></td><td align="left">解析一个字符串并返回一个整数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-string.html">String()</a></td><td align="left">把对象的值转换为字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-unescape.html">unescape()</a></td><td align="left">对由 escape() 编码的字符串进行解码。</td></tr></tbody></table><h1 id="待做事项"><a href="#待做事项" class="headerlink" title="待做事项"></a>待做事项</h1><p>本地存储</p><h2 id="实现tofolist"><a href="#实现tofolist" class="headerlink" title="实现tofolist"></a>实现tofolist</h2><h2 id="面向对象案例"><a href="#面向对象案例" class="headerlink" title="面向对象案例"></a>面向对象案例</h2><p>面向对象版tab栏切换</p>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>JS语法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WebAPI简介</title>
    <link href="/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/WebAPI/WebAPI%E7%AE%80%E4%BB%8B/"/>
    <url>/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/WebAPI/WebAPI%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="WebAPI简介"><a href="#WebAPI简介" class="headerlink" title="WebAPI简介"></a>WebAPI简介</h1><p>JS包含 JavaScript基础 和 WebAPIs</p><ul><li><p>JavaScript基础即 ECMAScript</p></li><li><p>WebAPIs包含 DOM和BOM</p></li></ul><ol><li>API是为程序员提供的一个接口，帮助我们实现某种功能，会使用，不必纠结内部如何实现</li><li>Web API是浏览器提供的一套操作浏览器功能和页面元素的API(DOM 和 BOM)；主要针对浏览器提供的接口，做交互效果</li><li>Web API一般都有输入和输出（函数的传参和返回值）</li></ol>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>JS语法</category>
      
      <category>WebAPI</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BOM</title>
    <link href="/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/WebAPI/BOM/"/>
    <url>/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/WebAPI/BOM/</url>
    
    <content type="html"><![CDATA[<h1 id="BOM概述"><a href="#BOM概述" class="headerlink" title="BOM概述"></a>BOM概述</h1><h2 id="什么是BOM"><a href="#什么是BOM" class="headerlink" title="什么是BOM"></a>什么是BOM</h2><p>BOM-Browser Object Model 浏览器对象模型，提供了独立于内容而与浏览器窗口进行交互的对象，核心对象是window</p><p>BOM是由一系列相关的对象构成，并且每个对象都提供了很多方法和属性</p><p>DOM和BOM的区别</p><table><thead><tr><th>DOM</th><th>BOM</th></tr></thead><tbody><tr><td>文档对象模型</td><td>浏览器对象模型</td></tr><tr><td>把【文档】当作一个【对象】来看</td><td>把【浏览器】当作一个【对象】来看</td></tr><tr><td>顶级对象是【文档】</td><td>顶级对象是【window】</td></tr><tr><td>主要学习 操作页面元素</td><td>学习 浏览器窗口交互的一些对象</td></tr><tr><td>是W3C标准规范</td><td>是浏览器厂商在各自的浏览器上定义的，兼容性较差</td></tr></tbody></table><h2 id="BOM的构成"><a href="#BOM的构成" class="headerlink" title="BOM的构成"></a>BOM的构成</h2><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220417211457970.png" alt="image-20220417211457970"></p><p>window对象是浏览器的顶级对象，具有双重角色</p><ul><li><p>是JS访问浏览器窗口的一个接口</p></li><li><p>是一个全局对象，定义在全局作用域中的<strong>变量、函数</strong>都会成为<strong>window对象的属性和方法</strong></p><p>在调用的时候可以省略window（如：alert()、prompt()等）</p></li><li><p>注意：window下的一个特殊属性<strong>window.name</strong></p></li></ul><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><p>confirm()</p><p>用于显示一个带有指定消息和确认及取消按钮的对话框。</p><p>alert()</p><p>prompt()</p><p>用于显示可提示用户进行输入的对话框</p><p>open()</p><h2 id="window对象的常见事件"><a href="#window对象的常见事件" class="headerlink" title="window对象的常见事件"></a>window对象的常见事件</h2><h3 id="窗口加载事件load"><a href="#窗口加载事件load" class="headerlink" title="窗口加载事件load"></a>窗口加载事件load</h3><h4 id="load"><a href="#load" class="headerlink" title="load"></a>load</h4><blockquote><p>window.onload = function() {}</p></blockquote><p>或</p><blockquote><p>window.addEventListener(‘load’, function() {});</p></blockquote><p>window.onload是窗口加载事件，当文档内容（<strong>包括</strong>图像、脚本文件、CSS文件等）完全加载完成会触发该事件</p><p><strong>注意：</strong></p><ol><li><span style="color:red">有了window.onload就可以把JS代码写到页面元素的上方</span>，因为onload是等页面全部加载完毕再去执行处理函数</li><li>window.onload<strong>传统注册方式只能写一次</strong>，若有多个window.onload，以最后一个为准</li><li>若使用window.<strong>addEventListener，则没有限制</strong></li></ol><h4 id="load与DOMContentLoaded"><a href="#load与DOMContentLoaded" class="headerlink" title="load与DOMContentLoaded"></a>load与DOMContentLoaded</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-number">22</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-number">33</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>window.addEventListener(‘load’, function (){})</p><p><strong>load</strong>会等页面内容全部加载完毕后（包含页面dom元素、图片、flash、css等等），再去处理</p></li><li><p>window.addEventListener(‘DOMContentLoaded’, function (){})</p><p><strong>DOMContentLoaded</strong>是DOM加载完毕，<strong>不包含</strong>图片、flash、css等等，就可以执行，加载速度比load快一些</p></li></ul><h3 id="调整窗口大小事件resize"><a href="#调整窗口大小事件resize" class="headerlink" title="调整窗口大小事件resize"></a>调整窗口大小事件resize</h3><blockquote><p>window.onresize = function()</p></blockquote><p>或</p><blockquote><p>window.addEventListener(“resize”, function() {});</p></blockquote><p>window.onresize是调整窗口大小加载事件，当触发时就调用的处理函数</p><p>注意：</p><ol><li><p>只要窗口大小发生像素变化，就会触发这个事件</p></li><li><p>经常利用这个事件完成响应式布局</p><p><strong>window.innerWidth 获得当前屏幕宽度</strong></p></li></ol><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> &lt; <span class="hljs-number">700</span>) &#123;</span><br><span class="language-javascript">                    div.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    div.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>window 对象提供了两个非常好用的方法：</p><ul><li>setTimeout()</li><li>setInterval()</li></ul><h3 id="setTimeout-定时器"><a href="#setTimeout-定时器" class="headerlink" title="setTimeout()定时器"></a>setTimeout()定时器</h3><blockquote><p>window.setTimeout(调用函数，[延迟的毫秒数]);</p></blockquote><p>用于设置一个定时器，在定时器到期后执行调用函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 1 window.setTimeout(function()&#123;&#125;, 毫秒数)</span></span><br><span class="language-javascript">            <span class="hljs-comment">// setTimeout(function () &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     alert(&#x27;hi!&#x27;);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// &#125;, 2000);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hi!&#x27;</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 2 window.setTimeout(函数名, 毫秒数)</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">2000</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 3 window.setTimeout(&#x27;函数名()&#x27;, 毫秒数) 不提倡</span></span><br><span class="language-javascript">            <span class="hljs-comment">// window.setTimeout(&#x27;callback()&#x27;, 2000);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li><p>有三种写法</p></li><li><p>调用定时器时，可以省略window，直接setTimeout(function(){}, 毫秒数)</p></li><li><p>延时单位是毫秒，可省略，默认是0毫秒；时间到了才去回调里面的函数</p></li><li><p>调用函数直接写函数 或者 函数名 均可</p></li><li><p>页面中可能会有很多定时器，可以给定时器加标识符（名字）</p><blockquote><p>如：var timer = setTimeout(function, 3000);</p></blockquote></li></ul><h3 id="停止clearTimeout"><a href="#停止clearTimeout" class="headerlink" title="停止clearTimeout()"></a>停止clearTimeout()</h3><blockquote><p>window.clearTimeout(timeId); </p></blockquote><ul><li>timeid就是定时器的名称</li><li>window可以省略</li><li>此方法取消了setTimeout的建立的定时器</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> ad = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                ad.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">3000</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-built_in">clearTimeout</span>(timer);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>终止<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="setInterval-定时器"><a href="#setInterval-定时器" class="headerlink" title="setInterval()定时器"></a>setInterval()定时器</h3><blockquote><p>window.setInterval(回调函数，[间隔的毫秒数])；</p></blockquote><ul><li>setInterval()方法是<strong>重复调用一个函数，每隔一段给定的时间，就调用一次回调函数</strong></li><li>window可以省略</li><li>回调函数可以直接写函数 或 函数名 或 ‘函数名()’ 3种形式</li></ul><p>案例-倒计时</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// var box = document.querySelector(&#x27;.box&#x27;);</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> hour = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.hour&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> min = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.min&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> sec = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.sec&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">countDown</span>(<span class="hljs-params">time</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// js在某个数据类型前使用‘+’，这个操作目的是为了将该数据类型转换为Number类型，如果转换失败，则返回NaN;</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> nowTime = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> inputTime = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> times = (inputTime - nowTime) / <span class="hljs-number">1000</span>;    <span class="hljs-comment">// 剩余总的秒数</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> hours = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> % <span class="hljs-number">24</span>);   <span class="hljs-comment">// 小时</span></span><br><span class="language-javascript">                hours = hours &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + hours : hours;</span><br><span class="language-javascript">                hour.<span class="hljs-property">innerHTML</span> = hours;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> minutes = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> % <span class="hljs-number">60</span>);      <span class="hljs-comment">// 分钟</span></span><br><span class="language-javascript">                minutes = minutes &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + minutes : minutes;</span><br><span class="language-javascript">                min.<span class="hljs-property">innerHTML</span> = minutes;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> seconds = <span class="hljs-built_in">parseInt</span>(times % <span class="hljs-number">60</span>);           <span class="hljs-comment">// 秒钟</span></span><br><span class="language-javascript">                seconds = seconds &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + seconds : seconds;</span><br><span class="language-javascript">                sec.<span class="hljs-property">innerHTML</span> = seconds;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-title function_">countDown</span>(<span class="hljs-string">&#x27;2022-4-18 22:00:00&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">countDown</span>(<span class="hljs-string">&#x27;2022-4-18 22:00:00&#x27;</span>);</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- &lt;div class=&quot;box&quot;&gt;&lt;/div&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hour&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;min&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sec&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><p>此处用的 <code>+new Date()</code></p><p>js在某个数据类型<strong>前使用‘+’</strong>，这个操作目的是为了将<strong>该数据类型转换</strong>为<strong>Number类型</strong>，如果转换<strong>失败</strong>，则返回<strong>NaN</strong>;</p></li></ul><h3 id="停止clearInterval"><a href="#停止clearInterval" class="headerlink" title="停止clearInterval()"></a>停止clearInterval()</h3><blockquote><p>window.clearInterval(intervalid);</p></blockquote><ul><li>intervalid就是setInterval定时器的名称</li><li>window可省</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> start = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.start&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> stop = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.stop&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">            start.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;how are you?&#x27;</span>);</span><br><span class="language-javascript">                &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">            stop.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>开始<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;stop&quot;</span>&gt;</span>停止<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例-发送短信</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> tel = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#del&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> sec = <span class="hljs-number">5</span>;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;还剩&#x27;</span> + sec + <span class="hljs-string">&#x27;秒&#x27;</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (sec &lt; <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">                        <span class="hljs-comment">// 注意：不能用this.innerHTML,这里的this指向window 不是btn</span></span><br><span class="language-javascript">                        btn.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;发送&#x27;</span>;</span><br><span class="language-javascript">                        btn.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                        sec = <span class="hljs-number">5</span>;</span><br><span class="language-javascript">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                        sec--;</span><br><span class="language-javascript">                        btn.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;还剩&#x27;</span> + sec + <span class="hljs-string">&#x27;秒&#x27;</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tel&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tel&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="补充-this指向"><a href="#补充-this指向" class="headerlink" title="补充-this指向"></a>补充-this指向</h3><ul><li><p>全局作用域 或 普通函数中，this指向window</p></li><li><p>定时器里面的this指向window</p></li><li><p>方法调用中，谁调用this就指向谁</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1 全局作用域中，this指向window</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<span class="hljs-comment">// this指向 window</span><br><br><span class="hljs-comment">// 2 普通函数中，this指向window</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> () &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><span class="hljs-title function_">fn</span>();<span class="hljs-comment">// 实际前面省略了window</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">fn</span>();<br><br><span class="hljs-comment">// 3 方法调用中，谁调用this就指向谁</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<span class="hljs-comment">// this指向obj</span><br>    &#125;<br>&#125;<br><br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<span class="hljs-comment">// this指向 btn这个按钮对象</span><br>&#125;<br>                     <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fun</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<span class="hljs-comment">// this 指向的是 func这个实例对象</span><br>&#125;               <br><span class="hljs-keyword">var</span> func = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fun</span>();<br></code></pre></td></tr></table></figure><h2 id="JS执行队列"><a href="#JS执行队列" class="headerlink" title="==JS执行队列=="></a>==JS执行队列==</h2><h3 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h3><p>JS是单线程，<strong>同一个时间只能做一件事</strong>；为了解决这个问题，H5提出了Web Worker标准，允许JS创建多个线程，于是Js出现了同步和异步，同步和异步的本质区别就是流水线上各个六成的执行顺序不同</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<span class="hljs-comment">// 并没有等待上个语句执行完，才执行，而是先打印出3，再打印出2</span><br></code></pre></td></tr></table></figure><p>执行结果：1 3 2</p><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>同步任务都在主线程上执行，形成一个执行栈</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>异步通过回调函数实现</p><h5 id="异步的几种类型"><a href="#异步的几种类型" class="headerlink" title="异步的几种类型"></a>异步的几种类型</h5><p>一般来说，异步任务又以下三种类型：</p><ul><li>普通事件，如：click resize</li><li>资源加载，如：load error</li><li>定时器，如：setInterval setTimeout</li></ul><p>异步任务相关回调函数添加到<strong>任务队列</strong>中</p><h4 id="执行机制"><a href="#执行机制" class="headerlink" title="执行机制"></a>执行机制</h4><ol><li>先执行 执行栈中的同步任务</li><li>异步任务（回调函数）放入任务队列中（异步任务会根据谁先触发 就先执行谁）</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行</li></ol><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220419182607679.png" alt="image-20220419182607679" style="zoom:67%;" /><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220419183956503.png" alt="image-20220419183956503"></p><p>由于线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为<strong>事件循环(even loop)</strong></p><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>window对象提供了一个location属性用于<strong>获取或设置</strong>窗体的<strong>URL</strong>，并且可以用于解析URL，因这个属性返回的是一个对象，故称之为location对象</p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>Uniform Resource Locator，即URL 统一资源定位符 是互联网上标准的地址，互联网上每个文件都有一个唯一的URL，它包含的信息指出文件位置以及浏览器如何处理它</p><p>URL的一般语法格式为：</p><blockquote><p>protocol://host[:port]/path/[?query]$fragment</p></blockquote><p>如：</p><blockquote><p><a href="http://www.itcast.cn/index.html?name=andy&amp;age=18#link">http://www.itcast.cn/index.html?name=andy&amp;age=18#link</a></p></blockquote><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>protocol</td><td>通信协议，常用http，ftp，maito等</td></tr><tr><td>host</td><td>主机（域名） 如：<a href="http://www.itheima.com/">www.itheima.com</a></td></tr><tr><td>port</td><td>端口号 可选，省略时使用方案的默认端口 如：http的默认端口号为80</td></tr><tr><td>path</td><td>路径 有零个或多个‘/’符号隔开的字符串，一般用来表示主机上的一个目录或文件地址</td></tr><tr><td>query</td><td>参数 以键值对的形式，通过&amp;符号分隔开</td></tr><tr><td>fragment</td><td>片段 #后面内容 常见于链接 锚点</td></tr></tbody></table><h3 id="location对象属性"><a href="#location对象属性" class="headerlink" title="location对象属性"></a>location对象属性</h3><table><thead><tr><th>location对象属性</th><th>返回值</th></tr></thead><tbody><tr><td><strong>location.href</strong></td><td>获取或设置整个URL</td></tr><tr><td>location.host</td><td>返回主机（域名）<a href="http://www.itheima.com/">www.itheima.com</a></td></tr><tr><td>location.port</td><td>返回端口，若未写，则返回空字符串</td></tr><tr><td>location.pathname</td><td>返回路径</td></tr><tr><td><strong>location.search</strong></td><td>返回参数</td></tr><tr><td>location.hash</td><td>返回片段 #后面内容，常见于链接 锚点</td></tr></tbody></table><p>重点：</p><p>location.href</p><p>location.search</p><h4 id="案例-5秒后跳转首页"><a href="#案例-5秒后跳转首页" class="headerlink" title="案例-5秒后跳转首页"></a>案例-5秒后跳转首页</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;https://www.jd.com/&#x27;</span>;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> time = <span class="hljs-number">5</span>;</span><br><span class="language-javascript">        div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;还剩&#x27;</span> + time + <span class="hljs-string">&#x27;秒返回首页&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (time == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">                location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;https://www.jd.com/&#x27;</span>;</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                time--;</span><br><span class="language-javascript">                div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;还剩&#x27;</span> + time + <span class="hljs-string">&#x27;秒返回首页&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;, <span class="hljs-number">1000</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="案例-登录跳转"><a href="#案例-登录跳转" class="headerlink" title="案例-登录跳转"></a>案例-登录跳转</h4><p>页面一：</p><p>02-案例-登录页面.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>登录页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 提交表单，提交后需要跳转到另一个页面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;02-案例-登陆成功页面.html&quot;</span>&gt;</span><br>        用户名：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uname&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>页面二：02-案例-登陆成功页面.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    首页<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(location.<span class="hljs-property">search</span>);   <span class="hljs-comment">// ?uname=ypp</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 要得到用户名ypp，就需要将前面的？去掉</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 1 去问号：利用substr(&#x27;起始位置&#x27;， 截取几个字符)</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> temp = location.<span class="hljs-property">search</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>);   <span class="hljs-comment">// uname=ypp</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(temp);</span><br><span class="language-javascript">        <span class="hljs-comment">// 2 利用 =  将字符串分割为数组 split(&#x27;=&#x27;);</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> arr = temp.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);</span><br><span class="language-javascript">        <span class="hljs-comment">// 3 将数据楔入div中</span></span><br><span class="language-javascript">        div.<span class="hljs-property">innerHTML</span> = arr[<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;，欢迎您！&#x27;</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="location对象方法"><a href="#location对象方法" class="headerlink" title="location对象方法"></a>location对象方法</h3><table><thead><tr><th>location对象方法</th><th>返回值</th></tr></thead><tbody><tr><td>location.assign()</td><td>跟href一样，可以跳转页面（也称重定向页面）</td></tr><tr><td>location.replace()</td><td>替换当前页面，因不记录页面，所以不能后退</td></tr><tr><td>location.reload()</td><td>重新加载页面，相当于刷新按钮或者F5，若参数为true 则强制刷新（ctrl+f5）</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 1 替换当前页面，跳到指定页面后，无法后退</span></span><br><span class="language-javascript">            <span class="hljs-comment">// location.replace(&#x27;https://www.jd.com/&#x27;);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 2 跳到指定页面，可后退，同href</span></span><br><span class="language-javascript">            location.<span class="hljs-title function_">assign</span>(<span class="hljs-string">&#x27;https://www.jd.com/&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 3 重新加载</span></span><br><span class="language-javascript">            <span class="hljs-comment">// location.reload();</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>navigator对象包含有关浏览器的信息，有很多属性，最常用的是<code>userAgent</code>，该属性可以返回客户机发送服务器的user-agent头部的值</p><p>下面代码可以判断用户哪个终端打开页面，实现跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> ((navigetor.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">// 手机</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">// 电脑</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>window对象还提供了一个history对象，与浏览器历史记录进行交互，该对象<strong>包含用户（在浏览器窗口中）访问过的url</strong></p><table><thead><tr><th>history对象方法</th><th>作用</th></tr></thead><tbody><tr><td>back()</td><td>后退</td></tr><tr><td>forward()</td><td>前进</td></tr><tr><td>go(参数)</td><td>前进后退，参数为1时，前面1个页面，参数为-1时，后退1个页面</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.jd.com/&quot;</span>&gt;</span>点击进入京东首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back&quot;</span>&gt;</span>后退<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;forward&quot;</span>&gt;</span>前进<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> back = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.back&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> forward = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.forward&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        back.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            history.<span class="hljs-title function_">back</span>();</span><br><span class="language-javascript">            <span class="hljs-comment">// history.go(-1);</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        forward.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// history.forward();</span></span><br><span class="language-javascript">            history.<span class="hljs-title function_">go</span>(<span class="hljs-number">1</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="元素偏移量offset"><a href="#元素偏移量offset" class="headerlink" title="元素偏移量offset"></a>元素偏移量offset</h2><h3 id="offset概述"><a href="#offset概述" class="headerlink" title="offset概述"></a>offset概述</h3><p>offset偏移量，可使用offset相关属性动态得到元素的位置（偏移）、大小等</p><ul><li>获得元素距离带有定位父元素的位置</li><li>获得元素自身的大小（宽度高度）</li><li>注意：<strong>返回的数值都不带单位</strong></li></ul><p>常用属性</p><table><thead><tr><th>offset系列属性</th><th>作用</th></tr></thead><tbody><tr><td>elem.offsetParent</td><td>返回该元素带<strong>有定位</strong>的<strong>父元素</strong>；若父级没有定位，则返回body</td></tr><tr><td>elem.offsetTop</td><td>返回元素相对带有定位的父元素上方的偏移</td></tr><tr><td>elem.offsetLeft</td><td>返回元素相对带有定位的父元素左边的偏移</td></tr><tr><td>elem.offsetwidth</td><td>返回自身 包括<strong>padding、边框、内容</strong>区的宽度，返回数值<strong>不带单位</strong></td></tr><tr><td>elem.offsetHeight</td><td>返回自身 包括padding、边框、内容区的高度，返回数值不带单位</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> father = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.father&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> son = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.son&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 返回该元素带有定位的父元素；若父级没有定位，则返回body</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">offsetParent</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 返回元素相对带有定位的父元素上方的偏移</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">offsetLeft</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 返回元素相对带有定位的父元素左边的偏移</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">offsetTop</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 返回自身 包括padding、边框、内容区的宽度，返回数值不带单位</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">offsetWidth</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 返回自身 包括padding、边框、内容区的高度，返回数值不带单位</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">offsetHeight</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：offsetwidth和offsetHeight不包含margin</p><h3 id="offset与style区别"><a href="#offset与style区别" class="headerlink" title="==offset与style区别=="></a>==offset与style区别==</h3><table><thead><tr><th>offset</th><th>style</th></tr></thead><tbody><tr><td>可得到任意样式表中的样式值</td><td>只能得到<strong>行内样式</strong>表中的样式值</td></tr><tr><td>获得数值是没有单位的</td><td>获得的数值是带有单位的字符串</td></tr><tr><td>offsetWidth包含 padding+border+width</td><td>style.width不包含padding和border</td></tr><tr><td>offsetWidth等是只读属性，不可赋值更改</td><td>style.width是可读可写属性，可赋值</td></tr></tbody></table><blockquote><p>总结：</p><ul><li>获取元素大小位置，使用offset</li><li>更改元素属性值，使用style</li></ul></blockquote><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">style</span>.<span class="hljs-property">width</span>);   <span class="hljs-comment">// 空，style不是行内样式，无法获取</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span>);    <span class="hljs-comment">// 空，style不是行内样式，无法获取</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">offsetWidth</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="1-点击弹出登录框，登录框可拖动"><a href="#1-点击弹出登录框，登录框可拖动" class="headerlink" title="1 点击弹出登录框，登录框可拖动"></a>1 点击弹出登录框，登录框可拖动</h4><p>2022-4-20 08</p><h4 id="2-仿京东商品放大效果"><a href="#2-仿京东商品放大效果" class="headerlink" title="2 仿京东商品放大效果"></a>2 仿京东商品放大效果</h4><p>2022-4-21 01</p><h2 id="元素可视区client"><a href="#元素可视区client" class="headerlink" title="元素可视区client"></a>元素可视区client</h2><p>client 客户端，通过client系列相关属性可以获取元素可视区的相关的信息，可以动态的得到该元素的边框大小，元素大小等</p><table><thead><tr><th>client系列属性</th><th>作用</th></tr></thead><tbody><tr><td>elem.clientTop</td><td>返回元素上边框的大小</td></tr><tr><td>elem.clientLeft</td><td>返回元素左边框的大小</td></tr><tr><td>elem.clientWidth</td><td>返回自身包括padding 内容区的的宽度，不含边框，返回数值不带单位</td></tr><tr><td>elem.clientHeight</td><td>返回自身包括padding 内容区的的高度，不含边框，返回数值不带单位</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid <span class="hljs-number">#3aa</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">clientHeight</span>);  <span class="hljs-comment">// 50</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">clientWidth</span>);  <span class="hljs-comment">// 100</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">clientTop</span>);  <span class="hljs-comment">// 5</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">clientLeft</span>);  <span class="hljs-comment">// 5</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><p>无需调用，能立即执行的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 立即执行函数</span><br><span class="hljs-comment">// 写法,第二个小括号可以看作是调用函数</span><br><span class="hljs-comment">// 1 (function () &#123; &#125;)();</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);     <span class="hljs-comment">// 执行结果：2</span><br>&#125;)(<span class="hljs-number">2</span>);<br><span class="hljs-comment">// 2 (function () &#123; &#125;());</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);     <span class="hljs-comment">// 执行结果：2333</span><br>&#125;(<span class="hljs-number">2333</span>));<br><br><span class="hljs-comment">// 求两数之和的立即执行函数</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a + b); <span class="hljs-comment">// 执行结果：7</span><br>&#125;)(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><h3 id="淘宝flexible源码分析"><a href="#淘宝flexible源码分析" class="headerlink" title="淘宝flexible源码分析"></a>淘宝flexible源码分析</h3><p>不太理解，后续用到补上</p><h2 id="元素滚动scroll"><a href="#元素滚动scroll" class="headerlink" title="元素滚动scroll"></a>元素滚动scroll</h2><p>利用scroll可以动态获得该元素的大小、滚动距离等等</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220421161820005.png" alt="image-20220421161820005" style="zoom:67%;" /><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 其中div是高50px，宽100px的盒子 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;overflow:auto&quot;</span>&gt;</span>内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">clientHeight</span>);  <span class="hljs-comment">// 50</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">scrollHeight</span>);  <span class="hljs-comment">// 186</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><blockquote><p><strong>元素</strong>被卷去的头部是：elem.scrollTop</p></blockquote></li><li><blockquote><p><strong>页面</strong>被卷去的头部则是：window.pageYOffset;被卷去的左侧是 window.pageXOffset</p></blockquote></li><li><p>页面滚动事件 ：onscroll, scroll</p></li></ul><h3 id="三大系列总结"><a href="#三大系列总结" class="headerlink" title="三大系列总结"></a>三大系列总结</h3><table><thead><tr><th>三大系列大小对比</th><th>作用</th></tr></thead><tbody><tr><td>elem.offsetWidth</td><td>返回自身 包括<strong>padding、边框、内容</strong>区的宽度，返回数值<strong>不带单位</strong></td></tr><tr><td>elem.clientWidth</td><td>返回自身 包括<strong>padding、内容</strong>区的宽度，返回数值<strong>不带单位</strong></td></tr><tr><td>elem.scrollWidth</td><td>返回自身 实际的宽度，不含边框，返回数值<strong>不带单位</strong></td></tr></tbody></table><blockquote><p><strong>主要用途：</strong></p></blockquote><ul><li><p>获取元素位置：offsetLeft offsetTop</p></li><li><p>获取元素大小：clientwidth clientHeight</p></li><li><p>获取滚动距离: scrollTop scrollLeft</p></li><li><p><strong>页面</strong>滚动距离：window.pageYOffset</p></li></ul><h2 id="mouseenter与mouseover的区别"><a href="#mouseenter与mouseover的区别" class="headerlink" title="mouseenter与mouseover的区别"></a>mouseenter与mouseover的区别</h2><ul><li>当鼠标移动到元素上时会触发mouseenter事件</li><li>类似mouseover，但mouseover经过自身盒子和其子盒子都会触发；mouseenter只有经过自身才会触发</li><li>即mouseenter不会冒泡</li><li>与mouseenter相对应的是的mouseleave，同样不会冒泡</li></ul><h2 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>核心原理：通过定时器setinterval()不断移动盒子</p><p>步骤：</p><ol><li>获得盒子当前位置</li><li>让盒子在当前位置上加一个移动距离</li><li>利用定时器不断重复这个操作</li><li>加一个结束定时器的条件</li><li>注意此元素<strong>需要添加定位，才能使用</strong>elem.style.left</li></ol><p>让盒子div移动一段距离</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// btn.onclick = animate(div);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// btn.addEventListener(&#x27;click&#x27;, animate(div));</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (div.<span class="hljs-property">offsetLeft</span> &gt;= <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            div.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = div.<span class="hljs-property">offsetLeft</span> + <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">        &#125;, <span class="hljs-number">50</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="函数封装"><a href="#函数封装" class="headerlink" title="函数封装"></a>函数封装</h3><h4 id="版本1-点击后匀速移动"><a href="#版本1-点击后匀速移动" class="headerlink" title="版本1-点击后匀速移动"></a>版本1-点击后匀速移动</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>开始<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 给不同的对象指定不同的定时器——通过对象属性、方法实现</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj, target</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 给obj新建一个timer属性</span></span><br><span class="language-javascript">            obj.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">offsetLeft</span> &gt;= target) &#123;</span><br><span class="language-javascript">                    <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">50</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// animate(div, 200);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// bug：点击次数越多，盒子速度越快</span></span><br><span class="language-javascript">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">animate</span>(span, <span class="hljs-number">200</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>问题bug：</p><ul><li>通过点击触发盒子移动，点击次数越多，盒子移动越快</li></ul><p>原因：</p><ul><li>不断点击按钮，会触发多个定时器，导致速度越来越快</li></ul><p>解决：</p><ul><li>定时器每次触发前，清除之前的定时器</li></ul><h4 id="版本2-修复多次点击加速"><a href="#版本2-修复多次点击加速" class="headerlink" title="版本2-修复多次点击加速"></a>版本2-修复多次点击加速</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>开始<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 给不同的对象指定不同的定时器——通过对象属性、方法实现</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj, target</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 清除上一个定时器，只留下一个定时器执行</span></span><br><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 给obj新建一个timer属性</span></span><br><span class="language-javascript">            obj.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">offsetLeft</span> &gt;= target) &#123;</span><br><span class="language-javascript">                    <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">50</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// animate(div, 200);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">animate</span>(span, <span class="hljs-number">200</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>问题：</p><ul><li>如何实现缓动效果？</li></ul><p>解决：</p><ul><li>原理：让元素运动速度有所变化，常见的是让速度慢慢变小，盒子缓慢停下来</li><li>即让盒子每次移动地距离变小，速度就慢慢落下来了</li><li>核心算法：（目标值-现在的位置)/10 作为每次移动的距离</li></ul><h4 id="版本3-利用步长实现缓动"><a href="#版本3-利用步长实现缓动" class="headerlink" title="版本3-利用步长实现缓动"></a>版本3-利用步长实现缓动</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>开始<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 给不同的对象指定不同的定时器——通过对象属性、方法实现</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj, target</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 清除上一个定时器，只留下一个定时器执行</span></span><br><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 给obj新建一个timer属性</span></span><br><span class="language-javascript">            obj.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 在定时器里面添加一个步长</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> step = (target - obj.<span class="hljs-property">offsetLeft</span>) / <span class="hljs-number">10</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">offsetLeft</span> &gt;= target) &#123;</span><br><span class="language-javascript">                    <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-comment">// 用当前位置加上步长，步长由于对象离目标值越近而减小，步长 = (目标值-当前位置）/ 10</span></span><br><span class="language-javascript">                obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + step + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">15</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 一般间隔15毫秒</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// animate(div, 200);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">animate</span>(span, <span class="hljs-number">200</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>步长 = (目标值 - 当前位置）/ 10</li><li>setInterval定时器一般间隔15毫秒</li></ul><p>问题：</p><ul><li>无法准确的到达目标位置target，总是差一点</li></ul><p>解决：</p><ul><li>原因：由于计算步长时出现的小数，多次叠加导致</li><li>利用向上取整，Math.ceil</li><li><strong>此处向上取整和向下取整，结果不一致，不是很理解，向下取整还是无法准确的到达目标位置</strong></li></ul><h4 id="版本4-步长取整"><a href="#版本4-步长取整" class="headerlink" title="版本4-步长取整"></a>版本4-步长取整</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>开始<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 给不同的对象指定不同的定时器——通过对象属性、方法实现</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj, target</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 清除上一个定时器，只留下一个定时器执行</span></span><br><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 给obj新建一个timer属性</span></span><br><span class="language-javascript">            obj.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 在定时器里面添加一个步长</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 将步长改为整数</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> step = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>((target - obj.<span class="hljs-property">offsetLeft</span>) / <span class="hljs-number">10</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">offsetLeft</span> &gt;= target) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 停止动画，本质是停止定时器。</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">offsetLeft</span>);</span><br><span class="language-javascript">                    <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-comment">// 用当前位置加上步长，步长由于对象离目标值越近而减小，步长 = (目标值 - 当前位置）/ 10</span></span><br><span class="language-javascript">                obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + step + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">15</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// animate(div, 200);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">animate</span>(span, <span class="hljs-number">350</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>更改了步长，让步长取整</li></ul><h4 id="版本5-处理正负步长"><a href="#版本5-处理正负步长" class="headerlink" title="版本5-处理正负步长"></a>版本5-处理正负步长</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn500&quot;</span>&gt;</span>btn500<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn800&quot;</span>&gt;</span>btn800<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn500 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.btn500&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn800 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.btn800&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 给不同的对象指定不同的定时器——通过对象属性、方法实现</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj, target</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 清除上一个定时器，只留下一个定时器执行</span></span><br><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 给obj新建一个timer属性</span></span><br><span class="language-javascript">            obj.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 在定时器里面添加一个步长</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 将步长改为整数</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> step = (target - obj.<span class="hljs-property">offsetLeft</span>) / <span class="hljs-number">10</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 若步长为正，向上取整，步长为负，向下取整</span></span><br><span class="language-javascript">                step = step &gt; <span class="hljs-number">0</span> ? <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(step) : <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(step);</span><br><span class="language-javascript">                <span class="hljs-comment">// 由于步长可正可负，故此处不能再使用元素位置大于目标位置来判断，应该使用是否等于目标位置来判断</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">offsetLeft</span> == target) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 停止动画，本质是停止定时器。</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">offsetLeft</span>);</span><br><span class="language-javascript">                    <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-comment">// 用当前位置加上步长，步长由于对象离目标值越近而减小，步长 = (目标值 - 当前位置）/ 10</span></span><br><span class="language-javascript">                obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + step + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">15</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// animate(div, 200);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        btn500.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">animate</span>(span, <span class="hljs-number">350</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        btn800.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">animate</span>(span, <span class="hljs-number">500</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>步长可正可负：若步长为正，向上取整，步长为负，向下取整</li><li>由于步长可正可负，故不能再使用 元素位置是否大于目标位置 来判断，应该使用 <strong>是否等于目标位置</strong> 来判断</li></ul><h4 id="版本6-添加回调函数"><a href="#版本6-添加回调函数" class="headerlink" title="版本6-添加回调函数"></a>版本6-添加回调函数</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn500&quot;</span>&gt;</span>btn500<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn800&quot;</span>&gt;</span>btn800<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn500 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.btn500&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn800 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.btn800&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 给不同的对象指定不同的定时器——通过对象属性、方法实现</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj, target, callback</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 清除上一个定时器，只留下一个定时器执行</span></span><br><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 给obj新建一个timer属性</span></span><br><span class="language-javascript">            obj.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 在定时器里面添加一个步长</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 将步长改为整数</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> step = (target - obj.<span class="hljs-property">offsetLeft</span>) / <span class="hljs-number">10</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 若步长为正，向上取整，步长为负，向下取整</span></span><br><span class="language-javascript">                step = step &gt; <span class="hljs-number">0</span> ? <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(step) : <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(step);</span><br><span class="language-javascript">                <span class="hljs-comment">// 由于步长可正可负，故此处不能再使用元素位置大于目标位置来判断，应该使用是否等于目标位置来判断</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">offsetLeft</span> == target) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 停止动画，本质是停止定时器。</span></span><br><span class="language-javascript">                    <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);</span><br><span class="language-javascript">                    <span class="hljs-comment">// 回调函数写在定时器结束后</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (callback) &#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">callback</span>();</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-comment">// 用当前位置加上步长，步长由于对象离目标值越近而减小，步长 = (目标值 - 当前位置）/ 10</span></span><br><span class="language-javascript">                obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + step + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">15</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// animate(div, 200);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        btn500.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 回调函数可省</span></span><br><span class="language-javascript">            <span class="hljs-title function_">animate</span>(span, <span class="hljs-number">500</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        btn800.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 移动到800后，执行函数sayHi</span></span><br><span class="language-javascript">            <span class="hljs-title function_">animate</span>(span, <span class="hljs-number">800</span>, sayHi);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;已结束&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>回调函数应该再定时器结束后执行</li><li>回调函数可省，即如果if(callback) 为真，才执行，否则没有回调函数</li></ul><h2 id="常见网页特效案例"><a href="#常见网页特效案例" class="headerlink" title="常见网页特效案例"></a>常见网页特效案例</h2><h3 id="轮播图案例"><a href="#轮播图案例" class="headerlink" title="轮播图案例"></a>轮播图案例</h3><h4 id="节流阀"><a href="#节流阀" class="headerlink" title="节流阀"></a>节流阀</h4><p>防止轮播图按钮连续点击造成播放速度过快</p><p>节流阀目的：当上一个函数动画内容执行完毕，再去执行下一个函数动画，然时间无法连续触发</p><p>核心实现思路：利用回调函数，添加一个变量来控制，锁住函数和解锁函数</p><p>步骤：</p><ul><li>开始设置一个变量 var flag = true</li><li>if (flag) {flag = false; do something} 关闭水龙头</li><li>利用回调函数，在动画执行完毕后，flag = true 打开水龙头</li></ul><h3 id="筋斗云案例"><a href="#筋斗云案例" class="headerlink" title="筋斗云案例"></a>筋斗云案例</h3><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>window.sessionStorage</p><p>window.localStorage</p><table><thead><tr><th>window.sessionStorage</th><th>window.localStorage</th></tr></thead><tbody><tr><td>生命周期为关闭浏览器窗口</td><td>生命周期永久有效</td></tr><tr><td>在同一个窗口（页面）下数据可以共享</td><td>可以多窗口（页面）共享，即同一浏览器共享</td></tr><tr><td>以键值对的形式存储使用</td><td>以键值对的形式存储使用</td></tr><tr><td>存储数据：sessionStorage.setItem(key,value)</td><td>存储数据：localStorage.setItem(key,value)</td></tr><tr><td>获取数据：sessionStorage.getItem(key)</td><td>获取数据：localStorage.getItem(key)</td></tr><tr><td>删除数据：sessionStorage.removeItem(key)</td><td>删除数据：localStorage.removeItem(key)</td></tr><tr><td>删除所有数据：sessionStorage.clear()</td><td>删除所有数据：localStorage.clear()</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">待补充<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>JS语法</category>
      
      <category>WebAPI</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DOM</title>
    <link href="/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/WebAPI/DOM/"/>
    <url>/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/WebAPI/DOM/</url>
    
    <content type="html"><![CDATA[<h1 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h1><p>DOM即 Document Object Model 文档对象模型</p><h2 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h2><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220411172758026.png" alt="image-20220411172758026"></p><ul><li>文档：一个页面就是一个文档，DOM中使用 document 表示</li><li>元素：页面中所有标签都是元素，DOM中使用 element 表示</li><li>节点：网页中所有内容都是节点（标签、属性、文本、注释、换行等），DOM使用 node表示</li></ul><p>DOM将以上内容都看作对象</p><h2 id="如何获取元素"><a href="#如何获取元素" class="headerlink" title="如何获取元素"></a>如何获取元素</h2><ul><li>根据ID获取</li><li>根据标签名获取</li><li>通过HTML5新增的方法获取</li><li>特殊元素获取</li></ul><h3 id="id获取元素"><a href="#id获取元素" class="headerlink" title="id获取元素"></a>id获取元素</h3><blockquote><p>var element = document.getElementById(id);</p></blockquote><ul><li>element是一个Element对象，</li><li>id是大小写敏感的字符串，代表了要查找元素的唯一ID</li><li>返回值是 一个匹配到ID的DOM Element对象，若在当前Document下没有找到，则返回null</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span>2022-4-11<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> time = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;time&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(time);          <span class="hljs-comment">// &lt;div id=&quot;time&quot;&gt;2022-4-11&lt;/div&gt;</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> time);   <span class="hljs-comment">// object</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(time);          <span class="hljs-comment">// console.dir打印返回元素对象、可查看里面的属性和方法</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>由于文档是从上往下加载，因此需要先写标签，再写script</li><li>参数id是<strong>大小写敏感</strong>的<strong>字符串</strong></li><li>返回的是一个元素<strong>对象</strong></li><li>console.dir(元素对象) 打印返回元素对象、可查看里面的属性和方法</li></ul><h3 id="标签名获取元素"><a href="#标签名获取元素" class="headerlink" title="标签名获取元素"></a>标签名获取元素</h3><p>使用getElementsByTagName()方法返回带有标签名的对象的集合</p><blockquote><p>var element = document.getElementByTagName(‘标签名’);</p></blockquote><p>注意:</p><ul><li>由于通过标签名获取元素是一个对象的<strong>集合</strong>,所以要想操作里面的元素就需要遍历</li><li>得到的元素是动态的</li><li>返回值是 获取的对象的集合，并以<strong>伪数组</strong>的形式存储</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 返回值是 获取的对象的集合，并以伪数组的形式存储</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lis);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lis[<span class="hljs-number">0</span>]);</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">// 可采取遍历的方式依次访问获取的对象集合</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lis[i]);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">// 若文档中有多个多个标签，且只想获取其中某些标签,如只想打印第二个ul中的li</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> nav = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;nav&#x27;</span>);   <span class="hljs-comment">// 先通过id获取第二个ul元素</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> navLis = nav.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<span class="hljs-comment">// 再通过标签名获取ul里面的li</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="HTML5方法获取元素"><a href="#HTML5方法获取元素" class="headerlink" title="HTML5方法获取元素"></a>HTML5方法获取元素</h3><ol><li><p>根据类名返回元素对象集合</p><blockquote><p>var element = document.getElementByClassName(‘类名’);</p></blockquote></li><li><p>根据指定选择器返回第一个元素对象</p><blockquote><p>var element = document.querySelector(‘选择器’);</p></blockquote></li><li><p>根据指定选择器返回对象集合</p><blockquote><p>var element = document.querySelectorAll(‘选择器’);</p></blockquote></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是box1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是box2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span>我是nav1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span>我是nav2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// getElementsByClassName</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;box&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(box);</span><br><span class="language-javascript">        <span class="hljs-comment">// querySelector 返回指定选择器的第一个元素对象， 里面的选择器需要加符号！</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> firstBox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(firstBox);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> firstnav = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#nav&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(firstnav);</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> allNav = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;#nav&#x27;</span>); <span class="hljs-comment">// 选中所有的id选择器</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(allNav);</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> allLi = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>)     <span class="hljs-comment">// 选中所有的li</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(allLi);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意:</p><ul><li><p>querySelector 返回指定选择器的第一个元素对象， 里面的选择器需要加符号</p><p>若是id选择器,则需要在id名前加 # ;</p><p>若是类选择器,则需要在类名前加 . ;</p></li><li><p>querySelectorAll 返回指定选择器的所有元素对象</p></li></ul><h3 id="特殊获取元素"><a href="#特殊获取元素" class="headerlink" title="特殊获取元素"></a>特殊获取元素</h3><h4 id="获取body元素"><a href="#获取body元素" class="headerlink" title="获取body元素"></a>获取body元素</h4><p>返回body对象</p><blockquote><p>document.body;</p></blockquote><h4 id="获取html元素"><a href="#获取html元素" class="headerlink" title="获取html元素"></a>获取html元素</h4><p>返回html</p><blockquote><p style="color:red">document.documentElement;</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取body元素</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> bodyElem = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bodyElem);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取html元素</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> htmlElem = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(htmlElem);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="star-总结获取元素"><a href="#star-总结获取元素" class="headerlink" title=":star:总结获取元素"></a>:star:总结获取元素</h3><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>.getElementById(id)</td><td>返回一个匹配到ID的DOM Element对象</td></tr><tr><td>.getElementByTagName(‘标签名’)</td><td>返回带有标签名的对象的集合</td></tr><tr><td>.getElementByClassName(‘类名’)</td><td>(H5新增)根据类名返回元素对象集合</td></tr><tr><td>.querySelector(‘选择器’)</td><td>(H5新增)根据指定选择器返回第一个元素对象</td></tr><tr><td>.querySelectorAll(‘选择器’)</td><td>(H5新增)根据指定选择器返回对象集合</td></tr><tr><td>document.body</td><td>获取body元素</td></tr><tr><td>document.documentElement</td><td>获取html元素</td></tr></tbody></table><h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><h3 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h3><ul><li>事件源</li><li>事件类型</li><li>事件处理程序</li></ul><p>示例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 1. 事件源 —— 按钮</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btn&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 2. 事件类型 —— 鼠标点击onclick</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 3. 事件处理程序 —— 函数function</span></span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;提交成功！&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="执行事件的步骤"><a href="#执行事件的步骤" class="headerlink" title="执行事件的步骤"></a>执行事件的步骤</h3><ul><li>获取事件源</li><li>注册事件(绑定事件)</li><li>添加事件处理程序(采取函数赋值形式)</li></ul><p>示例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 1. 获取事件源</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 2. 注册事件（绑定事件）</span></span><br><span class="language-javascript">        <span class="hljs-comment">// div.onclick</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 3. 添加事件处理程序</span></span><br><span class="language-javascript">        div.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;div被点击了&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="star-常见的鼠标事件"><a href="#star-常见的鼠标事件" class="headerlink" title=":star:常见的鼠标事件"></a>:star:常见的鼠标事件</h3><table><thead><tr><th>鼠标事件</th><th>触发事件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><p>Javascript的DOM操作可以改变网页内容, 结构和样式.可以利用DOM操作元素来改变元素里面的内容 属性等</p><h3 id="修改元素内容"><a href="#修改元素内容" class="headerlink" title="修改元素内容"></a>修改元素内容</h3><ol><li><p>从起始位置到终止位置的内容,但它除去html标签,同时空格和换行也都会去掉</p><blockquote><p>element.innerText(‘要改为的内容’);</p></blockquote></li><li><p>从起始位置到终止位置的全部内容,包括html标签,同时保留空格和换行</p><blockquote><p>element.innerHTML(‘要改为的内容’);</p></blockquote></li></ol><p>案例:点击按钮后，div中的文字发生变化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 案例：点击按钮后，div中的文字发生变化 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>日期<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 1 获取元素</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 2 注册事件 添加事件处理程序</span></span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// div.innerText = &#x27;2022-4-12&#x27;;</span></span><br><span class="language-javascript">            div.<span class="hljs-property">innerText</span> = <span class="hljs-title function_">getDate</span>();</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">getDate</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">            <span class="hljs-comment">// 当前年</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> year = now.<span class="hljs-title function_">getFullYear</span>();</span><br><span class="language-javascript">            <span class="hljs-comment">// 当月的上一个月,故要加1</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> month = now.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">// 当前日期（几号）</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> date = now.<span class="hljs-title function_">getDate</span>();</span><br><span class="language-javascript">            <span class="hljs-comment">// 星期几（返回为 0~6，周日是0）</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> day = now.<span class="hljs-title function_">getDay</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> week = [<span class="hljs-string">&#x27;星期日&#x27;</span>, <span class="hljs-string">&#x27;星期一&#x27;</span>, <span class="hljs-string">&#x27;星期二&#x27;</span>, <span class="hljs-string">&#x27;星期三&#x27;</span>, <span class="hljs-string">&#x27;星期四&#x27;</span>, <span class="hljs-string">&#x27;星期五&#x27;</span>, <span class="hljs-string">&#x27;星期六&#x27;</span>];</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> year + <span class="hljs-string">&#x27;年&#x27;</span> + month + <span class="hljs-string">&#x27;月&#x27;</span> + date + <span class="hljs-string">&#x27;号 &#x27;</span> + week[day];</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">// 若要实现直接刷新页面就显示,可以不用添加事件.如下:</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p&#x27;</span>);</span><br><span class="language-javascript">        p.<span class="hljs-property">innerHTML</span> = <span class="hljs-title function_">getDate</span>();</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="innerText和innerHTML"><a href="#innerText和innerHTML" class="headerlink" title="innerText和innerHTML"></a>innerText和innerHTML</h4><ul><li>innertext不识别HTML</li><li>innerHTML识别HTML</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// div.innerText = &#x27;innertext&lt;strong&gt;不识别HTML&lt;/strong&gt;&#x27;;  </span></span><br><span class="language-javascript">        <span class="hljs-comment">// 执行结果为：innertext&lt;strong&gt;不识别HTML&lt;/strong&gt;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;innerHTML&lt;strong&gt;识别HTML&lt;/strong&gt;&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">// 执行结果为：innerHTML识别HTML，“识别HTML”被加粗</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="修改元素属性"><a href="#修改元素属性" class="headerlink" title="修改元素属性"></a>修改元素属性</h3><p>常用元素的属性操作: src, href, id, alt, title</p><p>示例1:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>图片1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>图片2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/img (1).jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;图片1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.btn1&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.btn2&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        btn1.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            img.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;images/img (1).jpg&#x27;</span>;</span><br><span class="language-javascript">            img.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;图片1&quot;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        btn2.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            img.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;images/img (2).jpg&#x27;</span>;</span><br><span class="language-javascript">            img.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;图片2&quot;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例2:分时问候,并显示不同的提示语,步骤如下</p><ol><li>根据系统不同事件来判断,需要用到日期内置对象</li><li>利用多分支语句来设置不同的图片</li><li>需要一个图片,并且根据时间修改图片,需要用到src</li><li>需要一个div来显示不同的问候语</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 分时问候,并显示不同的提示语,步骤如下：</span><br><span class="hljs-comment">    1. 根据系统不同事件来判断,需要用到日期内置对象</span><br><span class="hljs-comment">    2. 利用多分支语句来设置不同的图片</span><br><span class="hljs-comment">    3. 需要一个图片,并且根据时间修改图片,需要用到src</span><br><span class="hljs-comment">    4. 需要一个div来显示不同的问候语 </span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/img (1).jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;greeting&quot;</span>&gt;</span>早上好~<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 1 获取元素</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;greeting&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 得到当前小时数</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> hours = now.<span class="hljs-title function_">getHours</span>();</span><br><span class="language-javascript">        <span class="hljs-comment">// 判断小时数来改变问候语以及显示的图片</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (hours &lt; <span class="hljs-number">6</span>) &#123;</span><br><span class="language-javascript">            div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;好好睡觉~&#x27;</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hours &lt; <span class="hljs-number">12</span>) &#123;</span><br><span class="language-javascript">            img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;images/img (1).jpg&quot;</span></span><br><span class="language-javascript">            div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;早上好~&#x27;</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hours &lt; <span class="hljs-number">18</span>) &#123;</span><br><span class="language-javascript">            img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;images/img (2).jpg&quot;</span></span><br><span class="language-javascript">            div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;下午好~&#x27;</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hours &lt; <span class="hljs-number">24</span>) &#123;</span><br><span class="language-javascript">            div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;晚上好~&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表单属性操作"><a href="#表单属性操作" class="headerlink" title="表单属性操作"></a>表单属性操作</h3><p>type value checked selected disabled</p><h4 id="修改表单内容value"><a href="#修改表单内容value" class="headerlink" title="修改表单内容value"></a>修改表单内容value</h4><p>表单里面的值不能用innerHTML或者innerText来更改,而是通过表单属性value来更改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;输入文本&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 此处不是通过innerHTML来修改的表单内容</span></span><br><span class="language-javascript">            input.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;已提交&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 按钮点击一次后禁用：disabled</span></span><br><span class="language-javascript">            <span class="hljs-comment">// btn.disabled = true; // 禁用按钮</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;   <span class="hljs-comment">// 禁用按钮，this指向的是事件函数的调用者btn</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意:</p><ul><li>通过表单的value来修改的表单内容,不是innerHTML</li><li>this指向的是事件函数的调用者btn</li></ul><h4 id="案例-仿京东显示密码"><a href="#案例-仿京东显示密码" class="headerlink" title="案例-仿京东显示密码"></a>案例-仿京东显示密码</h4><h3 id="样式属性操作"><a href="#样式属性操作" class="headerlink" title="样式属性操作"></a>样式属性操作</h3><p>可以通过JS修改元素的大小 颜色 位置等样式</p><ol><li><p>行内样式操作</p><blockquote><p>element.style</p></blockquote></li><li><p>类名样式操作</p><blockquote><p>element.className</p></blockquote></li><li></li></ol><p><strong>注意:</strong></p><p style="color:red">JS里面的样式采取驼峰命名法 如:fontSize backgrounColor</p><p style="color:red">JS修改style样式操作,产生的是行内样式, css权重比较高</p><h4 id="行内样式操作"><a href="#行内样式操作" class="headerlink" title="行内样式操作"></a>行内样式操作</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        123<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        div.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;blue&#x27;</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&#x27;300px&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在JS中修改元素样式:</p><p>this.style.backgroundColor = ‘blue’;<br>this.style.width = ‘300px’; </p><h4 id="类名样式操作"><a href="#类名样式操作" class="headerlink" title="类名样式操作"></a>类名样式操作</h4><ul><li><p>需修改样式较多的时候，可以采取操作类名方式更改元素样式</p></li><li><p>class因为是个保留字，因此使用<strong>className</strong>来操作元素类名属性</p></li><li><p>className会直接更改元素的类名，会<strong>覆盖</strong>原来的类名</p></li><li><p>若不想原来的类名被覆盖，则在更改元素类名时 需要将<strong>原来的和添加的类型名一并写上</strong>，相当于多类名</p><blockquote><p>如：div.className = ‘box change’;</p></blockquote></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            京东JD.COM-专业的综合网上购物商城,为您提供正品低价的购物选择、优质便捷的服务体验。<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 若触发事件要更改多个样式，这样会产生很多JS的代码</span></span><br><span class="language-javascript">        <span class="hljs-comment">// div.onclick = function () &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     this.style.backgroundColor = &#x27;skyblue&#x27;;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     this.style.width = &#x27;250px&#x27;;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     this.style.height = &#x27;250px&#x27;;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     this.style.border = &#x27;1px dashed #000&#x27;;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     p.style.color = &#x27;yellow&#x27;;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 若样式更改较多，可将其在CSS中一并更改,包装到一个类中，当事件触发时将其赋给相关元素</span></span><br><span class="language-javascript">        div.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 若元素div原来有类名，则会覆盖原来的类名</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;change&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h3><h4 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h4><p>若有同一组元素，想要某一个元素实现某种样式，则需要用到循环的排他思想：</p><ol><li>给所有元素清除样式（干掉别人）</li><li>给当前元素设置样式（留下自己）</li><li>注意顺序，不能颠倒</li></ol><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btns = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 运用了排他思想</span></span><br><span class="language-javascript">            btns[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 1 先清除所有按钮的背景颜色</span></span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                    btns[i].<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-comment">// 2 再给点击按钮赋予背景颜色</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 这里要写this 不能写btns[i]会报错</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;pink&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="案例-更换背景图"><a href="#案例-更换背景图" class="headerlink" title="案例-更换背景图"></a>案例-更换背景图</h4><p>核算思想：将当前图片的路径src获取过来后，给body作为背景即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/背景1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/背景2.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/背景3.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 1 获取元素</span></span><br><span class="language-javascript">        <span class="hljs-comment">// img是ul里面的,因此可以写详细些</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> imgs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>).<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> body = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 循环注册事件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; imgs.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            imgs[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 获取当前图片的路径this.src   将当前图片的路径给body作为背景</span></span><br><span class="language-javascript">                <span class="hljs-comment">// console.log(this.src);</span></span><br><span class="language-javascript">                body.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundImage</span> = <span class="hljs-string">&#x27;url(&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">src</span> + <span class="hljs-string">&#x27;)&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><p>img是ul里面的,因此可以写详细些</p><p>document.querySelector(‘ul’).getElementsByTagName(‘img’);</p></li><li><p>获取当前图片路径</p><p>this.src</p></li><li><p>JS更改body的背景图：</p><p style='color:red'>body.style.<strong>backgroundImage</strong> = 'url(' <strong>+ this.src +</strong> ')';</p></li></ul><h4 id="案例-鼠标经过表格变色"><a href="#案例-鼠标经过表格变色" class="headerlink" title="案例-鼠标经过表格变色"></a>案例-鼠标经过表格变色</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>代码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>最新价<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>涨跌额<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>涨跌幅<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>0040<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>万嘉集团<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>0.191<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>+0.051<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>+36.429%<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>0040<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>万嘉集团<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>0.191<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>+0.051<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>+36.429%<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> trs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;tbody&#x27;</span>).<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;tr&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 循环绑定注册事件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; trs.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 当鼠标经过事件 </span></span><br><span class="language-javascript">            trs[i].<span class="hljs-property">onmouseover</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;bg&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 当鼠标离开事件</span></span><br><span class="language-javascript">            trs[i].<span class="hljs-property">onmouseout</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="案例-全选反选"><a href="#案例-全选反选" class="headerlink" title="案例-全选反选"></a>案例-全选反选</h4><p>分析：两种情况</p><ul><li><strong>点击第一个选框</strong>：第一个选中，下面全选；第一个不选，下面全不选<ul><li>具体思想：第一个选框的状态决定了下面所有选框的状态，因此当鼠标点击第一个选框的时候，将下面所有选框的属性值赋予第一个选框相同的值即可</li></ul></li><li><strong>点击下面的选框</strong>：只要下面全选，第一个才选；下面有一个不选，第一个也不选<ul><li>具体思想：选中下面任意一个选框时，都需要判断此时下面所有选框是否被选中，若有一个不被选中，则第一个选框不选。可设置一个flag，每次点击下面的选框，flag均置为1，再循环判断是否有不被选中的，若是则flag置为0，跳出判断；将第一个选框的值置为flag</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>商品<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价钱<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>iPhone11<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>8000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>iPhone11<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>8000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>iPhone11<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>8000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取元素</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> th = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;thead&#x27;</span>).<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> tds = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;tbody&#x27;</span>).<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 注册事件</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 1 第一个选中，下面全选；第一个不选，下面全不选</span></span><br><span class="language-javascript">        th.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 第一个选框的状态决定了下面所有选框的状态，因此当鼠标点击第一个选框的时候，将下面所有选框的属性值赋予第一个选框相同的值即可</span></span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; tds.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                tds[i].<span class="hljs-property">checked</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 2 只要下面全选，第一个才选；下面有一个不选，第一个也不选</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; tds.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            tds[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> flag = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 每选中一个，就要判断下面所有是否都选中</span></span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; tds.<span class="hljs-property">length</span>; j++) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (!tds[j].<span class="hljs-property">checked</span>) &#123;</span><br><span class="language-javascript">                        flag = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                th.<span class="hljs-property">checked</span> = flag;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例效果：</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220414101252051.png" alt="image-20220414101252051"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220414101311355.png" alt="image-20220414101311355"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220414101335411.png" alt="image-20220414101335411"></p><h3 id="自定义属性-的操作"><a href="#自定义属性-的操作" class="headerlink" title="==自定义属性==的操作"></a>==自定义属性==的操作</h3><h4 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h4><p>两种方法：</p><ul><li><p>element.属性 获取属性值</p><p>主要用于获取内置属性值（即元素本身自带的属性）</p></li><li><p><strong>element.getAttribute(‘属性’)</strong></p><p>主要用于获取自定义的属性（标准），即程序员自定义的属性</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">id</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;id&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;index&#x27;</span>));</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="设置属性值"><a href="#设置属性值" class="headerlink" title="设置属性值"></a>设置属性值</h4><p>两种方式：</p><ul><li><p>element.属性 = ‘值’</p><p>用于设置内置属性</p></li><li><p><strong>element.setAttribute(‘属性’, ‘值’)</strong></p><p>主要用于设置自定义的属性（标准）</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">// 方式一<br>div.id = &#x27;test&#x27;;<br>div.className = &#x27;temps&#x27;;<br>div.index = &#x27;999&#x27;;<br><br>// 方式二<br>div.setAttribute(&#x27;id&#x27;, &#x27;123&#x27;);<br>div.setAttribute(&#x27;class&#x27;, &#x27;tempss&#x27;);//  注意此处用的是 &#x27;class&#x27;,而不是&#x27;className&#x27;<br>div.setAttribute(&#x27;index&#x27;, &#x27;10&#x27;);<br></code></pre></td></tr></table></figure><blockquote><p>注意区别：一个是 className 一个是 class</p><ul><li>div.className = ‘temps’;</li><li>div.setAttribute(‘class’, ‘tempss’);</li></ul></blockquote><h4 id="移除属性值"><a href="#移除属性值" class="headerlink" title="移除属性值"></a>移除属性值</h4><p><strong>elenment.removeAttribute(‘属性’)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">div.removeAttribute(&#x27;class&#x27;);<br>console.log(div.className);     // 空<br></code></pre></td></tr></table></figure><h4 id="案例-tab栏切换"><a href="#案例-tab栏切换" class="headerlink" title="案例-tab栏切换"></a>案例-tab栏切换</h4><p>pink老师做法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> titles = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.title&#x27;</span>).<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(titles);</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> details = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.detail&#x27;</span>).<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(details);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; titles.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 为titles里面的li设置一个新的属性index,用于显示详情的索引</span></span><br><span class="language-javascript">        titles[i].<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;index&#x27;</span>, i);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        titles[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 1. 以下为标题点击模块</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 干掉所有人：清除title里面所有li的class</span></span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; titles.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                titles[i].<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 留下自己：保留当前li的class</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;bg&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 2. 以下为显示详情模块</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;index&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 干掉其他人：将detail里所有li隐藏</span></span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; details.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                details[i].<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 留下自己：将当前li显示</span></span><br><span class="language-javascript">            details[index].<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>闭包做法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> titles = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.title&#x27;</span>).<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(titles);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> details = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.detail&#x27;</span>).<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(details);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; titles.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 使用闭包解决i值</span></span><br><span class="language-javascript">        (<span class="hljs-keyword">function</span> (<span class="hljs-params">i</span>) &#123;</span><br><span class="language-javascript">            titles[i].<span class="hljs-property">onmouseover</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;red&#x27;</span>;</span><br><span class="language-javascript">                details[i].<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            titles[i].<span class="hljs-property">onmouseout</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">                details[i].<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)(i)</span><br><span class="language-javascript">    &#125; </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="H5自定义属性"><a href="#H5自定义属性" class="headerlink" title="H5自定义属性"></a>H5自定义属性</h4><p>目的：为了保存并使用数据，有些数据可以保存到页面中而不用保存到数据库中</p><p>为了区别是自定义属性还是内置属性，H5规定自定义属性以 data- 开头作为属性名并赋值</p><p><strong>设置H5自定义属性</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者利用JS设置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">element.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;data-index&#x27;</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p><strong>获取H5自定义属性</strong></p><ol><li><p>兼容性获取（用得更多）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">element.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-index&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>H5新增(存在兼容性问题，ie11才支持)</p><p style="color:red">注意：只能获取以data-开头的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">element.<span class="hljs-property">dataset</span>.<span class="hljs-property">index</span><br>或者<br>element.<span class="hljs-property">dataset</span>[<span class="hljs-string">&#x27;index&#x27;</span>]<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">data-index</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;temp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;demo&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 方式1: elem.getAttribute(&#x27;属性名&#x27;)</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-index&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-comment">// 方式2: elem.dataset[&#x27;属性名去掉data&#x27;]</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">dataset</span>[<span class="hljs-string">&#x27;index&#x27;</span>]);</span><br><span class="language-javascript">        <span class="hljs-comment">// 方式3: elem.dataset.去掉data的属性名</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">dataset</span>.<span class="hljs-property">index</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="star-总结属性操作"><a href="#star-总结属性操作" class="headerlink" title=":star:总结属性操作"></a>:star:总结属性操作</h2><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>element.style</td><td>获取内置属性值</td></tr><tr><td>element.style = ‘xxx’</td><td>修改内置属性值(综合写法)</td></tr><tr><td>element.style.color = ‘xxx’</td><td>修改内置属性值(color可以换成其他属性名)</td></tr><tr><td>div.className = ‘样式类名’</td><td></td></tr><tr><td>element.getAttribute(‘属性’)</td><td>获取自定义的属性（标准）</td></tr><tr><td>element.setAttribute(‘属性’, ‘值’)</td><td>用于设置自定义的属性（标准）</td></tr><tr><td>element.removeAttribute(‘属性’)</td><td>用于移除某元素的属性</td></tr><tr><td>data-</td><td>H5自定义属性以 data- 开头</td></tr><tr><td>element.dataset.index</td><td>只能获取以data-开头的的属性(index可以换成其它的自定义的属性名)</td></tr><tr><td>element.dataset[‘index’]</td><td>只能获取以data-开头的的属性(index可以换成其它的自定义的属性名)</td></tr></tbody></table><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="为什么利用节点操作元素？"><a href="#为什么利用节点操作元素？" class="headerlink" title="为什么利用节点操作元素？"></a>为什么利用节点操作元素？</h3><p>获取元素的方式通常有两种：</p><ol><li><p>利用DOM提供的方法获取元素</p><p>document.getElementById(id)</p><p>document.getElementByTagName(‘标签名’)</p><p>document.getElementByClassName(‘类名’)</p><p>document.querySelector(‘选择器’)</p><p>等等</p><p>缺点：逻辑性不强，且繁琐</p></li><li><p>利用节点层级关系获取元素</p></li></ol><ul><li>利用父子兄节点关系获取元素</li><li>逻辑性强，兼容性差</li></ul><h3 id="节点概述"><a href="#节点概述" class="headerlink" title="节点概述"></a>节点概述</h3><p>网页中所有内容都是节点（标签、属性、文本、注释等），在DOM中，节点使用node来表示</p><h4 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h4><p>节点至少拥有三个属性：</p><ul><li>nodeType（节点类型）</li><li>nodeName（节点名称）</li><li>nodeValue(节点值)</li></ul><h4 id="节点类型"><a href="#节点类型" class="headerlink" title="==节点类型=="></a>==节点类型==</h4><ul><li>元素节点 nodeType 为 1</li><li>属性节点 nodeType 为 2</li><li>文本节点 nodeType 为 3 (文本节点包含文字、空格、换行等)</li></ul><p>实际开发中主要操作元素节点</p><h3 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h3><p>常见 父子兄层级关系</p><h4 id="父级节点"><a href="#父级节点" class="headerlink" title="父级节点"></a>父级节点</h4><blockquote><p>node.parentNode</p></blockquote><ul><li>parentNode属性可以返回某节点的父节点，注意是最近的一个父节点</li><li>若指定节点没有父节点，则返回null</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 1 父节点</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> test = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.test&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test.<span class="hljs-property">parentNode</span>); <span class="hljs-comment">// &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;test&quot;&gt;&lt;/div&gt;&lt;/div&gt;</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h4><blockquote><ol><li>parenNode.firstChild</li></ol></blockquote><ul><li>返回第一个子节点，若不存在则返回null（不管是文本节点，如换行、空格都算，还是元素节点）</li></ul><blockquote><ol start="2"><li>parentNode.lastChild</li></ol></blockquote><ul><li>返回最后一个子节点，若不存在则返回null（不管是文本节点，如换行、空格都算，还是元素节点）</li></ul><p>3和4有兼容性问题：IE9以上支持</p><blockquote><ol start="3"><li>parentNode.firstElementChild</li></ol></blockquote><ul><li>返回第一个<strong>子元素节点</strong>，若不存在返回null</li></ul><blockquote><ol start="4"><li>parentNode.lastElementChild</li></ol></blockquote><ul><li>返回最后一个<strong>子元素节点</strong>，若不存在返回null</li></ul><p>事件开发的写法</p><blockquote><ol start="6"><li>parentNode.children[索引]</li></ol></blockquote><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ol = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ol&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">firstChild</span>); <span class="hljs-comment">// 返回#text，因为ol后面紧跟的是换行，属于文本节点</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">lastChild</span>);  <span class="hljs-comment">// #text</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">firstElementChild</span>);  <span class="hljs-comment">// &lt;li&gt;1&lt;/li&gt;</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">lastElementChild</span>);   <span class="hljs-comment">// &lt;li&gt;4&lt;/li&gt;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 实际开发的写法，无兼容性问题</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);    <span class="hljs-comment">// &lt;li&gt;1&lt;/li&gt;</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">children</span>[ol.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]);   <span class="hljs-comment">// &lt;li&gt;4&lt;/li&gt;</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">// childNodes 所有子节点</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">childNodes</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h4><blockquote><ol><li>node.nextSibling</li></ol></blockquote><ul><li>返回当前元素的下一个兄弟节点，若不存在则返回null（包含所有节点，文本节点，元素节点等）</li></ul><blockquote><ol start="2"><li>node.previousSibling</li></ol></blockquote><ul><li>返回当前元素的上一个兄弟节点，若不存在则返回null（包含所有节点，文本节点，元素节点等）</li></ul><p>3和4有兼容性问题：IE9以上支持</p><blockquote><ol start="3"><li>node.nextElementSibling</li></ol></blockquote><ul><li>返回当前元素的下一个<strong>兄弟元素节点</strong>，若不存在则返回null</li></ul><blockquote><ol start="4"><li>node.previousElementSibling</li></ol></blockquote><ul><li>返回当前元素的上一个<strong>兄弟元素节点</strong>，若不存在则返回null</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">nextSibling</span>);               <span class="hljs-comment">// #text (div后是换行文本)</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(span.<span class="hljs-property">previousSibling</span>);          <span class="hljs-comment">// #text (span前是换行文本)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">nextElementSibling</span>);        <span class="hljs-comment">// &lt;span&gt;span&lt;/span&gt;</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(span.<span class="hljs-property">previousElementSibling</span>);   <span class="hljs-comment">// &lt;div&gt;div&lt;/div&gt;</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如何解决兼容性问题？</p><p>解：封装一个兼容性函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">// 封装一个函数来得到下个兄弟节点，解决了兼容性问题<br>function getNextElementSibling(elem) &#123;<br>    var el = elem;<br>    // 当el存在下一个兄弟节点时，继续循环<br>    while (el = el.nextSibling) &#123;<br>        // 若当前节点类型为1，即元素节点，则返回当前节点<br>        if (el.nodeType == 1) &#123;<br>    return el;<br>    &#125;<br>&#125;<br>return null;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="star-总结"><a href="#star-总结" class="headerlink" title=":star:总结"></a>:star:总结</h4><table><thead><tr><th>节点</th><th>说明</th></tr></thead><tbody><tr><td>node.parentNode</td><td>返回某节点的父节点，注意是最近的一个父节点</td></tr><tr><td>.firstChild</td><td>返回第一个<strong>子节点</strong>，若不存在返回null</td></tr><tr><td>.lastChild</td><td>返回最后一个<strong>子节点</strong>，若不存在返回null</td></tr><tr><td>.firstElementChild</td><td>返回第一个<strong>子元素节点</strong>，若不存在返回null</td></tr><tr><td>.lastElementChild</td><td>返回最后一个<strong>子元素节点</strong>，若不存在返回null</td></tr><tr><td>.children</td><td>返回所有<strong>子元素节点</strong>，若不存在返回null</td></tr><tr><td>.children[索引]</td><td>返回制定索引的<strong>子元素节点</strong></td></tr><tr><td>.childNodes</td><td>所有<strong>子节点</strong>，包括文本、换行等</td></tr><tr><td>.nextSibling</td><td>返回当前元素的下一个<strong>兄弟节点</strong>，若不存在则返回null</td></tr><tr><td>.previousSibling</td><td>返回当前元素的上一个<strong>兄弟节点</strong>，若不存在则返回null</td></tr><tr><td>.nextElementSibling</td><td>返回当前元素的下一个<strong>兄弟元素节点</strong>，若不存在则返回null</td></tr><tr><td>.previousElementSibling</td><td>返回当前元素的上一个<strong>兄弟元素节点</strong>，若不存在则返回null</td></tr></tbody></table><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="==创建节点=="></a>==创建节点==</h3><p>分为两步：</p><ul><li>创建节点</li><li>添加节点</li></ul><h4 id="1-创建节点"><a href="#1-创建节点" class="headerlink" title="1 创建节点"></a>1 创建节点</h4><p>创建元素节点</p><blockquote><p>elem = document.createElement(‘TagName’)</p></blockquote><h4 id="2-添加子节点"><a href="#2-添加子节点" class="headerlink" title="2 添加子节点"></a>2 添加子节点</h4><p>将创建好的节点添加到指定节点的某个位置</p><blockquote><ol><li><p>方法一：向元素elem的孩子向后追加元素</p><p>node.appendChild(elem)    (node是父级，elem是子级)</p></li><li><p>方法二：向指定元素之前添加元素</p><p>node.insertBefore(child, 指定元素)    (node是父级，child是子级)</p></li></ol></blockquote><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 创建节点</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> li1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 添加节点</span></span><br><span class="language-javascript">        ul.<span class="hljs-title function_">appendChild</span>(li1);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 创建节点</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;span&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 添加节点</span></span><br><span class="language-javascript">        div.<span class="hljs-title function_">appendChild</span>(div1);</span><br><span class="language-javascript">        div.<span class="hljs-title function_">insertBefore</span>(span, div.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例结果：</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220415111712943.png" alt="image-20220415111712943"></p><h4 id="案例-发布留言板"><a href="#案例-发布留言板" class="headerlink" title="案例-发布留言板"></a>案例-发布留言板</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;board&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发布<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;record&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> message = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#message&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(btn);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> record = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.record&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(record);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message.<span class="hljs-property">value</span>); <span class="hljs-comment">// 文本框中的内容</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 创建li</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 添加节点</span></span><br><span class="language-javascript">            record.<span class="hljs-title function_">insertBefore</span>(li, record.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);</span><br><span class="language-javascript">            <span class="hljs-comment">// 将留言文本赋给record的第一个li</span></span><br><span class="language-javascript">            record.<span class="hljs-property">firstElementChild</span>.<span class="hljs-property">innerHTML</span> = message.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            message.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="删除子节点"><a href="#删除子节点" class="headerlink" title="删除子节点"></a>删除子节点</h3><blockquote><p>node.removeChild(child)</p></blockquote><p>从DOM中删除一个制定的子节点，<strong>返回</strong>删除的节点</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 创建节点</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> li1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> li2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 添加节点</span></span><br><span class="language-javascript">        ul.<span class="hljs-title function_">insertBefore</span>(li1, ul.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);</span><br><span class="language-javascript">        ul.<span class="hljs-property">firstElementChild</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;第一个&#x27;</span>;</span><br><span class="language-javascript">        ul.<span class="hljs-title function_">appendChild</span>(li2);</span><br><span class="language-javascript">        ul.<span class="hljs-property">lastElementChild</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;最后一个&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 删除ul的孩子节点</span></span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (ul.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>) &#123;</span><br><span class="language-javascript">                ul.<span class="hljs-title function_">removeChild</span>(ul.<span class="hljs-property">firstElementChild</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ul.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 当ul的孩子都被删完时，该按钮被禁用</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><p>禁用按钮</p><blockquote><p>elem.disabled = true;</p></blockquote></li></ul><p>案例-删除留言</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;board&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发布<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;record&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> message = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#message&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(btn);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> record = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.record&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(record);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message.<span class="hljs-property">value</span>); <span class="hljs-comment">// 文本框中的内容</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (message.<span class="hljs-property">value</span> == <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;您没有输入内容&#x27;</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 创建li</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 将留言文本赋给li, 先有li之后再添加删除链接a</span></span><br><span class="language-javascript">                li.<span class="hljs-property">innerHTML</span> = message.<span class="hljs-property">value</span> + <span class="hljs-string">&#x27;&lt;a href=&quot;javascript:;&quot;&gt;删除&lt;/a&gt;&#x27;</span>;</span><br><span class="language-javascript">                message.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// li获取内容后，文本框内容清空</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 添加节点</span></span><br><span class="language-javascript">                record.<span class="hljs-title function_">appendChild</span>(li);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 删除元素</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">as</span>.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">as</span>[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                        record.<span class="hljs-title function_">removeChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">parentNode</span>);</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><p>li.innerHTML = message.value + ‘&lt;a href=”javascript:;”&gt;删除&lt;/a&gt;’;</p><p>此处利用innerHTML为li添加了子元素a</p></li><li><p>&lt;a href=”javascript:;”&gt;删除&lt;/a&gt;</p><p>href用 “javascript:;” 无需跳转</p></li></ul><h3 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h3><blockquote><p>node.cloneNode()</p></blockquote><p>返回调用该方法节点的一个副本，也称为 克隆节点、拷贝节点</p><ul><li>若括号为空，或者为false，则为浅拷贝，即只复制标签而不拷贝标签里面的内容</li><li>若括号里为true，则为深拷贝，即赋值标签且拷贝标签里面所有的内容（子节点）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        1234<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// var newDiv = div.cloneNode();</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> newDiv = div.<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>);</span><br><span class="language-javascript">        div.<span class="hljs-title function_">appendChild</span>(newDiv);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/upload/image-20220916170934972.png" alt="image-20220916170934972"></p><h3 id="star-总结创建元素方式"><a href="#star-总结创建元素方式" class="headerlink" title=":star:总结创建元素方式"></a>:star:总结创建元素方式</h3><h4 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h4><ul><li><p>document.write()</p><p>直接将内容写入页面的内容流，但是翁当执行完毕，会导致页面全部重绘</p></li><li><p>elem.innderHTML = ‘内容’;</p><p>将内容写入某个DOM节点，不会导致页面重绘</p><p>innerHTML创建多个元素效率更高（但是不要通过拼接字符串创建，而应该采取数组形式拼接），结构稍复杂</p></li><li><p>createElement()创建多个元素效率 稍低一点点，但是结构更清晰</p></li></ul><p>document.write()示例：点击按钮后，页面重绘</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;&lt;p&gt;123&lt;/p&gt;&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例结果：</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220416135825850.png" alt="image-20220416135825850"></p><p>elem.innerHTML 和 createElement()比较：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 1. innerHTML利用拼接字符串创建，效率很低</span></span><br><span class="language-javascript">        <span class="hljs-comment">// for (var i = 0; i &lt; 1000; i++) &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     div.innerHTML += &#x27;&lt;a href=&quot;javascript&quot;&gt;搜索&lt;/a&gt;&#x27;;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 2. 利用数组和innerHTML创建，效率较高</span></span><br><span class="language-javascript">        <span class="hljs-comment">// var arr = [];</span></span><br><span class="language-javascript">        <span class="hljs-comment">// for (var i = 0; i &lt; 1000; i++) &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     arr.push(&#x27;&lt;a href=&quot;javascript&quot;&gt;搜索&lt;/a&gt;&#x27;);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// div.innerHTML = arr.join(&#x27;&#x27;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 3. 利用creatElement()创建,效率没有innerHTMl利用数组创建高</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> a = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="language-javascript">            div.<span class="hljs-title function_">appendChild</span>(a);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="star-star-DOM重点核心总结"><a href="#star-star-DOM重点核心总结" class="headerlink" title=":star::star:==DOM重点核心总结=="></a>:star::star:==DOM重点核心总结==</h2><h3 id="创增删节点"><a href="#创增删节点" class="headerlink" title="创增删节点"></a>创增删节点</h3><table><thead><tr><th>节点操作</th><th>说明</th></tr></thead><tbody><tr><td>document.createElement(‘TagName’)</td><td>创：见上页</td></tr><tr><td>document.write()</td><td>创：见上页</td></tr><tr><td>elem.innderHTML = ‘内容’</td><td>创：见上页</td></tr><tr><td>.appendChild(elem)</td><td>增：在子节点最后添加子节点</td></tr><tr><td>.insertBefore(child, 指定元素)</td><td>增：在制定节点之前添加子节点</td></tr><tr><td>.removeChild(child)</td><td>删：删除一个制定的子节点，<strong>返回</strong>删除的节点</td></tr><tr><td>.cloneNode()</td><td>克隆节点，会将代克隆节点里面的内容都克隆</td></tr></tbody></table><h3 id="查节点"><a href="#查节点" class="headerlink" title="查节点"></a>查节点</h3><p>利用DOM提供的方法 查</p><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>.getElementById(id)</td><td>返回一个匹配到ID的DOM Element对象</td></tr><tr><td>.getElementByTagName(‘标签名’)</td><td>返回带有标签名的对象的集合</td></tr><tr><td>.getElementByClassName(‘类名’)</td><td>(H5新增)根据类名返回元素对象集合</td></tr><tr><td>.querySelector(‘选择器’)</td><td>(H5新增)根据指定选择器返回第一个元素对象</td></tr><tr><td>.querySelectorAll(‘选择器’)</td><td>(H5新增)根据指定选择器返回对象集合</td></tr><tr><td>document.body</td><td>获取body元素</td></tr><tr><td>document.documentElement</td><td>获取html元素</td></tr></tbody></table><p>利用节点层级关系 查</p><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>node.parentNode</td><td>返回某节点的父节点，注意是最近的一个父节点</td></tr><tr><td>.firstChild</td><td>返回第一个<strong>子节点</strong>，若不存在返回null</td></tr><tr><td>.lastChild</td><td>返回最后一个<strong>子节点</strong>，若不存在返回null</td></tr><tr><td>.firstElementChild</td><td>返回第一个<strong>子元素节点</strong>，若不存在返回null</td></tr><tr><td>.lastElementChild</td><td>返回最后一个<strong>子元素节点</strong>，若不存在返回null</td></tr><tr><td>.children</td><td>返回所有<strong>子元素节点</strong>，若不存在返回null</td></tr><tr><td>.children[索引]</td><td>返回制定索引的<strong>子元素节点</strong></td></tr><tr><td>.childNodes</td><td>所有<strong>子节点</strong>，包括文本、换行等</td></tr><tr><td>.nextSibling</td><td>返回当前元素的下一个<strong>兄弟节点</strong>，若不存在则返回null</td></tr><tr><td>.previousSibling</td><td>返回当前元素的上一个<strong>兄弟节点</strong>，若不存在则返回null</td></tr><tr><td>.nextElementSibling</td><td>返回当前元素的下一个<strong>兄弟元素节点</strong>，若不存在则返回null</td></tr><tr><td>.previousElementSibling</td><td>返回当前元素的上一个<strong>兄弟元素节点</strong>，若不存在则返回null</td></tr></tbody></table><h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>element.style</td><td>获取内置属性值</td></tr><tr><td>element.style = ‘xxx’</td><td>修改内置属性值(综合写法)</td></tr><tr><td>element.style.color = ‘xxx’</td><td>修改内置属性值(color可以换成其他属性名)</td></tr><tr><td>div.className = ‘样式类名’</td><td></td></tr><tr><td>element.getAttribute(‘属性’)</td><td>获取自定义的属性（标准）</td></tr><tr><td>element.setAttribute(‘属性’, ‘值’)</td><td>用于设置自定义的属性（标准）</td></tr><tr><td>element.removeAttribute(‘属性’)</td><td>用于移除某元素的属性</td></tr><tr><td>data-</td><td>H5自定义属性以 data- 开头</td></tr><tr><td>element.dataset.index</td><td>只能获取以data-开头的的属性(index可以换成其它的自定义的属性名)</td></tr><tr><td>element.dataset[‘index’]</td><td>只能获取以data-开头的的属性(index可以换成其它的自定义的属性名)</td></tr></tbody></table><h3 id="事件操作"><a href="#事件操作" class="headerlink" title="事件操作"></a>事件操作</h3><table><thead><tr><th>鼠标事件</th><th>触发事件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h1 id="DOM事件高级"><a href="#DOM事件高级" class="headerlink" title="DOM事件高级"></a>DOM事件高级</h1><h2 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h2><h3 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h3><ul><li><p>利用on开头的事件，如onclick</p></li><li><p>写法：</p><ul><li>&lt;button onclick=”alert(‘hi~’)”&gt;&lt;/button&gt;</li><li>btn.onclick = function() {}</li></ul></li><li><p>特点：注册事件的唯一性</p><p>如：若同一个注册事件添加了两个处理程序，则后面的会把前面的覆盖，只会执行最下面那个</p><ul><li>btn.onclick = function() {alert(‘hi~’)}</li><li>btn.onclick = function() {alert(‘你好’)}  // 只会执行这个</li></ul></li><li><p>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</p></li></ul><h3 id="方法监听注册方式"><a href="#方法监听注册方式" class="headerlink" title="方法监听注册方式"></a>方法监听注册方式</h3><ul><li>方法：addEvenListener </li><li>IE9之前不支持addEvenListener方法，可以使用attachEvent()</li><li>特点：<strong>同一根元素同一个事件可以注册多个监听器</strong></li><li>按注册顺序依次执行</li></ul><h4 id="addEventListener事件监听方式"><a href="#addEventListener事件监听方式" class="headerlink" title="addEventListener事件监听方式"></a>addEventListener事件监听方式</h4><blockquote><p>evenTarget.addEventListener(Type, listener[, useCapture])</p></blockquote><p>evenTarget.addEvenListener()将指定的监听器注册到evenTarget(目标对象)上，当该对象触发指定事件时，就会执行事件处理函数</p><p>IE9之前不支持addEvenListener方法</p><ul><li>type：事件类型字符串，如：click、mouseover（注意：<strong>这里不需要带 on</strong>）</li><li>listener：事件处理<strong>函数</strong>，事件发生时，会调用该监听函数</li><li>useCapture：可选参数，是一个布尔值，默认是false</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1111<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 同一根元素同一个事件可以注册多个监听器 按注册顺序依次执行</span></span><br><span class="language-javascript">        div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hi~&#x27;</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你好呀~&#x27;</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="attachEvent事件监听方式"><a href="#attachEvent事件监听方式" class="headerlink" title="attachEvent事件监听方式"></a>attachEvent事件监听方式</h4><blockquote><p>evenTarget.attachEvent(evenNameWithOn, callback)</p></blockquote><p>evenTarget.attachEvent()将指定监听器注册到evenTarget(目标对象)上，当该对象触发指定事件时，指定的回调函数就会被执行</p><ul><li>evenNameWithOn：事件类型字符串，如：click、onmouseover，（注意：<strong>这里要带 on</strong>）</li><li>callback：事件处理函数，当目标触发事件时回调函数被调用</li></ul><h4 id="注册事件兼容性解决方法"><a href="#注册事件兼容性解决方法" class="headerlink" title="注册事件兼容性解决方法"></a>注册事件兼容性解决方法</h4><p>先照顾多数浏览器，再处理特殊浏览器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addEventListener</span>(<span class="hljs-params">elem, eventName, fn</span>) &#123;<br>    <span class="hljs-keyword">if</span> (elem.<span class="hljs-property">addEventListener</span>) &#123;<br>    elem.<span class="hljs-title function_">addEventListener</span>(eventName, fn);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (elem.<span class="hljs-property">attachEvent</span>) &#123;<br>    elem.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;on&#x27;</span> + eventName, fn);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 相当于 elem.onclick = fn;</span><br>    elem[<span class="hljs-string">&#x27;on&#x27;</span> + eventName] = fn;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h2><h3 id="传统方式删除"><a href="#传统方式删除" class="headerlink" title="传统方式删除"></a>传统方式删除</h3><blockquote><p>elem.onclick = null;</p></blockquote><h3 id="removeEventListener删除、移除"><a href="#removeEventListener删除、移除" class="headerlink" title="removeEventListener删除、移除"></a>removeEventListener删除、移除</h3><blockquote><p>elem.removeEventListener(evenName, fn)</p></blockquote><ul><li>evenName不加on，如 click</li><li>对应 addEventListener</li></ul><h3 id="detachEvent删除"><a href="#detachEvent删除" class="headerlink" title="detachEvent删除"></a>detachEvent删除</h3><blockquote><p>elem.detachEvent(evenName, fn)</p></blockquote><ul><li>evenName需要加on，如 onclick</li><li>对应 attachEvent</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>弹出你好<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>弹出你好<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>弹出你好<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>弹出你好<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 1 传统方式删除事件</span></span><br><span class="language-javascript">        <span class="hljs-comment">// divs[0].onclick = function () &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     alert(&#x27;你好&#x27;);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// divs[0].onclick = null;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 2 removeEventListener删除事件</span></span><br><span class="language-javascript">        divs[<span class="hljs-number">1</span>].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, fn);</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是非传统方式&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        divs[<span class="hljs-number">1</span>].<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, fn);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 3 detachEvent删除操作</span></span><br><span class="language-javascript">        divs[<span class="hljs-number">2</span>].<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;onclick&#x27;</span>, fn);</span><br><span class="language-javascript">        divs[<span class="hljs-number">2</span>].<span class="hljs-title function_">detachEvent</span>(<span class="hljs-string">&#x27;onclick&#x27;</span>, fn);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="删除事件兼容性解决"><a href="#删除事件兼容性解决" class="headerlink" title="删除事件兼容性解决"></a>删除事件兼容性解决</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">function removeEventListener(elem, eventName, fn) &#123;<br>    if (elem.removeEventListener) &#123;<br>    elem.removeEventListener(eventName, fn);<br>    &#125; else if (elem.detachEvent) &#123;<br>    elem.detachEvent(&#x27;on&#x27; + eventName, fn);<br>    &#125; else &#123;<br>    // 相当于 elem.onclick = null;<br>    elem[&#x27;on&#x27; + eventName] = null;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DOM事件流-捕获、冒泡"><a href="#DOM事件流-捕获、冒泡" class="headerlink" title="==DOM事件流-捕获、冒泡=="></a>==DOM事件流-捕获、冒泡==</h2><p>事件流描述的是从页面中接收事件的顺序</p><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流</p><blockquote><p>DOM事件流分为三个阶段</p><ol><li>捕获阶段    (如：document $\longrightarrow$ html $\longrightarrow$ body $\longrightarrow$ father $\longrightarrow$ son)</li><li>当前目标阶段</li><li>冒泡阶段   （如：son $\longrightarrow$ father $\longrightarrow$ body $\longrightarrow$ html $\longrightarrow$ document)</li></ol></blockquote><p><strong>注：</strong></p><ul><li><p>JS代码中只能执行 捕获 或者 冒泡 其中的一个阶段</p></li><li><p>onclick和attachEvent 只能得到冒泡阶段, addEventListener可以得到捕获和冒泡阶段</p></li><li><blockquote><p><strong>捕获阶段</strong>：addEventListener的第3个参数是<strong>true</strong>，那么处于捕获阶段</p><p>如：document $\longrightarrow$ html $\longrightarrow$ body $\longrightarrow$ father $\longrightarrow$ son</p></blockquote></li><li><blockquote><p><strong>冒泡阶段</strong>：addEventListener的第3个参数是 省略 或者 <strong>false</strong>，那么处于冒泡阶段</p><p>如：son $\longrightarrow$ father $\longrightarrow$ body $\longrightarrow$ html $\longrightarrow$ document</p></blockquote></li><li><p>有些事件没有冒泡，如：onblur onfocus onmouseenter onmouseleave</p></li></ul><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        我是爸爸<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><br>            我是孩子<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> father = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.father&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> son = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.son&#x27;</span>);        </span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 第3个参数为 true ，则是捕获阶段，点击son，会先弹出father 后 son</span></span><br><span class="language-javascript">        son.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;son&#x27;</span>);</span><br><span class="language-javascript">        &#125;, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        father.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;father&#x27;</span>);</span><br><span class="language-javascript">        &#125;, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">// 第3个参数 省略 或者 false ，则是冒泡阶段，点击son，会先弹出son 后 father</span></span><br><span class="language-javascript">        <span class="hljs-comment">// son.addEventListener(&#x27;click&#x27;, function () &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     alert(&#x27;son&#x27;);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// father.addEventListener(&#x27;click&#x27;, function () &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     alert(&#x27;father&#x27;);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;);</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><h3 id="什么是事件对象"><a href="#什么是事件对象" class="headerlink" title="什么是事件对象"></a>什么是事件对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">eventTarget.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-comment">// event就是事件对象，可以简写为e evt</span><br>&#125;<br>eventTarget.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br><span class="hljs-comment">// event就是事件对象，可以简写为e evt</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>解释：event对象海边时间的状态，比如：键盘按键的状态，鼠标的位置，鼠标按钮的状态</p><blockquote><p>即：事件发生后，跟事件相关的一系列信息数据的集合<strong>都放到</strong>这个对象里面，这个对象就是<strong>事件对象event</strong>，有很多属性和方法</p></blockquote><p>具体来说： </p><ul><li>event就是一个事件对象，写在监听函数小括号里面，当作形参来看</li><li>事件对象只有有了事件才会存在（如，需要点击之后才会产生），是系统自动创建的，不需要我们传递参数</li><li>事件对象是 一系列相关数据的集合，跟事件相关的，如鼠标点击里面就包含了鼠标的相关信息</li><li>事件对象可以看成形参自定义命名，如：event、e、evt</li><li>事件对象也有兼容性问题，ie6 7 8 通过 window.event</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(event);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(window.event);   // ie6 7 8 使用</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 处理兼容性</span></span><br><span class="language-javascript">            event = event || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="事件对象属性方法"><a href="#事件对象属性方法" class="headerlink" title="事件对象属性方法"></a>事件对象属性方法</h3><p>事件对象中常见的属性和方法如下：</p><table><thead><tr><th>事件对象属性方法</th><th>说明</th></tr></thead><tbody><tr><td><strong>e.target 标准</strong></td><td><strong>返回触发事件的对象 标准</strong></td></tr><tr><td>e.srcElement 非标准</td><td>返回触发事件的对象 非标准 ie6-8使用</td></tr><tr><td>e.type</td><td>返回事件的类型 如click，不带on</td></tr><tr><td>e.cancelBubble 非标准</td><td>该属性阻止冒泡 非标准 ie6-8使用</td></tr><tr><td>e.returnValue 非标准</td><td>该属性阻止默认事件（默认行为）非标准 ie6-8使用 如：不让链接跳转</td></tr><tr><td><strong>e.preventDefault</strong> 标准</td><td>该属性阻止默认事件（默认行为）标准 如：不让链接跳转</td></tr><tr><td><strong>e.stopPropagation</strong> 标准</td><td>阻止冒泡</td></tr></tbody></table><h4 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h4><p>如：不让链接跳转，不让提交按钮提交</p><ul><li><p>e.returnValue;    是一个属性，低版本浏览器</p></li><li><p>e.preventDefault(); 是一种方法，调用需要加括号，标准普通浏览器</p></li><li><p>return false; 也可以阻止默认行为，但后面代码不执行了，<strong>只限于传统的注册方式（e.onclick）</strong>没有兼容性问题</p></li></ul><h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><ul><li>e.stopPropagation()</li><li>e.cancelBubble = true  非标准阻止冒泡（低版本使用）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> father = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.father&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> son = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.son&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        lis[<span class="hljs-number">0</span>].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是li&#x27;</span>)</span><br><span class="language-javascript">            e.<span class="hljs-title function_">stopPropagation</span>();    <span class="hljs-comment">// 阻止冒泡，son和father不再弹出</span></span><br><span class="language-javascript">            <span class="hljs-comment">// e.cancelBubble = true;   // 非标准阻止冒泡</span></span><br><span class="language-javascript">        &#125;, <span class="hljs-literal">false</span>);</span><br><span class="language-javascript">        son.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是son&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// e.stopPropagation();</span></span><br><span class="language-javascript">        &#125;, <span class="hljs-literal">false</span>);</span><br><span class="language-javascript">        father.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是father&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// e.stopPropagation();</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="兼容性解决方案"><a href="#兼容性解决方案" class="headerlink" title="兼容性解决方案"></a>兼容性解决方案</h3><p>低版本的使用：</p><p>​    window.event.cancelBubble = true;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 兼容性方案</span><br><span class="hljs-keyword">if</span> (e &amp;&amp; e.<span class="hljs-property">stopPropagation</span>) &#123;<br>    e.<span class="hljs-title function_">stopPropagation</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>.<span class="hljs-property">cancelBubble</span> = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>事件委托 也称为 事件代理，在jQuery里面称为事件委派</p><p><strong>事件委托原理：</strong></p><p>不用每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响每个子节点</p><p><strong>事件委托作用：</strong></p><p>只操作了一次DOM，提高了程序的性能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>知否知否应是绿肥红瘦<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>知否知否应是绿肥红瘦<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>知否知否应是绿肥红瘦<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>知否知否应是绿肥红瘦<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        ul.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是ul&#x27;</span>);    <span class="hljs-comment">// 由于事件冒泡，点击的是li，ul仍会弹出</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>);  <span class="hljs-comment">// 返回点击的对象，若点击的是li，则返回点击的li</span></span><br><span class="language-javascript">            e.<span class="hljs-property">target</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;red&#x27;</span>; <span class="hljs-comment">// 点击li更改背景颜色</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="常用鼠标事件"><a href="#常用鼠标事件" class="headerlink" title="常用鼠标事件"></a>常用鼠标事件</h2><h3 id="禁止鼠标右键菜单-amp-选文字"><a href="#禁止鼠标右键菜单-amp-选文字" class="headerlink" title="禁止鼠标右键菜单&amp;选文字"></a>禁止鼠标右键菜单&amp;选文字</h3><p>使用 e.preventDefault(); 来禁止</p><ul><li><p>禁止鼠标右键菜单</p><p>contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</p></li><li><p>禁止鼠标选文字</p><p>selectstart</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    知否知否应是绿肥红瘦<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 禁止鼠标右键菜单</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;contextmenu&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            e.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 禁止鼠标选中</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;selectstart&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            e.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="==鼠标事件对象=="></a>==鼠标事件对象==</h3><p>event对象代表事件的状态，跟事件相关的一系列信息的集合，主要用的是鼠标事件对象mouseEvent和键盘事件对象KeyboardEvent</p><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td>e.clientX</td><td>返回鼠标相对于浏览器窗口可视区的X坐标</td></tr><tr><td>e.clientY</td><td>返回鼠标相对于浏览器窗口可视区的Y坐标</td></tr><tr><td>e.pageX</td><td>返回鼠标相对于文档页面的X坐标 IE9+支持</td></tr><tr><td>e.pageY</td><td>返回鼠标相对于文档页面的Y坐标 IE9+支持</td></tr><tr><td>e.screenX</td><td>返回鼠标相对于电脑屏幕的X坐标</td></tr><tr><td>e.screenY</td><td>返回鼠标相对于电脑屏幕的Y坐标</td></tr></tbody></table><p>案例-跟随鼠标移动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/鼠标.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 在页面中移动，则需要给document注册事件</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(e);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 给img设置绝对定位，设置left和top</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 一定要注意：left和top需要单位px</span></span><br><span class="language-javascript">            img.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = e.<span class="hljs-property">clientX</span> - <span class="hljs-number">16</span> + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">            img.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = e.<span class="hljs-property">clientY</span> - <span class="hljs-number">16</span> + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>给img设置绝对定位，设置left等于鼠标的x和top等于鼠标的y</li><li>一定要注意：left和top需要单位px</li></ul><h2 id="star-常用键盘事件"><a href="#star-常用键盘事件" class="headerlink" title=":star:常用键盘事件"></a>:star:常用键盘事件</h2><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><table><thead><tr><th>键盘事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onkeyup/keyup</td><td>某个键盘按键被松开时触发</td></tr><tr><td>onkeydown/keydown</td><td>某个键盘按键被按下时触发</td></tr><tr><td>onkeypress/keypress</td><td>某个键盘按键被按下时触发 不识别功能键，如：ctrl shift 箭头 等</td></tr></tbody></table><p>三个事件的执行顺序：</p><p>keydown $\longrightarrow$  keypress $\longrightarrow$ keyup</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;弹起&#x27;</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;按下任何键&#x27;</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;按下非功能键&#x27;</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>addEventListener 不需要加 on</li></ul><h3 id="keyCode"><a href="#keyCode" class="headerlink" title="keyCode"></a>keyCode</h3><p>键盘事件中的<strong>keyCode属性</strong>可以得到相应键的ASCII码值</p><ul><li>keyup和keydown不区分大小写（a A 都是A的ASCII：65），能识别任何键</li><li>keypress 区分大小写，不能识别功能键</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// keyup 不区分大小写 a A 都是A的ASCII：65</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;up:&#x27;</span> + e.<span class="hljs-property">keyCode</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-comment">// keydown 不区分大小写 a A 都是A的ASCII：65</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;down:&#x27;</span> + e.<span class="hljs-property">keyCode</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-comment">// keypress 区分大小写 </span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;press:&#x27;</span> + e.<span class="hljs-property">keyCode</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="案例-按键定位搜索框"><a href="#案例-按键定位搜索框" class="headerlink" title="案例-按键定位搜索框"></a>案例-按键定位搜索框</h3><p>搜索框获得焦点：focus()方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 此处使用的keyup，按下s是为了获得光标，因此s不能输入到input中</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">keyCode</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (e.<span class="hljs-property">keyCode</span> === <span class="hljs-number">83</span>) &#123;</span><br><span class="language-javascript">                input.<span class="hljs-title function_">focus</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例-京东快递单号搜索</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>案例-京东快递单号查询<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eee</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.fdj</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">3px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 利用的是伪元素来创建的小三角 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.fdj</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">8px</span> solid transparent;</span><br><span class="language-css">            <span class="hljs-attribute">border-top-color</span>: pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fdj&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> fdj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.fdj&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 此处使用的keyup，按下s是为了获得光标，因此s不能输入到input中</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">keyCode</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (e.<span class="hljs-property">keyCode</span> === <span class="hljs-number">83</span>) &#123;</span><br><span class="language-javascript">                input.<span class="hljs-title function_">focus</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// input中有内容时，显示fdj，没有内容时隐藏</span></span><br><span class="language-javascript">        input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 利用this.value将输入的值赋给fdj</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>) &#123;</span><br><span class="language-javascript">                fdj.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">                fdj.<span class="hljs-property">innerHTML</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                fdj.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// input里有内容，但失去焦点，也需要隐藏</span></span><br><span class="language-javascript">        input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;blur&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            fdj.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// input里有内容，且获得焦点，也需要显示</span></span><br><span class="language-javascript">        input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>) &#123;</span><br><span class="language-javascript">                fdj.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                fdj.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>JS语法</category>
      
      <category>WebAPI</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>VUE常见问题</title>
    <link href="/2022/11/25/04-VUE/VUE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2022/11/25/04-VUE/VUE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="template报错"><a href="#template报错" class="headerlink" title="template报错"></a>template报错</h2><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/00 安装与配置/image-20220811172404561.png" alt="image-20220811172404561" style="zoom:67%;" /><p>解决方案：</p><p>在当前目录下的 <code>jsconfig.json</code> 文件，新增 “jsx”: “preserve” </p><p>将jsx选项设置为“preserve”意味着 TypeScript 不应处理JSX</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esnext&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;baseUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;jsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;preserve&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">// 添加</span><br>    <span class="hljs-attr">&quot;moduleResolution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;paths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@/*&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;src/*&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;lib&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;esnext&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;dom&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;dom.iterable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;scripthost&quot;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>vue中的条件判断v-if 和 v-else 只能通过使用在平级的标签中，若标签不平级，则无法同时使用</li></ol>]]></content>
    
    
    <categories>
      
      <category>04-VUE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>VUE项目创建</title>
    <link href="/2022/11/25/04-VUE/VUE%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/"/>
    <url>/2022/11/25/04-VUE/VUE%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h1><p>作为练习创建vue项目时 vue create demo</p><p>手动为项目配置的时候，不要选择 linter/Formatter, 格式化程序，不然会在程序中报很多格式错误</p><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><h3 id="vue-cli脚手架"><a href="#vue-cli脚手架" class="headerlink" title="vue-cli脚手架"></a>vue-cli脚手架</h3><ol><li><p>全局安装vue-cli（一台电脑只需要安装一次）</p><p><code>npm i vue-cli -g</code></p></li><li><p>使用vue-cli创建vue项目</p><p><code>vue create 项目名称</code></p></li></ol><h3 id="项目的基本配置"><a href="#项目的基本配置" class="headerlink" title="项目的基本配置"></a>项目的基本配置</h3><p>在vue项目中可以创建一个文件 vue.config.js</p><ol><li>配置浏览器打开窗口的域名、端口号</li><li>启动项目时是否自动打开窗口</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-comment">// 域名</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8999</span>, <span class="hljs-comment">// 端口号的配置</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 自动打开浏览器</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="挂载到vue原型对象"><a href="#挂载到vue原型对象" class="headerlink" title="挂载到vue原型对象"></a>挂载到vue原型对象</h3><p>通过script标签引入的js文件，成为了window对象下的全局对象，可以通过window.echarts 获取</p><p><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;路径\echart.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>要想在vue项目中的所有组件中更方便的访问，需要挂载到vue的原型对象上</p><p><code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$echarts</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">echarts</span><br></code></pre></td></tr></table></figure><p>通过以上操作后，在组件中访问 echarts 就可以通过</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.$echarts<br></code></pre></td></tr></table></figure><h3 id="axios的封装与挂载"><a href="#axios的封装与挂载" class="headerlink" title="axios的封装与挂载"></a>axios的封装与挂载</h3><ol><li><p>安装</p><p><code>npm i axios</code></p></li><li><p>在main.js文件中引入</p><p><code>import axios from &#39;axios&#39;</code></p></li><li><p>在 main.js 中配置请求的基准路径</p><p><code>axios.default.baseURL = &#39;路径&#39;</code></p></li><li><p>将 axios 挂载到 Vue 原型对象上（$http 只是自定义的名称而已）</p><p><code>Vue.prototype.$http = axios</code> </p><p>在组件中使用 axios：<code>this.$http</code></p></li></ol><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>在开发项目时：</p><ol><li>真正需要展示在页面中的组件一般放在 文件夹components 目录下</li><li>在单独实现组件功能的时需要测试查看页面效果，因此还需要一个测试用的组件，一般放在 文件夹view 目录下</li><li>单独组件的展示效果可以通过路由设置路由规则，访问指定的路径可以查看到组件页面效果</li><li>开发完毕后，</li></ol><h2 id="全局样式的引入"><a href="#全局样式的引入" class="headerlink" title="全局样式的引入"></a>全局样式的引入</h2><p>在 <code>main.js</code> 中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;样式.css&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>04-VUE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>babel</title>
    <link href="/2022/11/25/03-JS/NodeJS/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/babel/babel/"/>
    <url>/2022/11/25/03-JS/NodeJS/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/babel/babel/</url>
    
    <content type="html"><![CDATA[<h1 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h1><p>用于解决ES6新增功能兼容性问题</p><p>粗暴的理解就是，要使用一些js高级特性如promise就得使用这个库</p><p>参考：<a href="https://blog.csdn.net/weixin_45143481/article/details/111491299">https://blog.csdn.net/weixin_45143481/article/details/111491299</a></p>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>NodeJS</category>
      
      <category>常用工具</category>
      
      <category>babel</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Eslint</title>
    <link href="/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/vscode/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/Eslint/"/>
    <url>/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/vscode/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/Eslint/</url>
    
    <content type="html"><![CDATA[<h1 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h1><p>JS代码检测工具</p><h2 id="相关报错"><a href="#相关报错" class="headerlink" title="相关报错"></a>相关报错</h2><ol><li>报错：Missing space before function parentheses.eslint<a href="https://eslint.org/docs/rules/space-before-function-paren">space-before-function-paren</a></li></ol><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/00 安装与配置/image-20220812102201372.png" alt="image-20220812102201372" style="zoom:50%;" /><p>解决：在 .eslint.js文件增加规则 ‘space-before-function-paren’: 0 然后重新启动项目</p><p>![image-20220812102330516](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/00">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/00</a> 安装与配置/image-20220812102330516.png)</p><ol start="2"><li>vue3中报错不允许在template中超过一个根节点<ul><li>错误原因：vetur插件将 vue3 当成vue2 检查</li><li>修复：在eslint中添加 <code>&#39;vue/no-multiple-template-root&#39;: &#39;off&#39;,</code></li></ul></li></ol><h2 id="常见规则"><a href="#常见规则" class="headerlink" title="常见规则"></a>常见规则</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-attr">semi</span>: [<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;always&#x27;</span>],<br>    <span class="hljs-string">&#x27;space-before-function-paren&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span><br>    <span class="hljs-string">&#x27;vue/no-multiple-template-root&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>06-工具</category>
      
      <category>编辑工具</category>
      
      <category>vscode</category>
      
      <category>常用插件</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>quokka</title>
    <link href="/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/vscode/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/quokka/"/>
    <url>/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/vscode/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/quokka/</url>
    
    <content type="html"><![CDATA[<p>quokka</p>]]></content>
    
    
    <categories>
      
      <category>06-工具</category>
      
      <category>编辑工具</category>
      
      <category>vscode</category>
      
      <category>常用插件</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>快捷键配置</title>
    <link href="/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/vscode/%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/vscode/%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="快捷键配置"><a href="#快捷键配置" class="headerlink" title="快捷键配置"></a>快捷键配置</h1><ol><li><p>打开VSCode</p></li><li><p>点击 【文件】—&gt; 【首选项】—&gt; 【键盘快捷方式】</p></li><li><p>在输入框中输入需要设置的命令</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221125132537007.png" alt="image-20221125132537007"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221125132624520.png" alt="image-20221125132624520"></p></li></ol><p>若要更改 create Snippet 的快捷键，如上操作，再双击 快捷方式，就可以重新自定义</p>]]></content>
    
    
    <categories>
      
      <category>06-工具</category>
      
      <category>编辑工具</category>
      
      <category>vscode</category>
      
      <category>常用配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>snippets</title>
    <link href="/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/vscode/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/snippets/"/>
    <url>/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/vscode/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/snippets/</url>
    
    <content type="html"><![CDATA[<h2 id="snippets"><a href="#snippets" class="headerlink" title="snippets"></a>snippets</h2><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221125131242898.png" alt="image-20221125131242898"></p><p> 用于自定义生成常用的代码</p><p>使用方式：</p><ol><li>先复制需要生成的代码</li><li>按快捷键 ctrl+alt+p</li><li>在弹出的框中，输入生成该代码块的前缀，接着在输入该代码块属于的分组</li></ol><p>示例：</p><ol><li><p>选中代码块</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221125131828895.png" alt="image-20221125131828895" style="zoom: 50%;" /></li><li><p>按快捷键 <code>ctrl+alt+p</code> （快捷方式可以自定义）</p></li><li><p>在弹出的输入框中 输入 <code>vue2 </code>，接着输入<code>vue</code>分组</p></li><li><p>使用：在代码编辑时，输入 <code>vue2 </code>就可以生成上面的代码块</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>06-工具</category>
      
      <category>编辑工具</category>
      
      <category>vscode</category>
      
      <category>常用插件</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Volar</title>
    <link href="/2022/11/25/04-VUE/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8F%92%E4%BB%B6/Volar/"/>
    <url>/2022/11/25/04-VUE/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8F%92%E4%BB%B6/Volar/</url>
    
    <content type="html"><![CDATA[<h1 id="Volar"><a href="#Volar" class="headerlink" title="Volar"></a>Volar</h1>]]></content>
    
    
    <categories>
      
      <category>04-VUE</category>
      
      <category>常用插件</category>
      
      <category>格式化插件</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vetur</title>
    <link href="/2022/11/25/04-VUE/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8F%92%E4%BB%B6/Vetur/"/>
    <url>/2022/11/25/04-VUE/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8F%92%E4%BB%B6/Vetur/</url>
    
    <content type="html"><![CDATA[<h2 id="Vetur"><a href="#Vetur" class="headerlink" title="Vetur"></a>Vetur</h2><p><code>vetur</code>插件会把vue3项目当成vue2去检查，导致报错，如 template 中不允许有 超过一个的根节点，而在vue3中是允许的，出现这种情况时，可以在 ESlint的规则中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;vue/no-multiple-template-root&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>04-VUE</category>
      
      <category>常用插件</category>
      
      <category>格式化插件</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>prettier</title>
    <link href="/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/vscode/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/prettier/"/>
    <url>/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/vscode/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/prettier/</url>
    
    <content type="html"><![CDATA[<h1 id="prettier"><a href="#prettier" class="headerlink" title="prettier"></a>prettier</h1><p>格式化插件</p><p>配置文件 <code>.prettierrc.js</code> （可以在创建的vue项目中直接新建此文件，约定格式规则）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">printWidth</span>: <span class="hljs-number">800</span>, <span class="hljs-comment">// 单行宽度限制</span><br>  <span class="hljs-attr">tabWidth</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 缩进字节数</span><br>  <span class="hljs-attr">useTabs</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 不使用制表符缩进，使用空格缩进</span><br>  <span class="hljs-attr">semi</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 代码需要分号结尾</span><br>  <span class="hljs-attr">singleQuote</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 单引号</span><br>  <span class="hljs-attr">bracketSpacing</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 对象左右两侧需要空格</span><br>  <span class="hljs-attr">arrowParens</span>: <span class="hljs-string">&#x27;avoid&#x27;</span>, <span class="hljs-comment">// 单参数的箭头函数参数不需要括号</span><br>  <span class="hljs-attr">proseWrap</span>: <span class="hljs-string">&#x27;never&#x27;</span>, <span class="hljs-comment">// 参考 https://prettier.io/docs/en/options.html#prose-wrap</span><br>  <span class="hljs-attr">trailingComma</span>: <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-comment">// 参考 https://prettier.io/docs/en/options.html#trailing-commas,</span><br>  <span class="hljs-attr">ignorePath</span>: <span class="hljs-string">&#x27;.prettierignore&#x27;</span>, <span class="hljs-comment">// 不使用prettier格式化的文件填写在项目的.prettierignore文件中</span><br>  <span class="hljs-attr">disableLanguages</span>: [<span class="hljs-string">&#x27;vue&#x27;</span>], <span class="hljs-comment">// 不格式化vue文件，vue文件的格式化单独设置</span><br><br>  <span class="hljs-attr">htmlWhitespaceSensitivity</span>: <span class="hljs-string">&#x27;ignore&#x27;</span>,<br>  <span class="hljs-attr">jsxBracketSameLine</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 在jsx中把&#x27;&gt;&#x27; 是否单独放一行</span><br>  <span class="hljs-attr">jsxBracketSameLine</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// html 关闭标签换行</span><br>  <span class="hljs-attr">jsxSingleQuote</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 在jsx中使用单引号代替双引号</span><br><br>  <span class="hljs-attr">stylelintIntegration</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//不让prettier使用stylelint的代码格式进行校验</span><br>  <span class="hljs-attr">tslintIntegration</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 不让prettier使用tslint的代码格式进行校验</span><br>  <span class="hljs-attr">eslintIntegration</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//不让prettier使用eslint的代码格式进行校验</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="处理prettier与eslint规则冲突"><a href="#处理prettier与eslint规则冲突" class="headerlink" title="处理prettier与eslint规则冲突"></a>处理prettier与eslint规则冲突</h3><p>在 文件settings.json 中</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;source.fixAll&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 开启其他格式化插件的自动修复</span><br>    <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 禁用eslint自动修复</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>06-工具</category>
      
      <category>编辑工具</category>
      
      <category>vscode</category>
      
      <category>常用插件</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>axios</title>
    <link href="/2022/11/25/03-JS/axios/"/>
    <url>/2022/11/25/03-JS/axios/</url>
    
    <content type="html"><![CDATA[<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>Axios 是一个基于 promise 网络请求库，作用于<code>node.js</code>和浏览器中</p><p>Axios 是专注于网络数据请求的库。<br>相比于原生的 XMLHttpRequest 对象，axios 简单易用。<br>相比于 jQuery，axios 更加轻量化，只专注于网络数据请求</p><blockquote><p>axios一个专注于请求的库</p><p>注意：axios()方法返回的是一个 Promise 实例</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm install axios</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 调用 axios 方法得到的返回值是 Promise 对象</span><br><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-comment">// 请求方式</span><br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-comment">// 请求的地址</span><br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-comment">// URL 中的查询参数 GET请求时用params</span><br>    <span class="hljs-attr">params</span>: &#123;&#125;,<br>    <span class="hljs-comment">// 请求体参数 POST请求时 用data</span><br>    <span class="hljs-attr">data</span>: &#123;&#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;<br>    <br>&#125;)<br></code></pre></td></tr></table></figure><p>注意：属性 params 与 data 二者选一，根据发的是 GET 请求 还是POST请求决定</p><h2 id="axios-直接发请求"><a href="#axios-直接发请求" class="headerlink" title="axios()直接发请求"></a>axios()直接发请求</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 调用 axios 方法得到的返回值是 Promise 对象</span><br><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-comment">// 请求方式</span><br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    <span class="hljs-comment">// 请求的地址</span><br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,<br>    <span class="hljs-comment">// URL 中的查询参数 GET请求时用params</span><br>    <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span><br>    &#125;,<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br>&#125;)<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220809100741659.png" alt="image-20220809100741659"></p><p>真正的数据在 result.data.data 中</p><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>    &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="await与async"><a href="#await与async" class="headerlink" title="await与async"></a>await与async</h3><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><ol><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">[param[, param[, ... param]]]</span>) &#123;<br>    statements<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>返回值：</p><p>一个<code>Promise</code>，这个 promise 要么会通过一个由 async 函数返回的值被解决，要么会通过一个从 async 函数中抛出的（或其中没有被捕获到的）异常被拒绝。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>描述：</p><p>async 函数的函数体可以被看作是由 0 个或者多个 await 表达式分割开来的。<strong>从第一行代码直到（并包括）第一个 await 表达式</strong>（如果有的话）都是<strong>同步</strong>运行的。这样的话，一个不含 await 表达式的 async 函数是会同步运行的。然而，如果函数体内有一个 await 表达式，async 函数就一定会异步执行</p><p>示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">await</span> <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-literal">undefined</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><p>await 表达式会暂停当前 <code>async function</code> 的执行，等待 Promise 处理完成。</p><ul><li>若 Promise 正常处理 (fulfilled)，其回调的 resolve 函数参数作为 await 表达式的值，继续执行 <code>async function</code>。</li><li>若 Promise 处理异常 (rejected)，await 表达式会把 Promise 的异常原因抛出。</li></ul><p>若 Promise 处理异常 (rejected)，await 表达式会把 Promise 的异常原因抛出。</p><p>另外，如果 await 操作符后的表达式的值不是一个 Promise，则返回该值本身。</p><p>某个方法的返回值是 <code>Promise</code> 实例，则前面可以添加 <code>await</code> 但 await 只能用在被 <code>async</code> 修饰的方法中, </p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnGet&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 将获得的数据进行解构，并重命名为res</span><br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: res &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,<br>        <span class="hljs-attr">params</span>: &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-number">1</span><br>        &#125;<br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>&#125;)<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnPost&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 将获得的数据进行解构，并重命名为res</span><br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: res &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,<br>        <span class="hljs-attr">data</span>: &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>        &#125;<br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="axios-get"><a href="#axios-get" class="headerlink" title="axios.get()"></a>axios.get()</h3><p>还可以用 <code>axios.get()</code> <code>axios.post()</code> 直接发起请求</p><blockquote><p>axios.get(url, { params: { id: 1 } })</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnGet&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span><br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: res &#125; = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(url, &#123;<br>        <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;<br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="axios-post"><a href="#axios-post" class="headerlink" title="axios.post()"></a>axios.post()</h3><blockquote><p>axios.post(url, { name: ‘zs’, age: 19 })</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnPost&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span><br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: res &#125; = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">post</span>(url, &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">19</span><br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>XHR</title>
    <link href="/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/WebAPI/XHR/"/>
    <url>/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/WebAPI/XHR/</url>
    
    <content type="html"><![CDATA[<h1 id="XHR"><a href="#XHR" class="headerlink" title="XHR"></a>XHR</h1><blockquote><p><strong>XMLHttpRequest</strong>（简称 xhr）是浏览器提供的 Javascript 对象，通过它，可以请求服务器上的数据资源。之前所学的 jQuery 中的 Ajax 函数，就是基于 xhr 对象封装出来的</p></blockquote><h2 id="xhr的基本使用"><a href="#xhr的基本使用" class="headerlink" title="xhr的基本使用"></a>xhr的基本使用</h2><h3 id="xhr发起get请求"><a href="#xhr发起get请求" class="headerlink" title="xhr发起get请求"></a>xhr发起get请求</h3><p>步骤：</p><ul><li>创建 xhr 对象</li><li>调用 xhr.open() 函数</li><li>调用 xhr.send() 函数</li><li>监听 xhr.onreadystatechange 事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 创建 XHR 对象</span><br><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br><span class="hljs-comment">// 2. 调用 open 函数，指定 请求方式 与 URL地址</span><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>)<br><span class="hljs-comment">// 3. 调用 send 函数，发起 Ajax 请求</span><br>xhr.<span class="hljs-title function_">send</span>()<br><span class="hljs-comment">// 4. 监听 onreadystatechange 事件</span><br>xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 4.1 监听 xhr 对象的请求状态 readyState ；与服务器响应的状态 status</span><br>    <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-comment">// 4.2 打印服务器响应回来的数据</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">responseText</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="xhr对象的readyState属性"><a href="#xhr对象的readyState属性" class="headerlink" title="xhr对象的readyState属性"></a>xhr对象的readyState属性</h3><p>XMLHttpRequest 对象的 readyState 属性，用来表示当前 Ajax 请求所处的状态。每个 Ajax 请求必然处于以下状态中的一个</p><table><thead><tr><th><strong>值</strong></th><th><strong>状态</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>0</td><td>UNSENT</td><td>XMLHttpRequest 对象已被创建，但尚未调用 open方法。</td></tr><tr><td>1</td><td>OPENED</td><td>open() 方法已经被调用。</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td>send() 方法已经被调用，响应头也已经被接收。</td></tr><tr><td>3</td><td>LOADING</td><td>数据接收中，此时 response 属性中已经包含部分数据。</td></tr><tr><td>4</td><td>DONE</td><td>Ajax 请求完成，这意味着数据传输已经彻底完成或失败。</td></tr></tbody></table><h3 id="xhr发起带参数的GET请求"><a href="#xhr发起带参数的GET请求" class="headerlink" title="xhr发起带参数的GET请求"></a>xhr发起带参数的GET请求</h3><p>使用 xhr 对象发起带参数的 GET 请求时，只需在调用 xhr.open 期间，为 URL 地址指定参数即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...省略不必要的代码</span><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks?id=1&#x27;</span>)<br><span class="hljs-comment">// ...省略不必要的代码</span><br><br></code></pre></td></tr></table></figure><p>这种在 URL 地址后面拼接的参数，叫做<strong>查询字符串</strong>。</p><h3 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h3><h4 id="什么是查询字符串"><a href="#什么是查询字符串" class="headerlink" title="什么是查询字符串"></a>什么是查询字符串</h4><ul><li>定义：查询字符串（URL 参数）是指在 URL 的末尾加上用于向服务器发送信息的字符串（变量）。</li><li>格式：将英文的 <code>?</code> 放在URL 的末尾，然后再加上 <code>参数＝值</code> ，想加上多个参数的话，使用 <code>&amp;</code> 符号进行分隔。以这个形式，可以将想要发送给服务器的数据添加到 URL 中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 不带参数的 URL 地址</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//www.liulongbin.top:3006/api/getbooks</span><br><span class="hljs-comment">// 带一个参数的 URL 地址</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//www.liulongbin.top:3006/api/getbooks?id=1</span><br><span class="hljs-comment">// 带两个参数的 URL 地址</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//www.liulongbin.top:3006/api/getbooks?id=1&amp;bookname=西游记</span><br></code></pre></td></tr></table></figure><h4 id="GET请求携带参数的本质"><a href="#GET请求携带参数的本质" class="headerlink" title="GET请求携带参数的本质"></a>GET请求携带参数的本质</h4><p>无论使用 <code>$.ajax()</code>，还是使用 <code>$.get()</code>，又或者直接使用 xhr 对象发起 GET 请求，当需要携带参数的时候，本质上，都是<strong>直接将参数以查询字符串的形式，追加到 URL 地址的后面，发送到服务器的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;url&#x27;</span>, &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;)<br><span class="hljs-comment">// 等价于</span><br>$.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;url?name=zs&amp;age=20&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;)<br><br>$.<span class="hljs-title function_">ajax</span>(&#123; <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;url&#x27;</span>, <span class="hljs-attr">data</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>&#125;, <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125; &#125;)<br><span class="hljs-comment">// 等价于</span><br>$.<span class="hljs-title function_">ajax</span>(&#123; <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;url?name=zs&amp;age=20&#x27;</span>, <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125; &#125;)<br></code></pre></td></tr></table></figure><h3 id="URL编码与解码"><a href="#URL编码与解码" class="headerlink" title="URL编码与解码"></a>URL编码与解码</h3><h4 id="什么是URL编码"><a href="#什么是URL编码" class="headerlink" title="什么是URL编码"></a>什么是URL编码</h4><p>URL 地址中，<strong>只允许</strong>出现英文相关的字母、标点符号、数字，因此，在 URL 地址中<strong>不允许</strong>出现中文字符。<br>如果 URL 中需要包含中文这样的字符，则必须对中文字符进行编码（转义）。</p><p>URL编码的原则：使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符。<br>URL编码原则的通俗理解：使用英文字符去表示非英文字符。</p><h4 id="如何对URL编码与解码"><a href="#如何对URL编码与解码" class="headerlink" title="如何对URL编码与解码"></a>如何对URL编码与解码</h4><p>浏览器提供了 URL 编码与解码的 API，分别是：</p><ul><li>encodeURI()  编码的函数</li><li>decodeURI()  解码的函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">encodeURI</span>(<span class="hljs-string">&#x27;黑马程序员&#x27;</span>)<br><span class="hljs-comment">// 输出字符串  %E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98</span><br><span class="hljs-built_in">decodeURI</span>(<span class="hljs-string">&#x27;%E9%BB%91%&#x27;</span>)<br><span class="hljs-comment">// 输出字符串  黑</span><br><span class="hljs-built_in">decodeURI</span>(<span class="hljs-string">&#x27;%E9%BB%91%E9%A9%AC&#x27;</span>)<br><span class="hljs-comment">// 输出字符串  黑马</span><br><br></code></pre></td></tr></table></figure><h3 id="xhr发起POST请求"><a href="#xhr发起POST请求" class="headerlink" title="xhr发起POST请求"></a>xhr发起POST请求</h3><p>步骤：</p><ul><li>创建 xhr 对象</li><li>调用 xhr.open() 函数</li><li><strong>设置 Content-Type 属性（固定写法</strong>）</li><li>调用 xhr.send() 函数，同时<strong>指定要发送的数据</strong></li><li>监听 xhr.onreadystatechange 事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 创建 xhr 对象</span><br><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br><span class="hljs-comment">// 2. 调用 open()</span><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>)<br><span class="hljs-comment">// 3. 设置 Content-Type 属性（固定写法）</span><br>xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>)<br><span class="hljs-comment">// 4. 调用 send()，同时将数据以查询字符串的形式，提交给服务器</span><br>xhr.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;bookname=水浒传&amp;author=施耐庵&amp;publisher=天津图书出版社&#x27;</span>)<br><span class="hljs-comment">// 5. 监听 onreadystatechange 事件</span><br>xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">responseText</span>)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="数据交换格式"><a href="#数据交换格式" class="headerlink" title="数据交换格式"></a>数据交换格式</h2><p>数据交换格式，就是服务器端与客户端之间进行数据传输与交换的格式。<br>前端领域，经常提及的两种数据交换格式分别是 <code>XML</code> 和 <code>JSON</code>。其中 XML 用的非常少，所以，我们重点要学习的数据交换格式就是 JSON</p><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><h4 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h4><p>XML 的英文全称是 EXtensible Markup Language，即可扩展标记语言。因此，XML 和 HTML 类似，也是一种标记语言</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>ls<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>zs<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>通知<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>晚上开会<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="XML与HTML区别"><a href="#XML与HTML区别" class="headerlink" title="XML与HTML区别"></a>XML与HTML区别</h4><p>XML 和 HTML 虽然都是标记语言，但是，它们两者之间没有任何的关系。</p><ul><li>HTML 被设计用来描述网页上的内容，是<strong>网页内容的载体</strong></li><li>XML 被设计用来传输和存储数据，是<strong>数据的载体</strong></li></ul><h4 id="XML缺点"><a href="#XML缺点" class="headerlink" title="XML缺点"></a>XML缺点</h4><ul><li>XML 格式臃肿，和数据无关的代码多，体积大，传输效率低</li><li>在 Javascript 中解析 XML 比较麻烦</li></ul><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><h4 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是JSON</h4><ul><li>概念：JSON 的英文全称是 JavaScript Object Notation，即“JavaScript 对象表示法”。简单来讲，JSON 就是 Javascript 对象和数组的字符串表示法，它使用文本表示一个 JS 对象或数组的信息，因此，JSON 的本质是字符串。</li><li>作用：JSON 是一种轻量级的文本数据交换格式，在作用上类似于 XML，专门用于存储和传输数据，但是 JSON 比 XML 更小、更快、更易解析。</li><li>现状：JSON 是在 2001 年开始被推广和使用的数据格式，到现今为止，JSON 已经成为了主流的数据交换格式。</li></ul><h4 id="JSON的两种结构"><a href="#JSON的两种结构" class="headerlink" title="JSON的两种结构"></a>JSON的两种结构</h4><p>JSON 就是用字符串来表示 Javascript 的<strong>对象和数组</strong>。所以，JSON 中包含<strong>对象</strong>和<strong>数组</strong>两种结构，通过这两种结构的相互嵌套，可以表示各种复杂的数据结构。</p><h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><p>对象结构：对象结构在 JSON 中表示为 { } 括起来的内容。数据结构为 { key: value, key: value, … } 的键值对结构。</p><ul><li>key 必须是使用<strong>英文的双引号包裹</strong>的字符串</li><li>value 的数据类型可以是<strong>数字、字符串、布尔值、null、数组、对象</strong>6种类型</li></ul><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;zs&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-string">&quot;gender&quot;</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>    <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;hobby&quot;</span>: [<span class="hljs-string">&quot;吃饭&quot;</span>, <span class="hljs-string">&quot;睡觉&quot;</span>, <span class="hljs-string">&quot;打豆豆&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p>数组结构在 JSON 中表示为 [ ] 括起来的内容。数据结构为 [ “java”, “javascript”, 30, true … ] 。</p><p>数组中数据的类型可以是<strong>数字、字符串、布尔值、null、数组、对象</strong>6种类型</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">[ <span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;php&quot;</span> ]<br>[ <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300.5</span> ]<br>[ <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span> ]<br>[ &#123; <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">20</span>&#125;, &#123; <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>&#125; ]<br>[ [ <span class="hljs-string">&quot;苹果&quot;</span>, <span class="hljs-string">&quot;榴莲&quot;</span>, <span class="hljs-string">&quot;椰子&quot;</span> ], [ <span class="hljs-number">4</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span> ] ]<br><br></code></pre></td></tr></table></figure><h4 id="JSON语法注意事项"><a href="#JSON语法注意事项" class="headerlink" title="JSON语法注意事项"></a>JSON语法注意事项</h4><ul><li>属性名<strong>必</strong>须使用双引号包裹</li><li>字符串类型的值<strong>必</strong>须使用双引号包裹</li><li>JSON 中<strong>不</strong>允许使用单引号表示字符串</li><li>JSON 中<strong>不</strong>能写注释</li><li>JSON 的最外层<strong>必</strong>须是对象或数组格式</li><li><strong>不</strong>能使用 undefined 或函数作为 JSON 的值</li></ul><p>JSON 的作用：在计算机与网络之间存储和传输数据</p><h4 id="JSON与JS对象关系"><a href="#JSON与JS对象关系" class="headerlink" title="JSON与JS对象关系"></a>JSON与JS对象关系</h4><p>JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//这是一个对象</span><br><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;World&#x27;</span>&#125;<br><br><span class="hljs-comment">//这是一个 JSON 字符串，本质是一个字符串</span><br><span class="hljs-keyword">var</span> json = <span class="hljs-string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="JSON和JS对象的互转"><a href="#JSON和JS对象的互转" class="headerlink" title="JSON和JS对象的互转"></a>JSON和JS对象的互转</h4><ul><li><p>要实现从 JSON 字符串转换为 JS 对象，使用 JSON.parse() 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>)<br><span class="hljs-comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>把字符串转换为数据对象的过程，叫做<strong>反序列化</strong></p><p>调用 JSON.parse() 函数的操作，叫做 JSON 反序列化</p></blockquote></li><li><p>要实现从 JS 对象转换为 JSON 字符串，使用 JSON.stringify() 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> json = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;World&#x27;</span>&#125;)<br><span class="hljs-comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>把数据对象转换为字符串的过程，叫做<strong>序列化</strong></p><p>调用 JSON.stringify() 函数的操作，叫做 JSON 序列化</p></blockquote></li></ul><h2 id="封装自己的Ajax"><a href="#封装自己的Ajax" class="headerlink" title="封装自己的Ajax"></a>封装自己的Ajax</h2><p>定义myAjax()函数，接收一个配置对象作为参数，配置对象中可以配置，如下属性：</p><ul><li>method 请求的类型</li><li>url 请求的URL地址</li><li>data 请求携带的参数</li><li>success 请求成功后的回调函数</li></ul><ol><li>其中data对象需要转换为为查询字符串的形式，拼接到url地址后面，从而提交给服务器，因此需要先定义个函数用于处理data对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolveData</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">var</span> arr = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> data) &#123;<br>        arr.<span class="hljs-title function_">push</span>(k + <span class="hljs-string">&#x27;=&#x27;</span> + data[k]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>定义myAjax函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">mAjax</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-comment">// 创建XMLHttpRequest实例对象</span><br>    <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    <span class="hljs-comment">// 拼接查询字符串</span><br>    <span class="hljs-keyword">var</span> qs = <span class="hljs-title function_">resolveData</span>(options.<span class="hljs-property">data</span>)<br>    <br>    <span class="hljs-comment">// 此部分不同请求写法不同</span><br>   <span class="hljs-comment">// GET请求</span><br>    <span class="hljs-comment">// POST请求</span><br>    <br>    <span class="hljs-comment">// 监听请求状态改变的事件</span><br>    xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>);<br>            options.<span class="hljs-title function_">success</span>(result)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>不同请求xhr对象的不同操作</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(options.<span class="hljs-property">method</span>.<span class="hljs-title function_">toUpperCase</span>() === <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>    xhr.<span class="hljs-title function_">open</span>(options.<span class="hljs-property">method</span>, options.<span class="hljs-property">url</span> + <span class="hljs-string">&#x27;?&#x27;</span> + qs);<br>    xhr.<span class="hljs-title function_">send</span>();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (options.<span class="hljs-property">method</span>.<span class="hljs-title function_">toUpperCase</span>() === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    xhr.<span class="hljs-title function_">open</span>(options.<span class="hljs-property">method</span>, options.<span class="hljs-property">url</span>);<br>    xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>);<br>    xhr.<span class="hljs-title function_">send</span>(qs);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="XMLHttpRequest-Level2新特性"><a href="#XMLHttpRequest-Level2新特性" class="headerlink" title="XMLHttpRequest Level2新特性"></a>XMLHttpRequest Level2新特性</h2><ul><li>可以设置 HTTP 请求的时限</li><li>可以使用 FormData 对象管理表单数据</li><li>可以上传文件</li><li>可以获得数据传输的进度信息</li></ul><h3 id="设置HTTP请求时限"><a href="#设置HTTP请求时限" class="headerlink" title="设置HTTP请求时限"></a>设置HTTP请求时限</h3><p>有时，Ajax 操作很耗时，而且无法预知要花多少时间。如果网速很慢，用户可能要等很久。新版本的 XMLHttpRequest 对象，增加了 timeout 属性，可以设置 HTTP 请求的时限</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 将最长等待时间设为 3000 毫秒。过了这个时限，就自动停止HTTP请求</span><br>xhr.<span class="hljs-property">timeout</span> = <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 与之配套的还有一个 timeout 事件，用来指定回调函数</span><br>xhr.<span class="hljs-property">ontimeout</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br>     <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请求超时！&#x27;</span>)<br> &#125;<br><br></code></pre></td></tr></table></figure><h2 id="jQuery高级"><a href="#jQuery高级" class="headerlink" title="jQuery高级"></a>jQuery高级</h2><ul><li><p>创建 XMLHttpRequest 对象的语法：</p><p><em>variable</em>=new XMLHttpRequest();</p></li><li><p>老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：</p><p><em>variable</em>=new ActiveXObject(“Microsoft.XMLHTTP”);</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xmlhttp;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>)<br>&#123;<br>    <span class="hljs-comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span><br>    xmlhttp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-comment">// IE6, IE5 浏览器执行代码</span><br>    xmlhttp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>JS语法</category>
      
      <category>WebAPI</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ajax</title>
    <link href="/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/WebAPI/Ajax/"/>
    <url>/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/WebAPI/Ajax/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h3><p>使用Ajax请求数据时，<strong>被请求的URL地址</strong>，叫做数据接口（简称接口） 同时，每个接口必须有<strong>请求方式</strong></p><h3 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h3><p>postman</p><h3 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h3><ol><li><p>什么是接口文档</p><p>即接口的说明文档，是调用接口的依据。好的接口文档包含了对接口URL、参数以及输出内容的说名，参照接口文档就能方便的知道接口的作用，以及接口如何进行调用</p></li><li><p>接口文档的组成部分</p><ul><li>接口名称：用来表示各个接口的简单说明，如 登录接口、获取图书列表接口</li><li>接口URL：接口的调用地址</li><li>调用方式：接口的调用方式，如 GET 或 POST</li><li>参数格式：接口需要传递的参数，每个参数必须包含 参数名称、参数类型、是否必选、参数说明 这四项内容</li><li>响应格式：接口的返回值的详细描述，一般包含数据名称、数据类型、说明3项内容</li><li>返回示例（可选）：通过对象的形式，例举服务器返回数据的结构</li></ul></li></ol><h2 id="初识Ajax"><a href="#初识Ajax" class="headerlink" title="初识Ajax"></a>初识Ajax</h2><h3 id="服务器对外提供的资源"><a href="#服务器对外提供的资源" class="headerlink" title="服务器对外提供的资源"></a>服务器对外提供的资源</h3><ol><li><p>网页中如何请求数据</p><p>数据也是服务器对外提供的一种资源，只要是资源，必然要通过 请求-处理-响应 的方式进行获取</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06 前后端交互/image-20220516103521159.png" alt="image-20220516103521159" style="zoom:40%;" /><p>若要在网页中请求服务器上的数据资源，则需要用到XMLHttpRequest对象，简称xhr，是浏览器提供的js成员，可以请求服务器上的数据资源。</p><blockquote><p>最简单的用法： var xhrObj = new XMLHttpRequest()</p></blockquote></li><li><p>资源的请求方式</p><p>客户端请求服务时，请求的方式有很多，最常见的两种请求方式分别为：get 和 post</p><ul><li><p><strong>get</strong>请求 通常用于<strong>获取</strong>服务端资源（向服务端要资源）</p><p>例如：根据URL地址，从服务器获取HTML文件，CSS文件、js文件，图片文件，数据资源等</p></li><li><p><strong>post</strong>请求 通常用于向服务器<strong>提交</strong>数据（往服务器发送资源）</p><p>例如：登录时向服务器提交的登录信息，注册时向服务器提交的注册信息，添加用户时向服务器提交用户信息等各种数据提交操作</p></li></ul></li></ol><h3 id="Ajax是什么"><a href="#Ajax是什么" class="headerlink" title="Ajax是什么"></a>Ajax是什么</h3><p>Ajax全称：Asynchronous Javascript And XML（异步Javascript和XML）</p><p>通俗理解：在网页中利用XMLHttpRequest对象和服务器进行数据交互的方式，就是Ajax</p><p>Ajax的作用：Ajax可以实现<strong>网页和服务器</strong>之间的<strong>数据交互</strong></p><p>典型应用：</p><ul><li>用户名检测，注册用户时，通过Ajax的形式，动态检测用户名是否被占用</li><li>搜索提示：当输入关键字时，通过Ajax形式，动态加载搜索提示列表</li><li>数据分页显示：当点击页码时，通过Ajax的形式，根据页码值动态刷新表格的数据</li><li>数据的增删改查</li></ul><p>补充：</p><p>共有几种callback</p><p>abort()方法——取消/停止未完成的请求</p><p>readyState属性的状态</p><h2 id="jquery中的Ajax"><a href="#jquery中的Ajax" class="headerlink" title="jquery中的Ajax"></a>jquery中的Ajax</h2><p>由于XMLHttpRequest用法比较复杂，所以jQuery对XMLHttpRequest进行封装，提供了Ajax相关的函数，极大地降低了Ajax的使用难度</p><p>jQuery中的Ajax请求最常用的三个方法如下：</p><ul><li>$.get()</li><li>$.post()</li><li>$.ajax()</li></ul><h3 id="get-函数语法"><a href="#get-函数语法" class="headerlink" title="$.get()函数语法"></a>$.get()函数语法</h3><p>专门用来发起get请求，从而将服务器上的资源请求到客户端来进行使用</p><p>语法：</p><blockquote><p>$.get(url, [data], [callback])</p></blockquote><p>参数说明：</p><table><thead><tr><th>参数名</th><th>参数类型</th><th>是否必选</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>是</td><td>要请求的资源地址</td></tr><tr><td>data</td><td>object</td><td>否</td><td>请求资源期间要携带的参数</td></tr><tr><td>callback</td><td>function</td><td>否</td><td>请求成功时的回调函数</td></tr></tbody></table><ol><li><p>$.get()发起<strong>不带参数</strong>的请求</p><p>不带参数时，直接提供请求的URL地址和请求成功之后的回调函数即可，如下：</p><blockquote><p>$.get(‘url’, function(res) {</p><p>​    console.log(res)     // 这里的res时服务器返回的数据</p><p>})</p></blockquote></li><li><p>$.get()发起<strong>带参数</strong>的请求</p><p>如下：</p><blockquote><p>$.get(‘url’, {id: 1}, function(res) {</p><p>​    console.log(res)     // 这里的res时服务器返回的数据</p><p>})</p></blockquote></li></ol><p>示例：</p><p>不带参数的get请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnGET&quot;</span>&gt;</span>不带参数的get请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;#btnGET&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>带参数的get请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnGET&quot;</span>&gt;</span>带参数的get请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;#btnGET&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="post-函数语法"><a href="#post-函数语法" class="headerlink" title="$.post()函数语法"></a>$.post()函数语法</h3><p>专门用于发起post请求，从而向服务器提交数据</p><p>语法：</p><blockquote><p>$.post(url, [data], [callback])</p></blockquote><p>参数说明：</p><table><thead><tr><th>参数名</th><th>参数类型</th><th>是否必选</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>是</td><td>提交数据的地址</td></tr><tr><td>data</td><td>object</td><td>否</td><td>要提交的数据</td></tr><tr><td>callback</td><td>function</td><td>否</td><td>数据提交成功时的回调函数</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnPOST&quot;</span>&gt;</span>发起POST请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;#btnPOST&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>, &#123; <span class="hljs-attr">bookname</span>: <span class="hljs-string">&#x27;水浒传&#x27;</span>, <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;施耐庵&#x27;</span>, <span class="hljs-attr">publisher</span>: <span class="hljs-string">&#x27;天津图书出版社&#x27;</span> &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="ajax函数语法"><a href="#ajax函数语法" class="headerlink" title="$.ajax函数语法"></a>$.ajax函数语法</h3><p>$.ajax()是一个功能比较综合的函数，允许我们对Ajax请求进行更详细的配置</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;&#x27;</span>,    <span class="hljs-comment">// 请求的方式，如：GET 或 POST</span><br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;&#x27;</span>,     <span class="hljs-comment">// 请求的URL 地址</span><br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;&#x27;</span>,    <span class="hljs-comment">// 这次请求要携带的数据</span><br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123; &#125;   <span class="hljs-comment">// 请求成功后的回调函数</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol><li><p><strong>$.ajax()发起GET请求</strong></p><p>只需要将type属性的值设置为 GET 即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,    <span class="hljs-comment">// 请求的方式，如：GET 或 POST 大小写均可</span><br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,     <span class="hljs-comment">// 请求的URL 地址</span><br>    <span class="hljs-attr">data</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;,    <span class="hljs-comment">// 这次请求要携带的数据</span><br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>    &#125;   <span class="hljs-comment">// 请求成功后的回调函数</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p><strong>$.ajax()发起POST请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,  <span class="hljs-comment">// 请求的方式，如：GET 或 POST</span><br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,  <span class="hljs-comment">// 请求的URL 地址</span><br>    <span class="hljs-attr">data</span>: &#123;<span class="hljs-comment">// 要提交给服务器的数据</span><br>        <span class="hljs-attr">bookname</span>: <span class="hljs-string">&#x27;书名xxxx&#x27;</span>,<br>        <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;作者&#x27;</span>,<br>        <span class="hljs-attr">publisher</span>: <span class="hljs-string">&#x27;出版社&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;  <span class="hljs-comment">// 请求成功后的回调函数</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnGET&quot;</span>&gt;</span>ajax发起GET请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnPOST&quot;</span>&gt;</span>ajax发起POST请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;#btnGET&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 利用$.ajax()发起GET请求</span></span><br><span class="language-javascript">                $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-comment">// 请求的方式，如：GET 或 POST</span></span><br><span class="language-javascript">                    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, <span class="hljs-comment">// 请求的URL 地址</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// data: &#123; id: 1 &#125;,// 这次请求要携带的数据</span></span><br><span class="language-javascript">                    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<span class="hljs-comment">// 请求成功后的回调函数</span></span><br><span class="language-javascript">                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;#btnPOST&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 利用$.ajax()发起GET请求</span></span><br><span class="language-javascript">                $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-comment">// 请求的方式，如：GET 或 POST</span></span><br><span class="language-javascript">                    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,  <span class="hljs-comment">// 请求的URL 地址</span></span><br><span class="language-javascript">                    <span class="hljs-attr">data</span>: &#123;<span class="hljs-comment">// 要提交给服务器的数据</span></span><br><span class="language-javascript">                        <span class="hljs-attr">bookname</span>: <span class="hljs-string">&#x27;书名xxxx&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;作者&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">publisher</span>: <span class="hljs-string">&#x27;出版社&#x27;</span></span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<span class="hljs-comment">// 请求成功后的回调函数</span></span><br><span class="language-javascript">                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>JS语法</category>
      
      <category>WebAPI</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vite</title>
    <link href="/2022/11/25/04-VUE/%E5%B7%A5%E5%85%B7/Vite/vite/"/>
    <url>/2022/11/25/04-VUE/%E5%B7%A5%E5%85%B7/Vite/vite/</url>
    
    <content type="html"><![CDATA[<h3 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>与Vue CLI类似，<strong>Vite也是一个提供基本项目脚手架和开发服务器的构建工具。</strong></p><p>然而，Vite并不是基于Webpack的，它有自己的开发服务器，利用浏览器中的原生ES模块。这种架构使得Vite比Webpack的开发服务器快了好几个数量级。Vite采用Rollup进行构建，速度也更快</p><ul><li>它是一个更加轻量（热更新速度快，打包构建速度快）的vue项目脚手架工具。</li><li>相对于vue-cli它默认安装的插件非常少，随着开发过程依赖增多，需要自己额外配置。</li></ul><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 创建工程</span><br>npm init vite-app &lt;project-name&gt;<br><span class="hljs-comment">## 进入工程目录</span><br><span class="hljs-built_in">cd</span> &lt;project-name&gt;<br><span class="hljs-comment">## 安装依赖</span><br>npm install<br><span class="hljs-comment">## 运行</span><br>npm run dev<br></code></pre></td></tr></table></figure><ol><li><p>创建项目</p><p><code>npm create vite@latest my-vue-app -- --template vue</code></p><p>( <code>npm init vite-app</code> 项目名称 或者 <code>yarn create vite-app</code> 项目名称)</p></li><li><p>安装依赖 <code>npm i</code>或者 <code>yarn</code></p></li><li><p>启动项目 <code>npm run dev</code> 或者 <code>yarn dev</code></p></li></ol><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><table><thead><tr><th>Vite 优点</th><th>Vite 缺点</th></tr></thead><tbody><tr><td>开发服务器比Webpack快10-100倍</td><td>只能针对现代浏览器（ES2015+）</td></tr><tr><td>将code-splitting作为优先事项</td><td>与CommonJS模块不完全兼容</td></tr><tr><td></td><td>处于测试阶段，<strong>仅支持Vue 3</strong></td></tr><tr><td></td><td>最小的脚手架不包括Vuex、路由器等</td></tr><tr><td></td><td>不同的开发服务器与构建工具</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>04-VUE</category>
      
      <category>工具</category>
      
      <category>Vite</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue-cli</title>
    <link href="/2022/11/25/04-VUE/%E5%B7%A5%E5%85%B7/vue-cli/vue-cli/"/>
    <url>/2022/11/25/04-VUE/%E5%B7%A5%E5%85%B7/vue-cli/vue-cli/</url>
    
    <content type="html"><![CDATA[<h3 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h3><p>安装: <code>npm install -g @vue/cli</code></p><p>使用: <code>vue create 项目名称</code></p><p>Vue cli 在服务启动之前，要把所有代码打包成 Bundle 再启动服务。这就是为什么启动一些大型项目时，特别慢的原因。这一点上 Vite 做了大幅改善。</p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><table><thead><tr><th>Vue CLI 优点</th><th>Vue CLI 缺点</th></tr></thead><tbody><tr><td>经历过战斗考验，可靠</td><td>开发服务器速度与依赖数量成反比</td></tr><tr><td>与Vue 2兼容</td><td></td></tr><tr><td>可以捆绑任何类型的依赖关系</td><td></td></tr><tr><td>插件生态系统</td><td></td></tr><tr><td>可以针对不同的目标进行构建</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>04-VUE</category>
      
      <category>工具</category>
      
      <category>vue-cli</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>响应式布局</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%B8%83%E5%B1%80/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%B8%83%E5%B1%80/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h1><ul><li>媒体查询</li><li>bootstrap</li></ul><h2 id="阿里百秀图"><a href="#阿里百秀图" class="headerlink" title="阿里百秀图"></a>阿里百秀图</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>bootstrap里面的样式很多都自带内边距，注意在不需要内边距的时候清除</p></li><li><p>放在html里面的图片需要跟随屏幕大小的变化而变化，可以将图片大小设置为父级的100%，自适应大小</p></li><li><p><strong>字体图标</strong>的做法：bootstrap里面提供了css组件，只需要找到对应图标，然后复制类名添加到相应标签上即可，但可能字体图标与文字对齐方式、内外边距等需要修改，可以查看提供的字体图标实现方式，会发现是为该标签元素添加了一个伪元素before，因此将该伪元素选择出来，然后更改其相关样式就可以了</p></li><li><p>栅格系统的空白缝隙做法：</p><p>每个列之间本来时没有缝隙的，不能直接加margin值来添加列之间的缝隙，会将一行中后面的列挤到下一行，但可以为列添加padding-right值，然后再在列里面新建一个盒子来装内容，这样盒子与盒子之间就存在空白缝隙了，且不会将一行上的列挤到下一行</p></li><li><p>清除浮动：直接添加类名clearfix（bootstrap已经写好了）</p></li><li><p>字体颜色在css样式里面的【辅助类】处，找到文本颜色，选择目标颜色，复制对应的类名添加上就可以了</p></li><li><p>超小屏幕下隐藏：添加类名 “hidden-xs”</p><p>超小屏幕下显示：“visible-xs”，其他情况都是隐藏</p></li><li><p>行内元素设置不了外边距？？</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>布局</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>流式布局</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%B8%83%E5%B1%80/%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%B8%83%E5%B1%80/%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h1><h2 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h2><h3 id="背景缩放background-size"><a href="#背景缩放background-size" class="headerlink" title="背景缩放background-size"></a>背景缩放background-size</h3><ul><li>属性值：数值(单位为px) | 百分比 | cover | contain</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/dog.jpg</span>) no-repeat;<br><br><span class="hljs-comment">/* background-size: 图片的宽度 图片的高度; */</span><br><span class="hljs-attribute">background-size</span>: <span class="hljs-number">500px</span> <span class="hljs-number">200px</span>;<br><br><span class="hljs-comment">/* 1.只写一个参数 肯定是宽度 高度省略了  会等比例缩放 */</span><br><span class="hljs-attribute">background-size</span>: <span class="hljs-number">500px</span>;<br><br><span class="hljs-comment">/* 2. 里面的单位可以跟%  相对于父盒子来说的 */</span><br><span class="hljs-attribute">background-size</span>: <span class="hljs-number">50%</span>;<br><br><span class="hljs-comment">/* 3. cover 等比例拉伸 要完全覆盖div盒子  可能有部分背景图片显示不全 */</span><br><span class="hljs-attribute">background-size</span>: cover;<br><br><span class="hljs-comment">/* 4. contain 高度和宽度等比例拉伸 当宽度 或者高度 铺满div盒子就不再进行拉伸了 可能有部分空白区域 */</span><br><span class="hljs-attribute">background-size</span>: contain;<br></code></pre></td></tr></table></figure><h2 id="京东首页案例"><a href="#京东首页案例" class="headerlink" title="京东首页案例"></a>京东首页案例</h2><p>根据京东移动端页面完成本案例 </p><p><a href="https://m.jd.com/">https://m.jd.com</a></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>设置了line-height与盒子height一致，但盒子内部的图片没有居中对齐</p><p>原因：</p><p>图片默认与文字的基线对齐</p><p>解决：</p><p>要使图片在行内垂直居中对齐，需要设置<code>vertical-align: middle;</code></p></li><li><p>实现过程中，发现有些图片下方存在空隙，如何解决？</p><p>解决：同问题1，将vertical-align设置为middle或者top</p></li><li><p>搜索框的制作，在放大缩小屏幕大小时，如何保证左右两边的盒子宽度不变，只有中间的搜索框宽度变化</p><p>解决：左右两边利用定位解决；中间搜索框不定位，直接利用标准流会直接占用位置，并且直给高度，不给宽度，然后给一个固定的左右外边距，那么缩小放大时，中间盒子的外边距不变，宽度随屏幕宽度放大缩小，两侧也不会变化</p></li><li><p>出现为子元素添加外边距，父盒子也出现外边距的情况——外边距合并</p><p>解决：为父盒子添加overflow:hidden;</p></li><li><p>小竖线如何写</p><p>解决：竖线可以看成一个宽1px的盒子，（小图片、图标还可以使用伪元素来实现，::before ::after 使用时要设置宽高时，需要转为块级元素）</p></li><li><p>二倍精灵图如何使用？</p><ul><li><p>在firework里面把精灵图等比例缩放为原来的一半（不要保存）</p></li><li><p>之后根据大小 测量坐标</p></li><li><p>注意代码里面background-size也要写： 精灵图原来宽度的一半</p></li></ul></li><li><p>.dpg格式、.webp格式的图片</p></li><li><p>制作banner模块时，由于banner展示的背景是在search处开始的，且向下滑动时，search模块是固定在屏幕上方的，因此需要修改search模块的定位方式</p><p>解决：将search处的定位改为固定定位；之前只给了search模块高度</p></li><li><p>快捷方式：<strong>快速定位到某一行</strong></p><p>ctrl+g 在出现的输入框中输入需要跳转的行号，按下enter即可到指定的一行</p></li><li><p>行内元素加了浮动之后，设置宽高时，就可以不需要转换成块级元素了</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>布局</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>rem布局</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%B8%83%E5%B1%80/rem%E5%B8%83%E5%B1%80/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%B8%83%E5%B1%80/rem%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="rem布局"><a href="#rem布局" class="headerlink" title="rem布局"></a>rem布局</h1><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><h2 id="Less基础"><a href="#Less基础" class="headerlink" title="Less基础"></a>Less基础</h2><h2 id="rem适配方案"><a href="#rem适配方案" class="headerlink" title="rem适配方案"></a>rem适配方案</h2><h2 id="苏宁易购首页案例"><a href="#苏宁易购首页案例" class="headerlink" title="苏宁易购首页案例"></a>苏宁易购首页案例</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>所有宽和高都写为</p><p>元素宽或高rem / baseFont，如：88rem / @baseFont，其中@baseFont是一个less变量</p></li><li><p>使用rem布局时，添加背景注意背景缩放，背景缩放的大小应与盒子的大小一致，将宽和高都要写死</p><p>所有需要使用到大小的都需要换成相应的以rem为单位的值</p></li><li><p>去除input获取光标时的蓝色边框</p><p><code>outline: none;</code></p></li><li><p>less插件中为了保证严谨性，<strong>除法需要添加括号</strong>的。</p></li><li><p>一定要注意图片或者文字大部分都放在链接里面</p></li></ol><h3 id="rem适配方案2——flexible-js简介"><a href="#rem适配方案2——flexible-js简介" class="headerlink" title="rem适配方案2——flexible.js简介"></a>rem适配方案2——flexible.js简介</h3><p>flexible下载地址：</p><p><a href="https://github.com/amfe/lib-flexible">https://github.com/amfe/lib-flexible</a></p><p>神奇的插件cssrem：输入像素值，可以直接转换为rem</p><p>cssrem中默认16px = 1rem，因此需要根据实际情况中的rem换算为多少px来设置cssrem</p>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>布局</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器兼容处理</title>
    <link href="/2022/11/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E5%A4%84%E7%90%86/"/>
    <url>/2022/11/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="浏览器私有前缀"><a href="#浏览器私有前缀" class="headerlink" title="==浏览器私有前缀=="></a>==浏览器私有前缀==</h3><p>为了兼容老版本写法，新版本的浏览器无需添加</p><h4 id="私有前缀"><a href="#私有前缀" class="headerlink" title="私有前缀"></a>私有前缀</h4><ul><li><code>-moz-</code> 代表firefox浏览器私有属性</li><li><code>-ms-</code> 代表ie浏览器私有属性</li><li><code>-webkit</code> 代表safari chrome 私有属性</li><li><code>-o-</code> 代表Opera私有属性</li></ul><h4 id="提倡写法"><a href="#提倡写法" class="headerlink" title="提倡写法"></a>提倡写法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">-moz-border-radius: 10px;<br>-webkit-border-radius: 10px;<br>-o-border-radius: 10px;<br>border-radius: 10px;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Sass</title>
    <link href="/2022/11/25/02-CSS/SASS/Sass/"/>
    <url>/2022/11/25/02-CSS/SASS/Sass/</url>
    
    <content type="html"><![CDATA[<h1 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h1><p>参考：<a href="https://www.runoob.com/sass/sass-tutorial.html">https://www.runoob.com/sass/sass-tutorial.html</a></p><p>Sass 是一个 CSS 预处理器。</p><p>Sass 是 CSS 扩展语言，可以帮助我们减少 CSS 重复的代码，节省开发时间。</p><p>Sass 完全兼容所有版本的 CSS。</p><p>Sass 扩展了 CSS3，增加了规则、变量、混入、选择器、继承、内置函数等等特性。</p><p>Sass 生成良好格式化的 CSS 代码，易于组织和维护。</p><p>Sass 文件后缀为 <strong>.scss</strong>。</p><h2 id="sass变量"><a href="#sass变量" class="headerlink" title="sass变量"></a>sass变量</h2><p>Sass 变量使用 <strong>$</strong> 符号：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$variablename</span>: value;</span><br></code></pre></td></tr></table></figure><h2 id="extend-与继承"><a href="#extend-与继承" class="headerlink" title="@extend 与继承"></a>@extend 与继承</h2><p>@extend 指令告诉 Sass 一个选择器的样式从另一选择器继承</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.button-basic</span>  &#123;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.button-report</span>  &#123;<br>  <span class="hljs-keyword">@extend</span> .button-basic;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>​</p>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>SASS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Canvas</title>
    <link href="/2022/11/25/03-JS/Canvas/Canvas/"/>
    <url>/2022/11/25/03-JS/Canvas/Canvas/</url>
    
    <content type="html"><![CDATA[<h1 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h1>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>Canvas</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS3基础</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS3%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS3%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h2><p>新增了选择器：</p><ul><li>属性选择器</li><li>结构伪类选择器</li><li>伪元素选择器</li></ul><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>属性选择器可以根据元素特定属性来选择元素（这样就不用借助于类或者id选择器）</p><table><thead><tr><th>选择符</th><th>描述</th></tr></thead><tbody><tr><td>E[att]</td><td>选择具有att属性的E元素</td></tr><tr><td>E[att=“val”]</td><td>选择具有att属性且属性值<strong>等于val</strong>的E元素</td></tr><tr><td>E[att^=“val”]</td><td>匹配具有att属性且值<strong>以val开头</strong>的E元素</td></tr><tr><td>E[att$=“val”]</td><td>匹配具有att属性且值<strong>以val结尾</strong>的E元素</td></tr><tr><td>E[att*=“val”]</td><td>匹配具有att属性且值中<strong>含有val</strong>的E元素</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 选择含有属性value的 */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value]</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 选择type属性且属性值为text */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: aqua;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 选择name属性且其值以icon开始的 */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[name^=icon]</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: #<span class="hljs-number">#369</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 选择name属性且其值以icon结尾的 */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[name$=icon]</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: #<span class="hljs-number">#2af</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 选择name属性且其值中含有icon的 */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[name*=icon]</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: #<span class="hljs-number">#a0a</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p style="color:red">    注意：类选择器、属性选择器、伪类选择器，权重为10</p><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>结构伪类选择器主要根据<strong>文档结构</strong>来选择元素，常用于根据父级选择器里面的子元素</p><table><thead><tr><th>选择符</th><th>描述</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配父元素中的第一个元素E</td></tr><tr><td>E:last-child</td><td>匹配父元素中的最后一个元素E元素</td></tr><tr><td>E:nth-child(n)</td><td>匹配父元素中的第n个子元素E</td></tr><tr><td>E:firt-of-type</td><td>指定类型E的第一个</td></tr><tr><td>E:last-of-type</td><td>指定类型E的最后一个</td></tr><tr><td>E:nth-of-type(n)</td><td>指定类型E的第n个</td></tr></tbody></table><p style="color:red">    注意nth-child(n)：</p><ul><li>n可以是数字、关键字和公式<ul><li>关键字可为even(偶数)、odd(奇数)</li></ul></li><li><strong>n若是数字</strong>，即选择第n个子元素，里面数字<strong>从1开始</strong></li><li>n可以是关键字：even为偶数，odd为奇数</li><li>n可以是公式：<strong>若n是公式</strong>，则n<strong>从0开始</strong>计算，但第0个元素或者超出了元素的个数会被忽略</li></ul><table><thead><tr><th>公式</th><th>取值</th></tr></thead><tbody><tr><td>2n</td><td>偶数</td></tr><tr><td>2n+1</td><td>奇数</td></tr><tr><td>5n</td><td>5 10 15 ……</td></tr><tr><td>n+5</td><td>从第5个开始（包含第五个）到最后</td></tr><tr><td>-n+5</td><td>前5个（包含第5个）</td></tr></tbody></table><p style="color:red">    区别nth-child(n)与nth-of-type(n):</p><ul><li>nth-child(n)对父元素里面所有孩子排序选择（序号是固定的），先找到第n个孩子，然后看看是否和E匹配</li><li>nth-of-type(n)对父元素里面<strong>指定</strong>子元素进行排序选择，先去匹配E，然后再根据E找第n个孩子</li></ul><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><p>伪元素选择器可以利用CSS创建新标签元素，而无需HTML标签，从而简化html结构</p><table><thead><tr><th>选择符</th><th>说明</th></tr></thead><tbody><tr><td>::before</td><td>在元素内部的前面插入内容</td></tr><tr><td>::after</td><td>在元素内部的后面插入内容</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li><p>before和after创建一个元素，但是属于行内元素</p></li><li><p>新创建的这个元素在文档中是找不到的，故称为<strong>伪元素</strong></p></li><li><p>语法：element::before()</p></li><li><p style="color:red">    before和after必须有content属性</p></li><li><p>before在父元素内容的前面创建元素，after在父元素内容的后面插入元素</p></li><li><p>伪元素选择器和标签选择器一样，<strong>权重为1</strong></p></li></ul><h4 id="伪元素选择器使用场景1-字体图标"><a href="#伪元素选择器使用场景1-字体图标" class="headerlink" title="伪元素选择器使用场景1-字体图标"></a>伪元素选择器使用场景1-字体图标</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>伪元素选择器使用场景-字体图标<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@font-face</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;icomoon&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.eot?y6ak7f&#x27;</span>);</span><br><span class="language-css">            <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.eot?y6ak7f#iefix&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="language-css">                <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.ttf?y6ak7f&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>),</span><br><span class="language-css">                <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.woff?y6ak7f&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff&#x27;</span>),</span><br><span class="language-css">                <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.svg?y6ak7f#icomoon&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;svg&#x27;</span>);</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>: normal;</span><br><span class="language-css">            <span class="hljs-attribute">font-style</span>: normal;</span><br><span class="language-css">            <span class="hljs-attribute">font-display</span>: block;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">right</span>: <span class="hljs-number">2px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;icomoon&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* content: ; */</span></span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;\e90b&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#bbb</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 文本对齐无用 */</span></span><br><span class="language-css">            <span class="hljs-comment">/* text-align: right; */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="伪元素选择器使用场景2-实现遮罩层"><a href="#伪元素选择器使用场景2-实现遮罩层" class="headerlink" title="伪元素选择器使用场景2-实现遮罩层"></a>伪元素选择器使用场景2-实现遮罩层</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>伪元素选择器实现遮罩层<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:first</span>-child &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">448px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">252px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 注意！遮罩层和img是兄弟关系，不要写成img::before */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* display: none;隐藏 */</span></span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">4</span>) <span class="hljs-built_in">url</span>(<span class="hljs-string">images/暂停.png</span>) no-repeat center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 注意：当鼠标经过父盒子！！则让里面的遮罩层before显示出来 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/tudou.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="伪元素使用场景3-伪元素清除浮动-在CSS基础浮动-清除浮动处有写"><a href="#伪元素使用场景3-伪元素清除浮动-在CSS基础浮动-清除浮动处有写" class="headerlink" title="伪元素使用场景3-伪元素清除浮动(在CSS基础浮动-清除浮动处有写)"></a>伪元素使用场景3-伪元素清除浮动(在CSS基础浮动-清除浮动处有写)</h4><h5 id="父级添加after"><a href="#父级添加after" class="headerlink" title="父级添加after"></a>父级添加after</h5><p>.after 方式时额外标签法的升级，也是给父元素添加</p><p>（实际也是在父元素里面浮动子元素末尾添加一个盒子）</p><p>使用时直接复制粘贴以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">.clearfix:after &#123;<br>    content: &quot;&quot;;/* 伪元素选择器必须写的 */<br>    display: block; /* after是行内元素，将其转换为块级元素 */<br>    height: 0;/* 不要显示这个盒子 */<br>    clear: both;/* 核心代码 清除浮动 */<br>    visibility: hidden;/* 不要显示这个盒子 */<br>&#125;<br><br>.clearfix &#123;<br>    /* IE6、7专用 */<br>    *zoom: 1;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：没有增加标签，结构更简单</p><p>缺点：照顾低版本浏览器</p><p>代表网站：百度、淘宝网、网易等</p><h5 id="父级添加双伪元素"><a href="#父级添加双伪元素" class="headerlink" title="父级添加双伪元素"></a>父级添加双伪元素</h5><p>（实际也是在父元素里面浮动子元素前面和末尾都添加一个盒子）</p><p>使用时直接复制粘贴以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html">.clearfix:before,<br>.clearfix:after &#123;<br>    content: &quot;&quot;;<br>    display: table;/* 转换为块级元素并且在一行显示 */<br>&#125;<br><br>.clearfix:after &#123;<br>clear: both;/* 核心代码 清除浮动 */z&#x27;x<br>&#125;<br><br>.clearfix &#123;<br>    /* IE6、7专用 */<br>    *zoom: 1;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：代码更简洁</p><p>缺点：照顾低版本浏览器</p><p>代表网站：小米、腾讯等</p><h3 id="CSS3盒子特性"><a href="#CSS3盒子特性" class="headerlink" title="CSS3盒子特性"></a>CSS3盒子特性</h3><p>CSS3中可通过box-sizing来指定盒子模型，有两个值，可指定为：content-box、border-box</p><p>有两种情况：</p><ol><li>box-sizing: content-box; 盒子大小为width+padding+border（正是之前默认的情况，总要计算，减去内边距之类的）</li><li>box-sizing: border-box; 盒子大小为width</li></ol><p>若盒子模型改为了box-sizing: border-box;，那么padding和border就不会撑大盒子（前提是padding和border不会超过width）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: #<span class="hljs-number">#088</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid pink;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: #<span class="hljs-number">#0ee</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid pink;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="CSS3滤镜filter"><a href="#CSS3滤镜filter" class="headerlink" title="CSS3滤镜filter"></a>CSS3滤镜filter</h3><p>filter属性将模糊或颜色便宜等图形效果应用于元素</p><p>语法：</p><p>filter: 函数()</p><p>如：filter: blur(5px);</p><p>即blur模糊处理，数值越大越模糊</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/tudou.jpg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;filter:blur(3px)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="CSS3宽度calc函数"><a href="#CSS3宽度calc函数" class="headerlink" title="CSS3宽度calc函数"></a>CSS3宽度calc函数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.father</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: #<span class="hljs-number">#088</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.son</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* 注意：表示孩子son一定比父级father的宽度少50px，且减号两边一定要有空格 */</span></span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">50px</span>);</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="CSS3过渡transition"><a href="#CSS3过渡transition" class="headerlink" title="==CSS3过渡transition=="></a>==CSS3过渡transition==</h3><p>过渡transition是CSS3中具有颠覆性的特征之一，可以在不使用flash动画或JavaScript的情况下，当元素从一种样式变换为另一种样式时为元素添加效果</p><p>过渡动画：从一个状态渐渐得过渡到另外一种状态</p><p>经常和:hover一起搭配使用</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">transition: 要过度的属性 花费时间 运动曲线 何时开始；<br></code></pre></td></tr></table></figure><ul><li>属性：想要变化的CSS属性，宽度高度 背景颜色 内外边距均可。<strong>若想要所有属性都变化过渡，写一个all就可以</strong></li><li>花费时间：单位是 秒s，必须写单位</li><li>运动曲线：默认是ease（可省）</li><li>何时开始：单位是秒（必须写单位），可以设置延迟出发时间 默认是0s（可省）</li></ul><p style="color:red">    注意：谁做过渡给谁加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">        <span class="hljs-comment">/* 注意：谁做过渡给谁加！！！ */</span></span><br><span class="language-css">        <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span> ease;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: #<span class="hljs-number">#088</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2D转换transform"><a href="#2D转换transform" class="headerlink" title="2D转换transform"></a>2D转换transform</h3><p>transform转换可以实现元素的位移、旋转、缩放等效果</p><ul><li>移动：translate</li><li>旋转：rotate</li><li>缩放：scale</li></ul><p>二维坐标系：</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220708104202816.png" alt="image-20220708104202816" style="zoom:50%;" /><h4 id="transform之移动translate"><a href="#transform之移动translate" class="headerlink" title="transform之移动translate"></a>transform之移动translate</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">transform: translate(x,y);<br>只移动x<br>transform: translate(x, 0);<br>只移动y<br>transform:translate(0, y);<br></code></pre></td></tr></table></figure><p>分开写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">transform: translateX(x);<br>transform: translateY(y);<br></code></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>translate<strong>最大的优点</strong>就是：不会影响其它元素的位置</li><li>translate中的百分比单位是<strong>相对于自身</strong>元素的translate(50%, 50%)</li><li>对<strong>行内标签没有效果</strong>（行内标签需要先转换为块级元素才行）</li></ul><h5 id="实现盒子居中"><a href="#实现盒子居中" class="headerlink" title="实现盒子居中"></a>实现盒子居中</h5><p>原理：利用子绝父相的定位，将子盒子左上角定位到父盒子中心；再利用<strong>translate</strong>让子盒子<strong>移动自己</strong>的高度和宽度的一半。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br><br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: purple;<br>    <span class="hljs-comment">/* 如果里面的参数是 % 移动的距离是 盒子自身的宽度或者高度来对比的 */</span><br>    <span class="hljs-comment">/* 此处50%是100px */</span><br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="transform之旋转rotate"><a href="#transform之旋转rotate" class="headerlink" title="transform之旋转rotate"></a>transform之旋转rotate</h4><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">transform: rotate(度数)；<br></code></pre></td></tr></table></figure><h5 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h5><ul><li><p>rotate()括号里面是度数，如：rotate(90deg),单位是deg</p></li><li><p>顺时针旋转为正，逆时针旋转为负</p></li><li><p>默认的旋转中心为元素的中心点</p></li><li><p>要看到旋转效果需要为旋转的元素添加属性transition</p><p><code>transition: all .3s;</code></p></li></ul><h5 id="书写三角"><a href="#书写三角" class="headerlink" title="书写三角"></a>书写三角</h5><p>原理：为元素添加after伪元素，再为after伪元素添加相邻的两条边框；利用旋转，就可以画出一个下拉三角</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>    <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>);<br>    <span class="hljs-comment">/* 为三角添加过渡 */</span><br>    <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">3s</span>;<br>&#125;<br><br><span class="hljs-comment">/* 鼠标经过div，下拉三角旋转 */</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">225deg</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="转换中心transform-origin"><a href="#转换中心transform-origin" class="headerlink" title="==转换中心transform-origin=="></a>==转换中心transform-origin==</h5><p>可以设置元素转换的中心点</p><h6 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">transform-origin: x y;<br></code></pre></td></tr></table></figure><h6 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h6><ul><li><p>x与y用空格隔开</p></li><li><p>转换中心点x，y默认是元素的中心点(50% 50%)</p></li><li><p>x和y的值可以是：百分比、像素 或者 方位名词top bottom right left center</p></li></ul><h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>设置转换中心<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-attribute">transform-origin</span>: left bottom;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">90deg</span>);<br>    <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">3s</span>;<br>&#125;<br><span class="hljs-comment">/* 鼠标放在div上，p旋转 */</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="transform之缩放scale"><a href="#transform之缩放scale" class="headerlink" title="transform之缩放scale"></a>transform之缩放scale</h4><h5 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">transform: scale(x, y);<br></code></pre></td></tr></table></figure><h5 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h5><ul><li>x与y用逗号隔开，没有单位，是倍数</li><li><code>transform: scale(1, 1)</code>：宽高各放大一倍，即原来的大小，没放大</li><li><code>transform: scale(2, 2)</code>：宽高各放大2倍</li><li><code>transform: scale(2)</code>：一个参数时，相当于<code>transform: scale(2, 2)</code>：</li><li><code>transform: scale(0.5, 0.5)</code>：缩小为原来的0.5倍</li><li>scale最大的优势：可以设置转换中心点缩放，默认时以中心带你缩放，而且<strong>不影响其他盒子</strong></li></ul><h5 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h5><p>鼠标经过，图片放大</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;media/9531.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10%</span>;<br>&#125;<br><br><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">3s</span>;<br>&#125;<br><br><span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2D转换综合写法"><a href="#2D转换综合写法" class="headerlink" title="2D转换综合写法"></a>2D转换综合写法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">transform: translate() rotate() scale()<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><p>顺序会影响转换的效果，先旋转会改变坐标轴的方向</p></li><li><p>当同时有位移和其他属性时，一定要将位移translate放在最前面</p></li></ul><h3 id="动画"><a href="#动画" class="headerlink" title="==动画=="></a>==动画==</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ol><li><p>先定义动画</p><p>使用@keyframes定义动画</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> 动画名称&#123;<br><span class="hljs-number">0%</span> &#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-number">100%</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再使用（调用）动画</p><ul><li><p>animation-name</p></li><li><p>animation-duration</p></li></ul><p>如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 我们想页面一打开，一个盒子就从左边走到右边 */</span><br><span class="hljs-comment">/* 1. 定义动画 */</span><br><br><span class="hljs-keyword">@keyframes</span> move &#123;<br>    <span class="hljs-comment">/* 开始状态 */</span><br>    <span class="hljs-number">0%</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0px</span>);<br>    &#125;<br>    <span class="hljs-comment">/* 结束状态 */</span><br>    <span class="hljs-number">100%</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">1000px</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-comment">/* 2. 调用动画 */</span><br>    <span class="hljs-comment">/* 动画名称 */</span><br>    <span class="hljs-attribute">animation-name</span>: move;<br> <span class="hljs-comment">/* 持续时间 */</span><br>    <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">2s</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用动画时，一定要为做动画的元素添加 <strong>animation-name 和 animation-duration</strong> 两个属性</p></blockquote></li></ol><h4 id="动画常用属性"><a href="#动画常用属性" class="headerlink" title="动画常用属性"></a>动画常用属性</h4><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220709114831310.png" alt="image-20220709114831310"></p><h4 id="动画简写属性"><a href="#动画简写属性" class="headerlink" title="动画简写属性"></a>动画简写属性</h4><p>animation: 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态</p><p><code>animation: myAnimation 5s linear 2s infinite alternate;</code></p><p>注意</p><ul><li>简写属性里面不包含 animation-play-state</li><li>animation-play-state: paused; 暂停动画经常与鼠标经过或其他配合使用</li><li>盒子动画结束后，停在结束位置：<code>animation-fill-mode: forwards</code></li></ul><h4 id="速度曲线属性"><a href="#速度曲线属性" class="headerlink" title="速度曲线属性"></a>速度曲线属性</h4><p>animation-timing-function规定动画速度曲线</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220710120619565.png" alt="image-20220710120619565"></p><h4 id="热点图案例"><a href="#热点图案例" class="headerlink" title="热点图案例"></a>热点图案例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pulse1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pulse2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pulse3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.map</span> &#123;<br>      <span class="hljs-attribute">position</span>: relative;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">750px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">617px</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">media/map.png</span>);<br>    &#125;<br><br>    <span class="hljs-selector-class">.city</span> &#123;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">right</span>: <span class="hljs-number">196px</span>;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">230px</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">5px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">5px</span>;<br>      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#009dfd</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.city</span> <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;pulse&quot;</span>]</span> &#123;<br>      <span class="hljs-comment">/* 保证波纹再父盒子里面水平垂直居中 */</span><br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br><br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">5px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">5px</span>;<br>      <span class="hljs-comment">/* 注意阴影水平和垂直上面的位置为0，0，没有偏移，模糊距离blur为12px */</span><br>      <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> <span class="hljs-number">#009dfd</span>;<br>      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>      <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">4s</span>;<br>      <span class="hljs-attribute">animation</span>: pulse <span class="hljs-number">2s</span> linear <span class="hljs-number">0s</span> infinite;<br>    &#125;<br><br>    <span class="hljs-selector-class">.city</span> <span class="hljs-selector-class">.pulse2</span> &#123;<br>      <span class="hljs-comment">/* 让不同波纹开始时间不同 */</span><br>      <span class="hljs-attribute">animation-delay</span>: .<span class="hljs-number">8s</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.city</span> <span class="hljs-selector-class">.pulse3</span> &#123;<br>      <span class="hljs-comment">/* 让不同波纹开始时间不同 */</span><br>      <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">1.6s</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">@keyframes</span> pulse &#123;<br>      <span class="hljs-number">0%</span> &#123;<br>      &#125;<br><br>      <span class="hljs-number">50%</span> &#123;<br>        <span class="hljs-comment">/* 不要用scale，因为scale会让阴影也变大 */</span><br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>      &#125;<br><br>      <span class="hljs-number">100%</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="打字机案例"><a href="#打字机案例" class="headerlink" title="打字机案例"></a>打字机案例</h4><p><strong>文字强制一行显示</strong>：<code>white-space: nowrap;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>打字机如何实现<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-comment">/* 强制让文字在一行内显示 */</span><br>    <span class="hljs-attribute">white-space</span>: nowrap;<br>    <span class="hljs-attribute">animation</span>: typewriter <span class="hljs-number">4s</span> <span class="hljs-built_in">steps</span>(<span class="hljs-number">7</span>) forwards;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> typewriter &#123;<br>    <span class="hljs-number">0%</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-number">100%</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">140px</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="小熊奔跑案例"><a href="#小熊奔跑案例" class="headerlink" title="小熊奔跑案例"></a>小熊奔跑案例</h4><p>注意点：</p><ul><li>同一个元素添加多个动画，动画之间用逗号相隔</li><li>学会设置速度曲线属性值steps()</li><li>设置背景图的位置background-position: x y; x与y之间用空格隔开</li><li>学会设置子盒子的水平垂直居中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bear&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>      <span class="hljs-attribute">position</span>: relative;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#333</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.bear</span> &#123;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">media/bear.png</span>) no-repeat;<br>      <span class="hljs-comment">/* 多个动画之间用逗号隔开 */</span><br>      <span class="hljs-attribute">animation</span>: run <span class="hljs-number">1s</span> <span class="hljs-built_in">steps</span>(<span class="hljs-number">8</span>) <span class="hljs-number">0s</span> infinite, move <span class="hljs-number">2s</span> linear forwards;<br>    &#125;<br><br>    <span class="hljs-comment">/* 定义小熊奔跑动画 */</span><br>    <span class="hljs-keyword">@keyframes</span> run &#123;<br>      <span class="hljs-number">0%</span> &#123;<br>        <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>      &#125;<br><br>      <span class="hljs-number">100%</span> &#123;<br>        <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">1600px</span> <span class="hljs-number">0</span>;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* 定义小熊移动动画 */</span><br>    <span class="hljs-keyword">@keyframes</span> move &#123;<br>      <span class="hljs-number">0%</span> &#123;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>      &#125;<br><br>      <span class="hljs-number">100%</span> &#123;<br>        <span class="hljs-comment">/* 结束位置为父盒子的水平居中位置 */</span><br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h3><p>三位坐标系</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220710125054720.png" alt="image-20220710125054720"></p><p>x轴：水平向右 向右是正，向左是负</p><p>y轴：垂直向下 向下是正，向上是负</p><p>z轴：垂直屏幕 向外是正，向内是负</p><blockquote><p>主要知识点：</p></blockquote><ul><li>3D位移：translate3d(x, y,z)</li><li>3D旋转：rotate3d(x,y,z)</li><li>透视：perspective</li><li>3D呈现：transform-style</li></ul><h4 id="3D位移translate3d-x-y-z"><a href="#3D位移translate3d-x-y-z" class="headerlink" title="3D位移translate3d(x, y,z)"></a>3D位移translate3d(x, y,z)</h4><p>仅在x轴上移动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">transform: translateX(100px); <br></code></pre></td></tr></table></figure><p>仅在y轴上移动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">transform: translateY(100px); <br></code></pre></td></tr></table></figure><p>仅在z轴上移动，<strong>注意：translateZ一般用px单位,默认情况下，看不到元素在z轴上的移动</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">transform: translateZ(100px); <br></code></pre></td></tr></table></figure><p>同时在多个轴上移动 <code>translate3d(x, y,z)</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">transform: translate3d(x, y,z)<br></code></pre></td></tr></table></figure><h4 id="透视perspective"><a href="#透视perspective" class="headerlink" title="透视perspective"></a>透视perspective</h4><ul><li>要想网页看到3D效果，就需要透视</li><li>透视是写在被观察元素的 <strong>父盒子</strong> 上面的</li><li>透视的效果就是<strong>近大远小</strong>，z轴越大，看到的物体就越大</li><li><strong>模拟的是人类的视觉位置，眼镜到屏幕的距离（视距）</strong></li><li>单位为像素</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">perspective</span>: 距离px<br></code></pre></td></tr></table></figure><h4 id="3D旋转rotate3d-x-y-z"><a href="#3D旋转rotate3d-x-y-z" class="headerlink" title="3D旋转rotate3d(x,y,z)"></a>3D旋转rotate3d(x,y,z)</h4><p>元素的旋转方向，遵循<strong>左手准则</strong>：大拇指指向轴的正方向，手指弯曲的方向就是沿轴旋转的正方向。</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220710140553055.png" alt="image-20220710140553055" style="zoom:50%;" /><ul><li><p>transform:rotateX(45deg)：沿着x轴正方向旋转 45度 </p></li><li><p>transform:rotateY(45deg) ：沿着y轴正方向旋转 45deg</p></li><li><p>transform:rotateZ(45deg) ：沿着Z轴正方向旋转 45deg</p></li><li><p>transform:rotate3d(x,y,z,deg)： 沿着自定义轴旋转 deg为角度（了解即可）</p><p>其中x, y, z是用于自定义的旋转轴的方向，deg处为自定义的旋转角度，如：</p><p><code>transform: rotate3d(1, 1, 0, 45deg);</code>  <em>沿着 x 与 y 的对角线旋转45度</em> </p><p><code>transform:rotate3d(1,0,0,45deg);</code> <em>就是沿着x轴旋转 45deg</em></p></li></ul><h4 id="3D呈现transform-style"><a href="#3D呈现transform-style" class="headerlink" title="3D呈现transform-style"></a>3D呈现transform-style</h4><ul><li>控制子元素是否开启三维立体环境。</li><li>transform-style: flat 子元素不开启3d立体空间 默认的</li><li>transform-style: preserve-3d; 子元素开启立体空间</li><li>代码写给父级，但是影响的是子盒子</li></ul>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>代码规范</title>
    <link href="/2022/11/25/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <url>/2022/11/25/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>欢迎使用品优购代码规范， 这个是我借鉴京东前端代码规范，组织的品优购内部规范。旨在增强团队开发协作、提高代码质量和打造开发基石的编码规范，</p><p>以下规范是团队基本约定的内容，必须严格遵循。</p><h3 id="HTML-规范"><a href="#HTML-规范" class="headerlink" title="HTML 规范"></a>HTML 规范</h3><p>基于 <a href="http://www.w3.org/">W3C</a>、<a href="https://developer.apple.com/">苹果开发者</a> 等官方文档，并结合团队业务和开发过程中总结的规范约定，让页面 HTML 代码更具语义性。</p><h3 id="图片规范"><a href="#图片规范" class="headerlink" title="图片规范"></a>图片规范</h3><p>了解各种图片格式特性，根据特性制定图片规范，包括但不限于图片的质量约定、图片引入方式、图片合并处理等，旨在从图片层面优化页面性能。</p><h3 id="CSS-规范"><a href="#CSS-规范" class="headerlink" title="CSS 规范"></a>CSS 规范</h3><p>统一规范团队 CSS 代码书写风格和使用 CSS 预编译语言语法风格，提供常用媒体查询语句和浏览器私有属性引用，并从业务层面统一规范常用模块的引用。</p><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>从 <code>目录</code>、<code>图片</code>、<code>HTML/CSS文件</code>、<code>ClassName</code> 的命名等层面约定规范团队的命名习惯，增强团队代码的可读性。</p><h2 id="2-HTML-规范"><a href="#2-HTML-规范" class="headerlink" title="2. HTML 规范"></a>2. HTML 规范</h2><h3 id="DOCTYPE-声明"><a href="#DOCTYPE-声明" class="headerlink" title="DOCTYPE 声明"></a>DOCTYPE 声明</h3><p>HTML 文件必须加上 DOCTYPE 声明，并统一使用 HTML5 的文档声明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>HTML5 标准模版</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML5标准模版<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="页面语言-lang"><a href="#页面语言-lang" class="headerlink" title="页面语言 lang"></a>页面语言 lang</h3><p>推荐使用属性值 <code>cmn-Hans-CN</code>（简体, 中国大陆），但是考虑浏览器和操作系统的兼容性，目前仍然使用 <code>zh-CN</code> 属性值</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;html <span class="hljs-attribute">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>更多地区语言参考：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">zh-SG 中文 (简体, 新加坡)   对应 cmn-Hans-SG 普通话 (简体, 新加坡)<br>zh-HK 中文 (繁体, 香港)     对应 cmn-Hant-HK 普通话 (繁体, 香港)<br>zh-MO 中文 (繁体, 澳门)     对应 cmn-Hant-MO 普通话 (繁体, 澳门)<br>zh-TW 中文 (繁体, 台湾)     对应 cmn-Hant-TW 普通话 (繁体, 台湾)<br></code></pre></td></tr></table></figure><h3 id="charset-字符集合"><a href="#charset-字符集合" class="headerlink" title="charset 字符集合"></a>charset 字符集合</h3><p>一般情况下统一使用 “UTF-8” 编码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;meta <span class="hljs-attribute">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>由于历史原因，有些业务可能会使用 “GBK” 编码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;meta <span class="hljs-attribute">charset</span>=<span class="hljs-string">&quot;GBK&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>请尽量统一写成标准的 “UTF-8”，不要写成 “utf-8” 或 “utf8” 或 “UTF8”。根据 <a href="http://www.ietf.org/rfc/rfc3629">IETF 对 UTF-8 的定义</a>，其编码标准的写法是 “UTF-8”；而 UTF8 或 utf8 的写法只是出现在某些编程系统中，如 .NET framework 的类 System.Text.Encoding 中的一个属性名就叫 UTF8。</p><h3 id="书写风格"><a href="#书写风格" class="headerlink" title="书写风格"></a>书写风格</h3><h4 id="HTML-代码大小写"><a href="#HTML-代码大小写" class="headerlink" title="HTML 代码大小写"></a>HTML 代码大小写</h4><p>HTML 标签名、类名、标签属性和大部分属性值统一用小写</p><p><em>推荐：</em></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;DEMO&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br><br>&lt;<span class="hljs-keyword">DIV</span> <span class="hljs-keyword">CLASS</span>=<span class="hljs-string">&quot;DEMO&quot;</span>&gt;&lt;/<span class="hljs-keyword">DIV</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="类型属性"><a href="#类型属性" class="headerlink" title="类型属性"></a>类型属性</h3><p>不需要为 CSS、JS 指定类型属性，HTML5 中默认已包含</p><p><em>推荐：</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;link rel<span class="hljs-operator">=</span><span class="hljs-string">&quot;stylesheet&quot;</span> type<span class="hljs-operator">=</span><span class="hljs-string">&quot;text/css&quot;</span> href<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span> &gt;<br>&lt;script type<span class="hljs-operator">=</span><span class="hljs-string">&quot;text/javascript&quot;</span> src<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span> &gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h3><ul><li>元素属性值使用双引号语法</li><li>元素属性值可以写上的都写上</li></ul><p><em>推荐：</em></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot;&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;radio&quot; <span class="hljs-type">name</span>=&quot;name&quot; checked=&quot;checked&quot; &gt;<br></code></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-type">text</span>&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&#x27;text&#x27;</span>&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;radio&quot; <span class="hljs-type">name</span>=&quot;name&quot; checked &gt;<br></code></pre></td></tr></table></figure><h3 id="特殊字符引用"><a href="#特殊字符引用" class="headerlink" title="特殊字符引用"></a>特殊字符引用</h3><p>文本可以和字符引用混合出现。这种方法可以用来转义在文本中不能合法出现的字符。</p><p>在 HTML 中不能使用小于号 “&lt;” 和大于号 “&gt;”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML 源代码中使用字符实体</p><p><em>推荐：</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>more<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>more&gt;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h3><p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">jdc</span>&quot;&gt;<br>    &lt;<span class="hljs-symbol">a</span> <span class="hljs-symbol">href</span>=&quot;##&quot;&gt;&lt;/<span class="hljs-symbol">a</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="代码嵌套"><a href="#代码嵌套" class="headerlink" title="代码嵌套"></a>代码嵌套</h3><p>元素嵌套规范，每个块状元素独立一行，内联元素可选</p><p><em>推荐：</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;div&gt;</span><br>    <span class="hljs-section">&lt;h1&gt;</span><span class="hljs-section">&lt;/h1&gt;</span><br>    <span class="hljs-section">&lt;p&gt;</span><span class="hljs-section">&lt;/p&gt;</span><br><span class="hljs-section">&lt;/div&gt;</span><br><span class="hljs-section">&lt;p&gt;</span><span class="hljs-section">&lt;span&gt;</span><span class="hljs-section">&lt;/span&gt;</span><span class="hljs-section">&lt;span&gt;</span><span class="hljs-section">&lt;/span&gt;</span><span class="hljs-section">&lt;/p&gt;</span><br></code></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;div&gt;</span><br>    <span class="hljs-section">&lt;h1&gt;</span><span class="hljs-section">&lt;/h1&gt;</span><span class="hljs-section">&lt;p&gt;</span><span class="hljs-section">&lt;/p&gt;</span><br><span class="hljs-section">&lt;/div&gt;</span><br><span class="hljs-section">&lt;p&gt;</span><br>    <span class="hljs-section">&lt;span&gt;</span><span class="hljs-section">&lt;/span&gt;</span><br>    <span class="hljs-section">&lt;span&gt;</span><span class="hljs-section">&lt;/span&gt;</span><br><span class="hljs-section">&lt;/p&gt;</span><br></code></pre></td></tr></table></figure><p>段落元素与标题元素只能嵌套内联元素</p><p><em>推荐：</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;h1&gt;</span><span class="hljs-section">&lt;span&gt;</span><span class="hljs-section">&lt;/span&gt;</span><span class="hljs-section">&lt;/h1&gt;</span><br><span class="hljs-section">&lt;p&gt;</span><span class="hljs-section">&lt;span&gt;</span><span class="hljs-section">&lt;/span&gt;</span><span class="hljs-section">&lt;span&gt;</span><span class="hljs-section">&lt;/span&gt;</span><span class="hljs-section">&lt;/p&gt;</span><br></code></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;h1&gt;</span><span class="hljs-section">&lt;div&gt;</span><span class="hljs-section">&lt;/div&gt;</span><span class="hljs-section">&lt;/h1&gt;</span><br><span class="hljs-section">&lt;p&gt;</span><span class="hljs-section">&lt;div&gt;</span><span class="hljs-section">&lt;/div&gt;</span><span class="hljs-section">&lt;div&gt;</span><span class="hljs-section">&lt;/div&gt;</span><span class="hljs-section">&lt;/p&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-图片规范"><a href="#3-图片规范" class="headerlink" title="3. 图片规范"></a>3. 图片规范</h2><h3 id="内容图"><a href="#内容图" class="headerlink" title="内容图"></a>内容图</h3><p>内容图多以商品图等照片类图片形式存在，颜色较为丰富，文件体积较大</p><ul><li>优先考虑 JPEG 格式，条件允许的话优先考虑 WebP 格式</li><li>尽量不使用 PNG 格式，PNG8 色位太低，PNG24 压缩率低，文件体积大</li><li><strong>PC 平台单张的图片的大小不应大于 200KB。</strong></li></ul><h3 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h3><p>背景图多为图标等颜色比较简单、文件体积不大、起修饰作用的图片</p><ul><li>PNG 与 GIF 格式，优先考虑使用 PNG 格式,PNG 格式允许更多的颜色并提供更好的压缩率</li><li>图像颜色比较简单的，如纯色块线条图标，优先考虑使用 PNG8 格式，避免不使用 JPEG 格式</li><li>图像颜色丰富而且图片文件不太大的（40KB 以下）或有半透明效果的优先考虑 PNG24 格式</li><li>图像颜色丰富而且文件比较大的（40KB - 200KB）优先考虑 JPEG 格式</li><li>条件允许的，优先考虑 WebP 代替 PNG 和 JPEG 格式</li></ul><h2 id="4-CSS-规范"><a href="#4-CSS-规范" class="headerlink" title="4. CSS 规范"></a>4. CSS 规范</h2><h3 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h3><p>样式书写一般有两种：一种是紧凑格式 (Compact)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span>&#123; <span class="hljs-attribute">display</span>: block;<span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;&#125;<br></code></pre></td></tr></table></figure><p>一种是展开格式（Expanded）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>团队约定</strong></p><p>统一使用展开格式书写样式</p><h3 id="代码大小写"><a href="#代码大小写" class="headerlink" title="代码大小写"></a>代码大小写</h3><p>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 推荐 */</span><br><span class="hljs-selector-class">.jdc</span>&#123;<br><span class="hljs-attribute">display</span>:block;<br>&#125;<br><br><span class="hljs-comment">/* 不推荐 */</span><br><span class="hljs-selector-class">.JDC</span>&#123;<br><span class="hljs-attribute">DISPLAY</span>:BLOCK;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li>尽量少用通用选择器 <code>*</code></li><li>不使用 ID 选择器</li><li>不使用无具体语义定义的标签选择器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 推荐 */</span><br><span class="hljs-selector-class">.jdc</span> &#123;<br>&#125;<br><span class="hljs-selector-class">.jdc</span> <span class="hljs-selector-tag">li</span> &#123;<br>&#125;<br><span class="hljs-selector-class">.jdc</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">p</span> &#123;<br>&#125;<br><br><span class="hljs-comment">/* 不推荐 */</span><br>* &#123;<br>&#125;<br>#<span class="hljs-selector-id">#jdc</span> &#123;<br>&#125;<br><span class="hljs-selector-class">.jdc</span> <span class="hljs-selector-tag">div</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码缩进-1"><a href="#代码缩进-1" class="headerlink" title="代码缩进"></a>代码缩进</h3><p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p>每个属性声明末尾都要加分号；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码易读性"><a href="#代码易读性" class="headerlink" title="代码易读性"></a>代码易读性</h3><p>左括号与类名之间一个空格，冒号与属性值之间一个空格</p><p><em>推荐：</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span>&#123;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>逗号分隔的取值，逗号之后一个空格</p><p><em>推荐：</em></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">.jdc &#123;<br>    box-shadow: <span class="hljs-number">1</span>px <span class="hljs-number">1</span>px <span class="hljs-number">1</span>px ##<span class="hljs-number">333</span>, <span class="hljs-number">2</span>px <span class="hljs-number">2</span>px <span class="hljs-number">2</span>px ##ccc;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">.jdc &#123;<br>    box-shadow: <span class="hljs-number">1</span>px <span class="hljs-number">1</span>px <span class="hljs-number">1</span>px ##<span class="hljs-number">333</span>,<span class="hljs-number">2</span>px <span class="hljs-number">2</span>px <span class="hljs-number">2</span>px ##ccc;<br>&#125;<br></code></pre></td></tr></table></figure><p>为单个 css 选择器或新申明开启新行</p><p><em>推荐：</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span>,<br><span class="hljs-selector-class">.jdc_logo</span>,<br><span class="hljs-selector-class">.jdc_hd</span> &#123;<br>  <span class="hljs-attribute">color</span>: #<span class="hljs-number">#ff0</span>;<br>&#125;<br><span class="hljs-selector-class">.nav</span> &#123;<br>  <span class="hljs-attribute">color</span>: #<span class="hljs-number">#fff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span>,<br>jdc_logo,<br><span class="hljs-selector-class">.jdc_hd</span> &#123;<br>  <span class="hljs-attribute">color</span>: #<span class="hljs-number">#ff0</span>;<br>&#125;<br><span class="hljs-selector-class">.nav</span> &#123;<br>  <span class="hljs-attribute">color</span>: #<span class="hljs-number">#fff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>颜色值 <code>rgb()</code> <code>rgba()</code> <code>hsl()</code> <code>hsla()</code> <code>rect()</code> 中不需有空格，且取值不要带有不必要的 0</p><p><em>推荐：</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,.<span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>( <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.5</span> );<br>&#125;<br></code></pre></td></tr></table></figure><p>属性值十六进制数值能用简写的尽量用简写</p><p><em>推荐：</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span> &#123;<br>    <span class="hljs-attribute">color</span>: #<span class="hljs-number">#fff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span> &#123;<br>  <span class="hljs-attribute">color</span>: #<span class="hljs-number">#ffffff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>不要为 <code>0</code> 指明单位</p><p><em>推荐：</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="属性值引号"><a href="#属性值引号" class="headerlink" title="属性值引号"></a>属性值引号</h3><p>css 属性值需要用到引号时，统一使用单引号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 推荐 */</span><br><span class="hljs-selector-class">.jdc</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Hiragino Sans GB&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">/* 不推荐 */</span><br><span class="hljs-selector-class">.jdc</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Hiragino Sans GB&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="属性书写顺序"><a href="#属性书写顺序" class="headerlink" title="属性书写顺序"></a>属性书写顺序</h3><p>建议遵循以下顺序：</p><ol><li>布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li><li>自身属性：width / height / margin / padding / border / background</li><li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li><li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.jdc</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">font-family</span>: Arial, <span class="hljs-string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;<br>  <span class="hljs-attribute">color</span>: #<span class="hljs-number">#333</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);<br>  -webkit-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  -moz-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  -o-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  -ms-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.mozilla.org/css/base/content.css">mozilla 官方属性顺序推荐</a></p><h2 id="命名规范-1"><a href="#命名规范-1" class="headerlink" title="命名规范"></a>命名规范</h2><p>由历史原因及个人习惯引起的 DOM 结构、命名不统一，导致不同成员在维护同一页面时，效率低下，迭代、维护成本极高。</p><h3 id="目录命名"><a href="#目录命名" class="headerlink" title="目录命名"></a>目录命名</h3><ul><li>项目文件夹：shoping</li><li>样式文件夹：css</li><li>脚本文件夹：js</li><li>样式类图片文件夹：img</li><li>产品类图片文件夹： upload</li><li>字体类文件夹： fonts</li></ul><h3 id="ClassName-命名"><a href="#ClassName-命名" class="headerlink" title="ClassName 命名"></a>ClassName 命名</h3><p>ClassName 的命名应该尽量精短、明确，必须以<strong>字母开头命名</strong>，且<strong>全部字母为小写</strong>，单词之间<strong>统一使用下划线</strong> “_” 连接</p><p>.nav_top</p><h4 id="常用命名推荐"><a href="#常用命名推荐" class="headerlink" title="常用命名推荐"></a>常用命名推荐</h4><p><strong>注意</strong>：ad、banner、gg、guanggao 等有机会和广告挂勾的不建议直接用来做 ClassName，因为有些浏览器插件（Chrome 的广告拦截插件等）会直接过滤这些类名，因此</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;ad&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>这种广告的英文或拼音类名不应该出现</p><p>另外，<strong>敏感不和谐字眼</strong>也不应该出现，如：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;fuck&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;jer&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;gcd&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;ass&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;KMT&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>...<br></code></pre></td></tr></table></figure><table><thead><tr><th>ClassName</th><th>含义</th></tr></thead><tbody><tr><td>about</td><td>关于</td></tr><tr><td>account</td><td>账户</td></tr><tr><td>arrow</td><td>箭头图标</td></tr><tr><td>article</td><td>文章</td></tr><tr><td>aside</td><td>边栏</td></tr><tr><td>audio</td><td>音频</td></tr><tr><td>avatar</td><td>头像</td></tr><tr><td>bg,background</td><td>背景</td></tr><tr><td>bar</td><td>栏（工具类）</td></tr><tr><td>branding</td><td>品牌化</td></tr><tr><td>crumb,breadcrumbs</td><td>面包屑</td></tr><tr><td>btn,button</td><td>按钮</td></tr><tr><td>caption</td><td>标题，说明</td></tr><tr><td>category</td><td>分类</td></tr><tr><td>chart</td><td>图表</td></tr><tr><td>clearfix</td><td>清除浮动</td></tr><tr><td>close</td><td>关闭</td></tr><tr><td>col,column</td><td>列</td></tr><tr><td>comment</td><td>评论</td></tr><tr><td>community</td><td>社区</td></tr><tr><td>container</td><td>容器</td></tr><tr><td>content</td><td>内容</td></tr><tr><td>copyright</td><td>版权</td></tr><tr><td>current</td><td>当前态，选中态</td></tr><tr><td>default</td><td>默认</td></tr><tr><td>description</td><td>描述</td></tr><tr><td>details</td><td>细节</td></tr><tr><td>disabled</td><td>不可用</td></tr><tr><td>entry</td><td>文章，博文</td></tr><tr><td>error</td><td>错误</td></tr><tr><td>even</td><td>偶数，常用于多行列表或表格中</td></tr><tr><td>fail</td><td>失败（提示）</td></tr><tr><td>feature</td><td>专题</td></tr><tr><td>fewer</td><td>收起</td></tr><tr><td>field</td><td>用于表单的输入区域</td></tr><tr><td>figure</td><td>图</td></tr><tr><td>filter</td><td>筛选</td></tr><tr><td>first</td><td>第一个，常用于列表中</td></tr><tr><td>footer</td><td>页脚</td></tr><tr><td>forum</td><td>论坛</td></tr><tr><td>gallery</td><td>画廊</td></tr><tr><td>group</td><td>模块，清除浮动</td></tr><tr><td>header</td><td>页头</td></tr><tr><td>help</td><td>帮助</td></tr><tr><td>hide</td><td>隐藏</td></tr><tr><td>hightlight</td><td>高亮</td></tr><tr><td>home</td><td>主页</td></tr><tr><td>icon</td><td>图标</td></tr><tr><td>info,information</td><td>信息</td></tr><tr><td>last</td><td>最后一个，常用于列表中</td></tr><tr><td>links</td><td>链接</td></tr><tr><td>login</td><td>登录</td></tr><tr><td>logout</td><td>退出</td></tr><tr><td>logo</td><td>标志</td></tr><tr><td>main</td><td>主体</td></tr><tr><td>menu</td><td>菜单</td></tr><tr><td>meta</td><td>作者、更新时间等信息栏，一般位于标题之下</td></tr><tr><td>module</td><td>模块</td></tr><tr><td>more</td><td>更多（展开）</td></tr><tr><td>msg,message</td><td>消息</td></tr><tr><td>nav,navigation</td><td>导航</td></tr><tr><td>next</td><td>下一页</td></tr><tr><td>nub</td><td>小块</td></tr><tr><td>odd</td><td>奇数，常用于多行列表或表格中</td></tr><tr><td>off</td><td>鼠标离开</td></tr><tr><td>on</td><td>鼠标移过</td></tr><tr><td>output</td><td>输出</td></tr><tr><td>pagination</td><td>分页</td></tr><tr><td>pop,popup</td><td>弹窗</td></tr><tr><td>preview</td><td>预览</td></tr><tr><td>previous</td><td>上一页</td></tr><tr><td>primary</td><td>主要</td></tr><tr><td>progress</td><td>进度条</td></tr><tr><td>promotion</td><td>促销</td></tr><tr><td>rcommd,recommendations</td><td>推荐</td></tr><tr><td>reg,register</td><td>注册</td></tr><tr><td>save</td><td>保存</td></tr><tr><td>search</td><td>搜索</td></tr><tr><td>secondary</td><td>次要</td></tr><tr><td>section</td><td>区块</td></tr><tr><td>selected</td><td>已选</td></tr><tr><td>share</td><td>分享</td></tr><tr><td>show</td><td>显示</td></tr><tr><td>sidebar</td><td>边栏，侧栏</td></tr><tr><td>slide</td><td>幻灯片，图片切换</td></tr><tr><td>sort</td><td>排序</td></tr><tr><td>sub</td><td>次级的，子级的</td></tr><tr><td>submit</td><td>提交</td></tr><tr><td>subscribe</td><td>订阅</td></tr><tr><td>subtitle</td><td>副标题</td></tr><tr><td>success</td><td>成功（提示）</td></tr><tr><td>summary</td><td>摘要</td></tr><tr><td>tab</td><td>标签页</td></tr><tr><td>table</td><td>表格</td></tr><tr><td>txt,text</td><td>文本</td></tr><tr><td>thumbnail</td><td>缩略图</td></tr><tr><td>time</td><td>时间</td></tr><tr><td>tips</td><td>提示</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>video</td><td>视频</td></tr><tr><td>wrap</td><td>容器，包，一般用于最外层</td></tr><tr><td>wrapper</td><td>容器，包，一般用于最外层</td></tr></tbody></table><p>命名模块</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>快捷导航栏</td><td>shortcut</td></tr><tr><td>头部</td><td>header</td></tr><tr><td>标志</td><td>logo</td></tr><tr><td>购物车</td><td>shopcar</td></tr><tr><td>搜索</td><td>search</td></tr><tr><td>热点词</td><td>hotwords</td></tr><tr><td>导航</td><td>nav</td></tr><tr><td>导航左侧</td><td>dropdown 包含 .dd .dt</td></tr><tr><td>导航右侧</td><td>navitems</td></tr><tr><td>页面底部</td><td>footer</td></tr><tr><td>页面底部服务模块</td><td>mod_service</td></tr><tr><td>页面底部帮助模块</td><td>mod_help</td></tr><tr><td>页面底部版权模块</td><td>mod_copyright</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常见问题</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="实现居中"><a href="#实现居中" class="headerlink" title="实现居中"></a>实现居中</h2><h3 id="flex布局实现"><a href="#flex布局实现" class="headerlink" title="flex布局实现"></a>flex布局实现</h3><p>利用父盒子flex布局，子盒子利用margin就可以水平垂直居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><br><span class="hljs-selector-class">.son</span> &#123;<br>    <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定位实现"><a href="#定位实现" class="headerlink" title="定位实现"></a>定位实现</h3><p>先将盒子左上角定位到父盒子的中心；再平移盒子本身高和宽的一半</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.son</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取CSS样式"><a href="#获取CSS样式" class="headerlink" title="获取CSS样式"></a>获取CSS样式</h2><h3 id="getComputedStyle-与-style"><a href="#getComputedStyle-与-style" class="headerlink" title="getComputedStyle 与 style"></a>getComputedStyle 与 style</h3><p>相同点</p><p>二者返回的都是 CSSStyleDeclaration 对象，取相应属性值得时候都是采用的 CSS 驼峰式写法，均需要注意 float 属性。</p><p><strong>不同点：</strong></p><table><thead><tr><th>getComputedStyle</th><th>style</th></tr></thead><tbody><tr><td>只读</td><td>可读可写</td></tr><tr><td>读取的是<strong>最终</strong>样式（行内、嵌入、外部均可读取）</td><td>只能读取行内样式</td></tr><tr><td>不支持修改元素样式</td><td>可以修改元素样式</td></tr><tr><td>window.getComputedStyle(element[,pseudo-element]);</td><td>elem.style.xxx</td></tr></tbody></table><p><strong>我们可以通过使用 <code>getComputedStyle</code> 读取样式，通过 <code>element.style</code> 修改样式</strong></p><ul><li>getComputedStyle(element[,pseudo-element]) </li><li>两个参数分别为 元素 和 伪类，第二个参数是可选的，当不查询伪类元素时，可以忽略或者传入null</li></ul>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS简介</title>
    <link href="/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E7%AE%80%E4%BB%8B/"/>
    <url>/2022/11/25/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h2><p>CSS是（Cascading Style Sheets)层叠样式表的简称</p><p>也是一种标记语言，主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式</p><p>简单理解：CSS可以梅花HTML，让HTML更漂亮，让页面布局更简单</p><h3 id="CSS语法规范"><a href="#CSS语法规范" class="headerlink" title="CSS语法规范"></a>CSS语法规范</h3><p>CSS规则由<strong>两个主要部分构成</strong>：<strong>选择器</strong>以及<strong>一条或多条声明</strong></p><ul><li>选择器是用于指定CSS样式的HTML标签，花括号内是对该对象设置的具体样式</li><li>属性和属性值以“键值对”的形式出现</li><li>属性是对指定得对象设置的样式属性，例如字体大小、文本颜色等</li><li>属性和属性值之间用英文“:”分开</li><li>多个“键值对”之间用英文“:”进行区分</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS语言规范<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 选择器 &#123;样式&#125; */</span></span><br><span class="language-css">        <span class="hljs-comment">/* 即给谁改样式 &#123;改成什么样式&#125; */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:blue;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>第一个CSS使用案例<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="CSS代码风格"><a href="#CSS代码风格" class="headerlink" title="CSS代码风格"></a>CSS代码风格</h3><p>样式格式书写</p><ul><li>紧凑格式</li><li>展开格式（更为推荐）</li></ul><p>样式大小写</p><ul><li>推荐样式选择器、属性名、属性值关键字全部使用小写字母。特殊情况除外</li></ul><p>空格规范</p><ul><li>属性值前面与冒号后面，保留一个空格</li><li>选择器（标签）和大括号中间保留空格</li></ul><h2 id="CSS属性书写顺序"><a href="#CSS属性书写顺序" class="headerlink" title="CSS属性书写顺序"></a>CSS属性书写顺序</h2><p>建议遵循以下顺序：</p><ol><li>布局定位属性：display / position / float / clear / visibility / overflow</li><li>自身属性：width / height / margin / padding / border / background</li><li>文本属性： color / font / text-decoration / text-align / vertical-align / white-space / break-word</li><li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient…</li></ol><h2 id="页面布局思路"><a href="#页面布局思路" class="headerlink" title="页面布局思路"></a>页面布局思路</h2><ol><li>必须确定页面的版心（可视区），通过测量得知</li><li>分析页面中的行模块，以及每个行模块中的列模块，（页面第一准则）（自用口诀：页面中，分析行，行中列）</li><li>一行中的行模块经常浮动布局，先确定每个列的大小之后确定列的位置（自用口诀：一行中，先大小 后位置）</li><li>制作HTML结构，先结构，后样式</li><li>先理清布局结构，再写代码</li></ol><h2 id="网页布局总结"><a href="#网页布局总结" class="headerlink" title="网页布局总结"></a>网页布局总结</h2><ul><li><p>标准流</p><p>可以让盒子上下排列或者左右排列，<strong>垂直</strong>的块级盒子显示就用标准流布局</p></li><li><p>浮动</p><p>可以让多个块级元素一行显示或者左右对齐盒子，多个块级盒子<strong>水平显示</strong>就用浮动布局</p></li><li><p>定位</p><p>定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来显示，如果元素字有<strong>在某个盒子内移动</strong>就用定位布局</p></li></ul><p>PS切图工具cutterman：</p><p><a href="https://www.cutterman.cn/zh/cutterman">https://www.cutterman.cn/zh/cutterman</a></p>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML简介</title>
    <link href="/2022/11/25/01-HTML/HTML/HTML%E7%AE%80%E4%BB%8B/"/>
    <url>/2022/11/25/01-HTML/HTML/HTML%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h1><h2 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h2><p>HTML是 超文本标记语言（Hyper Text Markup Language），是用来描述网页的一种语言。</p><p>HTML不是 一种编程语言，而是一种标记语言（Markup Language)。</p><p>标记语言是一套标记标签（Markup tag）。</p><p>什么是超文本：</p><ul><li>可以添加图片、声音、动画、多媒体等内容（超越了文本限制）</li><li>可以从一个文件跳转到另一个文件，与世界各地主机的文件链接（超级链接文本）</li></ul><h2 id="网页的形成"><a href="#网页的形成" class="headerlink" title="网页的形成"></a>网页的形成</h2><p>网页是由网页元素组成的，这些元素是利用HTML标签描述出来的，然后通过浏览器解析来显示给用户。</p><p>总结：</p><p>网页是图片、链接、文字、声音、视频等元素组成，就是一个HTML文件（后缀名为html）</p><p>网页生成制作：由前端人员竖着写HTML文件，然后浏览器打开，就能看到网页。</p><p>HTML：超文本标记语言，用来制作网页的一门语言，由标签组成。如：图片标签、视频标签</p><h2 id="web标准"><a href="#web标准" class="headerlink" title="web标准"></a>web标准</h2><p>web标准是由W3C组织和其他标准化组织指定得<strong>一系列标准的集合</strong>。W3C（万维网）是国际最著名的标准化组织。</p><h3 id="为什么需要web标准"><a href="#为什么需要web标准" class="headerlink" title="为什么需要web标准"></a>为什么需要web标准</h3><p>浏览器不同，他们显示页面或者排版就有些许差异。遵循Web标准不仅可以让不同的开发人员写出的页面更标准、更统一外，还有以下优点：</p><ol><li>让Web的发展前景更广阔</li><li>内容能被更广泛的设备访问</li><li>更容易被搜寻引擎搜索</li><li>降低网站流量费用</li><li>是网站更易于维护</li><li>提高页面浏览速度</li></ol><h3 id="web标准的构成"><a href="#web标准的构成" class="headerlink" title="web标准的构成"></a>web标准的构成</h3><p>主要包括 **结构（Structure）、表现（Presentation）、行为（behavior)**三个方面</p><table><thead><tr><th>标准</th><th>说明</th></tr></thead><tbody><tr><td>结构</td><td>结构用于对<strong>网页元素</strong>进行整理和分类，现阶段主要学的是HTML</td></tr><tr><td>表现</td><td>表现用于设置网页元素的版式、颜色、大小等<strong>外观样式</strong>，主要是的是CSS</td></tr><tr><td>行为</td><td>行为是指网页模型的定义及<strong>交互</strong>的编写，现阶段主要学的是JavaScript</td></tr></tbody></table><p>Web便准提出的最佳体验方案：<strong>结构、样式、行为相分离</strong></p><p>即：<strong>结构写到HTML文件中，表现写到CSS文件中，行为写到JavaScript文件中</strong>。</p><p>结构最重要</p><h2 id="HTML语法规范"><a href="#HTML语法规范" class="headerlink" title="HTML语法规范"></a>HTML语法规范</h2><ul><li>HTML标签是由尖括号包围的关键字，例如：&lt;html&gt;</li><li>HTML标签通常成对出现的，例如：&lt;html&gt; &lt;/html&gt;,我们称为<strong>双标签</strong>，标签对中的第一个标签是开始标签，第二个标签是结束标签</li><li>有些特殊的标签必须是单个标签（极少情况），例如：&lt;br /&gt;，我们成为<strong>单标签</strong></li></ul><p>双标签的关系可以分为：<strong>包含关系</strong>和<strong>并列关系</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>html与head和body是包含关系；head和body是并列关系</p><p>、</p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>第一个页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>主体<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="文档类型声明标签"><a href="#文档类型声明标签" class="headerlink" title="文档类型声明标签"></a>文档类型声明标签</h3><p>&lt;!DOCTYPE&gt;    文档类型声明，作用就是告诉浏览器使用哪种HTML版本来显示网页</p><p>&lt;!DOCTYPE html&gt;    表示当前页面采取的是HTML5版本来显示网页</p><p><strong>注意：</strong></p><ul><li>&lt;!DOCTYPE&gt;声明位于文档中最前面的位置，处于&lt;html&gt;标签之前</li><li>&lt;!DOCTYPE&gt;不是一个HTML标签，它就是文档类型声明标签</li></ul><h3 id="lang语言种类"><a href="#lang语言种类" class="headerlink" title="lang语言种类"></a>lang语言种类</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>用于定义当前文档显示的语言</p><ul><li>en定义语言为英语，网页为英文网页，可以显示中文</li><li>zh-CN定义语言为中文，网页为中文网页，可以显示英文</li></ul><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>字符集（Character set）是多个字符的集合。以便计算机能够识别和存储各种文字</p><p>在&lt;head&gt;标签中可以利用&lt;meta&gt;标签的charset属性来规定HTML文档应该使用哪种字符编码。</p><p>UTF-8又称万国码，基本包含了全世界所有国家需要用到的字符。</p><h2 id="注释与特殊字符"><a href="#注释与特殊字符" class="headerlink" title="注释与特殊字符"></a>注释与特殊字符</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>HTML中的注释 “&lt;!–”开头，以“–&gt;”结束</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--此处为注释语句--&gt;</span><br></code></pre></td></tr></table></figure><p>注释标签里面的内容是不执行、不显示到网页中的。</p><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><table><thead><tr><th>特殊字符</th><th>描述</th><th>字符的代码</th></tr></thead><tbody><tr><td></td><td>空格符</td><td>&amp;nbsp;</td></tr><tr><td>&lt;</td><td>小于号</td><td>&amp;lt</td></tr><tr><td>&gt;</td><td>大于号</td><td>&amp;gt;</td></tr><tr><td>&amp;</td><td></td><td></td></tr></tbody></table><h1 id="常用查阅网站"><a href="#常用查阅网站" class="headerlink" title="常用查阅网站"></a>常用查阅网站</h1><p><a href="https://www.w3school.com.cn/">https://www.w3school.com.cn/</a></p><p><a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>]]></content>
    
    
    <categories>
      
      <category>01-HTML</category>
      
      <category>HTML</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>bootstrap</title>
    <link href="/2022/11/25/07-%E6%A1%86%E6%9E%B6/bootstrap/bootstrap/"/>
    <url>/2022/11/25/07-%E6%A1%86%E6%9E%B6/bootstrap/bootstrap/</url>
    
    <content type="html"><![CDATA[<h1 id="bootstrap的使用"><a href="#bootstrap的使用" class="headerlink" title="bootstrap的使用"></a>bootstrap的使用</h1><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><table><thead><tr><th></th><th>超小屏幕（手机）&lt; 768px</th><th>小屏设备（平板）&gt;=768px</th><th>中等屏幕（桌面显示器）&gt;=992px</th><th>宽屏设备（大桌面显示器）&gt;=1200px</th></tr></thead><tbody><tr><td>.container最大宽度</td><td>自动100%</td><td>750px</td><td>970px</td><td>1170px</td></tr><tr><td>类前缀</td><td>.col-xs-</td><td>.col-sm-</td><td>.col-md-</td><td>.col-lg-</td></tr><tr><td>列数（column）</td><td>12</td><td>12</td><td>12</td><td>12</td></tr></tbody></table><ul><li><p>行row必须放到container布局容器里面</p></li><li><p>实现列的平均划分，需要给列添加 <strong>类前缀</strong></p></li><li><p>xs - extra small 超小</p><p>sm - small 小</p><p>md - medium 中等</p><p>lg - large 大</p></li><li><p>列column大于12，多余的 列column 所在的元素将被作为一个整体另起一行排列</p></li><li><p>每一列默认有左右15像素的padding</p></li><li><p>可以同时为一列指定多个设备的类名，以便划分不同份数</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 根据额屏幕大小调整一行显示的盒子个数 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3 col-md-4 col-sm-6 col-xs-12&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3 col-md-4 col-sm-6 col-xs-12&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3 col-md-4 col-sm-6 col-xs-12&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3 col-md-4 col-sm-6 col-xs-12&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 若孩子的份数相加等于 12 ，则会占满整个container的宽度 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-6&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-2&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-2&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 若孩子的份数相加小于 12 ，则会占不满整个container的宽度 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-6&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-2&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-1&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 若孩子的份数相加大于 12 ，则会换行 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-6&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-2&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&lt;div class=”col-lg-3 col-md-4 col-sm-6 col-xs-12”&gt;1&lt;/div&gt;</p><p>表示：container一行12份。大屏幕时，该盒子占3份；中等屏幕时，占4份；小屏幕时，占6份；超小屏幕时，占12份，即占一行。</p><h3 id="列嵌套"><a href="#列嵌套" class="headerlink" title="列嵌套"></a>列嵌套</h3><p>栅格系统内置的栅格系统内容将再次嵌套，简单理解就是一个列内再分成是若干份小列。可以通过添加一个新的.row元素和一系列.col-sm-*元素到已经村造的.col-sm-*内</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 设置盒子间的间距：</span><br><span class="hljs-comment">                分配的盒子若已经占满了container的一行，</span><br><span class="hljs-comment">                就不能设置水平方向上的margin用于间隔盒子之间的距离，</span><br><span class="hljs-comment">                否则会将盒子挤到下一行。</span><br><span class="hljs-comment">                正确的做法：</span><br><span class="hljs-comment">                间距实际是通过在盒子内部在建立一个盒子，因为每一列都有padding值，</span><br><span class="hljs-comment">                从而达到间距的效果。</span><br><span class="hljs-comment">                注意：不要直接在盒子内部建立列数，最好先加一个行，再在行里面建立列，</span><br><span class="hljs-comment">                由此可以消除父元素的padding值</span><br><span class="hljs-comment">            --&gt;</span><br>             <br>            <span class="hljs-comment">&lt;!-- 示例1：</span><br><span class="hljs-comment">                直接在第一列内部嵌套列数，由于父盒子本身有padding，新建立的盒子a也有padding，</span><br><span class="hljs-comment">                整体的padding就会更大</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <br>            <span class="hljs-comment">&lt;!-- 示例2：</span><br><span class="hljs-comment">                先加一行，再在行里面建立盒子</span><br><span class="hljs-comment">             --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: orange&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- .row消除了父盒子的padding --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span>&gt;</span>d<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果：</p><p>![image-20220515103058926](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220515103058926.png)</p><h3 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h3><p>使用 col-md-offset-*</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3&quot;</span>&gt;</span>左侧<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 偏移的份数 = 12 - 两个盒子的份数6 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3 col-md-offset-6&quot;</span>&gt;</span>右侧<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 一个盒子偏移份数 = (12 - 盒子份数）/2 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6 col-md-offset-3&quot;</span>&gt;</span>中间<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果：</p><p>![image-20220515104540040](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220515104540040.png)</p><h3 id="列排序"><a href="#列排序" class="headerlink" title="列排序"></a>列排序</h3><p>通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列的顺序</p><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span>左侧<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-8&quot;</span>&gt;</span>右侧<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果：</p><p>![image-20220515105129961](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220515105129961.png)</p><p>排序之后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 左侧往右侧推push --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4 col-md-push-8&quot;</span>&gt;</span>左侧<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 右侧往左侧拉pull --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-8 col-md-pull-4&quot;</span>&gt;</span>右侧<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果：</p><p>![image-20220515105400356](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220515105400356.png)</p><h3 id="响应式工具"><a href="#响应式工具" class="headerlink" title="响应式工具"></a>响应式工具</h3><p>为加快对移动设备有好的页面开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同设备展示或隐藏页面内容</p><table><thead><tr><th>类名</th><th>超小屏</th><th>小屏</th><th>中屏</th><th>大屏</th></tr></thead><tbody><tr><td>.hidden-xs</td><td>隐藏</td><td>可见</td><td>可见</td><td>可见</td></tr><tr><td>.hidden-sm</td><td>可见</td><td>隐藏</td><td>可见</td><td>可见</td></tr><tr><td>.hidden-md</td><td>可见</td><td>可见</td><td>隐藏</td><td>可见</td></tr><tr><td>.hidden-lg</td><td>可见</td><td>可见</td><td>可见</td><td>隐藏</td></tr></tbody></table><p>与之相反的是：visible-lg visible-md visible-sm visible-xs </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-3&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- visible-* ：</span><br><span class="hljs-comment">                    visible-lg 在大屏幕显示，其他情况不显示；</span><br><span class="hljs-comment">                    visible-md visible-sm visible-xs 同理</span><br><span class="hljs-comment">                --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;visible-lg&quot;</span>&gt;</span>我可以显示<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-3&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- hidden-* ：</span><br><span class="hljs-comment">                中等屏幕和小屏幕时，隐藏；其他情况显示，若要其他情况也隐藏，可以继续添加类 </span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-3 hidden-md hidden-sm&quot;</span>&gt;</span>我可以隐藏哦<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-3&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>07-框架</category>
      
      <category>bootstrap</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Express</title>
    <link href="/2022/11/25/03-JS/NodeJS/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/Express/"/>
    <url>/2022/11/25/03-JS/NodeJS/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/Express/</url>
    
    <content type="html"><![CDATA[<h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><h3 id="初识Express"><a href="#初识Express" class="headerlink" title="初识Express"></a>初识Express</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>运行如下终端命令</p><blockquote><p>npm i <a href="mailto:&#x65;&#120;&#112;&#114;&#101;&#115;&#115;&#64;&#52;&#x2e;&#49;&#x37;&#x2e;&#49;">&#x65;&#120;&#112;&#114;&#101;&#115;&#115;&#64;&#52;&#x2e;&#49;&#x37;&#x2e;&#49;</a></p></blockquote><h4 id="创建基本的Web服务器"><a href="#创建基本的Web服务器" class="headerlink" title="创建基本的Web服务器"></a>创建基本的Web服务器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 1 导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">// 2 创建web服务器</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><span class="hljs-comment">// 3 调用 app.listen(端口号， 启动成功后的回调函数)，启动服务器</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;express server running at http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="监听GET请求"><a href="#监听GET请求" class="headerlink" title="监听GET请求"></a>监听GET请求</h5><p>通过app.get()方法，可以监听客户端的GET请求，（在上面的第2步到第3步之间，即创建web服务器后，启动服务器前）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 监听GET请求</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;请求URL&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-comment">/* 处理函数 */</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>get第一个参数：客户端请求的URL地址</li><li>get第二个参数：请求对应的处理函数</li><li>函数参数req：请求对象（包含了与请求相关的属性和方法）</li><li>函数参数res：响应对象（包含了与响应有关的属性和方法）</li></ul><h5 id="监听POST请求"><a href="#监听POST请求" class="headerlink" title="监听POST请求"></a>监听POST请求</h5><p>（在上面的第2步到第3步之间，即创建web服务器后，启动服务器前）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 监听POST请求</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;请求URL&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-comment">/* 处理函数 */</span><br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="将内容响应给客户端"><a href="#将内容响应给客户端" class="headerlink" title="将内容响应给客户端"></a>将内容响应给客户端</h5><p>通过 res.send() 的方法，可以将处理好的内容发送给客户端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;请求URL&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-comment">// 向客户端发送 JSON 对象</span><br>    res.<span class="hljs-title function_">send</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;请求URL&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-comment">// 向客户端发送文本内容</span><br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;请求成功&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1 导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">// 2 创建web服务器</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">// 4 监听客户端的GET和POST请求</span><br><span class="hljs-comment">// 4.1 监听GET请求</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-comment">/* 处理函数 */</span><br>    <span class="hljs-comment">// 调用express提供的res.send()方法，向客户端发送 JSON 对象</span><br>    res.<span class="hljs-title function_">send</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;)<br>&#125;)<br><span class="hljs-comment">// 4.2 监听POST请求</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-comment">/* 处理函数 */</span><br>    <span class="hljs-comment">// 调用express提供的res.send()方法，向客户端发送文本内容</span><br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;请求成功&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 3 调用 app.listen(端口号， 启动成功后的回调函数)，启动服务器</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;express server running at http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="获取url中携带的查询参数"><a href="#获取url中携带的查询参数" class="headerlink" title="获取url中携带的查询参数"></a>获取url中携带的查询参数</h5><p>req.query对象，可访问到 客户端通过查询字符串的形式，发送到服务器的参数</p><ul><li>req.query 默认是一个空对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 4.3 获取url中携带的查询参数 req.query</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">/* 客户端通过在url后面写查询字符串：?name=&#x27;zs&#x27;&amp;age=20 ，发送到服务器的参数 </span><br><span class="hljs-comment">    可以通过 req.query 对象访问到 */</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">query</span>)<br>    res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">query</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>![image-20220528093049012](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220528093049012.png)</p><ul><li><strong>req.query.name 和 req.query.age 可以访问到发送到服务器的参数</strong></li></ul><h5 id="获取URL中的动态参数"><a href="#获取URL中的动态参数" class="headerlink" title="获取URL中的动态参数"></a>获取URL中的动态参数</h5><p>通过 <strong>req.params</strong> 对象可以访问到URL中通过 <strong>冒号:</strong> 匹配到的动态参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 4.4 获取URL中的动态参数</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/:id&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// req.params 默认是一个空对象，里面存放着通过动态匹配到的参数值</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">params</span>)<br>    res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">params</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>![image-20220528094200159](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220528094200159.png)</p><p><strong>注意：</strong></p><ul><li><p>这里的 :id 是一个动态的参数</p></li><li><p>:id 的id可以自定义，只是一个参数名而已，改为需要的参数名即可，如： :ids</p></li><li><p>:ids 后面还可以继续跟，如 :ids/:name</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/:ids/:name&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// req.params 默认是一个空对象，里面存放着通过动态匹配到的参数值</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">params</span>)<br>    res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">params</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>![image-20220528094958864](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220528094958864.png)</p></li></ul><h4 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a>托管静态资源</h4><h5 id="express-static"><a href="#express-static" class="headerlink" title="express.static()"></a>express.static()</h5><ul><li>通过express.static()可以非常方便的创建一个<strong>静态资源服务器</strong></li></ul><p>案例：将之前clock文件夹里面的文件通过express.static() 对外开放访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br> <span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br> app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;./clock&#x27;</span>))<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;express server running at http://127.0.0.1&#x27;</span>)<br> &#125;)<br></code></pre></td></tr></table></figure><p>clock文件夹里面有三个文件index.html, index.css, index,js，通过上面的操作，在网页上只需要输入 <a href="http://127.0.0.1后面加上/">http://127.0.0.1后面加上</a> /index.html 或 /index.css 或 /index.js 即可访问到对应文件，不需要写 /clock/index.html</p><p>注意：</p><ul><li><p>express在指定的静态目录中查找文件，并对外提供资源的访问路径，存放静态文件的目录名不会出现在URL中，如上所示，访问时的url地址不需要写 /clock</p></li><li><p>若要<strong>托管多个静态资源目录</strong>，可以多次调用express.static()函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;public&#x27;</span>))<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;files&#x27;</span>))<br></code></pre></td></tr></table></figure><p>访问静态资源时，会根据目录的添加书匈奴查找所需的文件，即 访问的资源，若能够在public找到，就用public的，若public没有才去下面的查找</p></li><li><p><strong>挂载路径前缀</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/clock&#x27;</span>, express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;./clock&#x27;</span>))<br></code></pre></td></tr></table></figure><p>此时就需要有/clock前缀才能访问到指定的文件，如：<a href="http://127.0.0.1/clock/index.html">http://127.0.0.1/clock/index.html</a></p></li></ul><h4 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h4><p>在编写调试Node.js项目，使用node启动项目时，若修改了项目的代码，需要频繁手动的close，然后再重新启动，很繁琐。</p><p>nodemon能够监听项目文件的变化，当代码被修改后，nodemon会自动帮我们重启项目</p><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><blockquote><p>npm install -g nodemon</p></blockquote><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>只需要将原来的 node app.js 的node 改为 nodemon 即可</p><blockquote><p>nodemone app.js</p></blockquote><h3 id="Express路由"><a href="#Express路由" class="headerlink" title="Express路由"></a>Express路由</h3><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>路由——广义来讲就是 映射关系</p><h5 id="express中的路由"><a href="#express中的路由" class="headerlink" title="express中的路由"></a>express中的路由</h5><p>3部分构成:</p><ul><li>请求的类型 如:get post</li><li>请求的URL地址</li><li>处理函数</li></ul><blockquote><p>app.method(Path, handle)</p></blockquote><p>如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hi~&#x27;</span>)<br>&#125;<br>        <br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hi~&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="路由的使用"><a href="#路由的使用" class="headerlink" title="路由的使用"></a>路由的使用</h4><h5 id="最简单的用法"><a href="#最简单的用法" class="headerlink" title="最简单的用法"></a>最简单的用法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1 导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">// 2 创建web服务器</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">// 挂载路由</span><br><span class="hljs-comment">// 4.1 监听GET请求</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123; res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hi~&#x27;</span>) &#125;)<br><span class="hljs-comment">// 4.2 监听POST请求</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123; res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;请求成功&#x27;</span>) &#125;)<br><br><span class="hljs-comment">// 3 启动服务器</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;express server running at http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="模块化路由"><a href="#模块化路由" class="headerlink" title="模块化路由"></a>模块化路由</h5><p>最简单的路由使用中,如果路由很多,就需要挂载很多的路由,express不建议将路由直接挂载到app上,而是推荐将路由抽离为单独的模块.</p><h6 id="创建路由模块"><a href="#创建路由模块" class="headerlink" title="创建路由模块"></a>创建路由模块</h6><p>02-router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1 导入 express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">// 2 创建路由对象</span><br><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>()<br><br><span class="hljs-comment">// 3 挂载路由</span><br><span class="hljs-comment">// 3.1 挂载获取用户列表的路由</span><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/list&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Get user&#x27;s list&quot;</span>)<br>&#125;)<br><span class="hljs-comment">// 3.2 挂载添加用户的路由</span><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user/add&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Add new user&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 4 向外到处路由对象</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router<br></code></pre></td></tr></table></figure><h6 id="使用路由模块"><a href="#使用路由模块" class="headerlink" title="使用路由模块"></a>使用路由模块</h6><p>主要有两步:</p><ul><li>导入路由模块</li><li>注册路由模块</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 使用路由模块 */</span><br><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">// 1 导入路由模块</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./02-router&#x27;</span>)<br><span class="hljs-comment">// 2 注册路由模块 </span><br>app.<span class="hljs-title function_">use</span>(router)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server running at http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="补充app-use"><a href="#补充app-use" class="headerlink" title="补充app.use()"></a>补充app.use()</h5><p>作用:就是用来注册<strong>全局中间件</strong></p><p>之前所用到的 app.use(express.static(‘./files’))和此处用到的 app.use(router)中的 express.static(‘./files’) 和 router 都是全局中间件</p><h5 id="为路由模块添加前缀"><a href="#为路由模块添加前缀" class="headerlink" title="为路由模块添加前缀"></a>为路由模块添加前缀</h5><p>与静态资源统一挂载访问前缀一样, 在注册路由模块时添加</p><blockquote><p>app.use(‘/api’, router)</p></blockquote><h3 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h3><p>中间件：业务流程的中间处理环节</p><h4 id="中间件基础"><a href="#中间件基础" class="headerlink" title="中间件基础"></a>中间件基础</h4><h5 id="中间件的格式"><a href="#中间件的格式" class="headerlink" title="中间件的格式"></a>中间件的格式</h5><p>本质上就是一个function处理函数，在中间件的形参列表中，必须包含next参数。而路由处理函数中只包含req和res</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 挂载路由</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/list&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Get user&#x27;s list&quot;</span>)<br>&#125;)<br><br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/list&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="next函数的作用"><a href="#next函数的作用" class="headerlink" title="next函数的作用"></a>next函数的作用</h5><p>next() 是实现多个中间件连续调用的关键，表示吧流转关系转交给下一个中间件 或 路由</p><h5 id="定义中间件函数"><a href="#定义中间件函数" class="headerlink" title="定义中间件函数"></a>定义中间件函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义一个最简单的中间件函数</span><br><span class="hljs-keyword">const</span> mw = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是最简单的中间件 或 路由&#x27;</span>)<br>    <span class="hljs-comment">// 注意：当前中间件的业务处理完毕后，必须调用 next() 函数</span><br>    <span class="hljs-comment">// 表示把流转关系转交给下一个中间件 或 路由</span><br>    <span class="hljs-title function_">next</span>()<br>&#125;<br><br><span class="hljs-comment">// 将 mw 注册为全局生效的中间件</span><br>app.<span class="hljs-title function_">use</span>(mw)<br></code></pre></td></tr></table></figure><ul><li>全局生效的中间件<ul><li>客户端发起的任何请求，到达服务器后，都会触发的中间件，叫做全局生效的中间件</li><li>通过调用app.use(中间件函数)，即可定义一个全局生效的中间件</li></ul></li></ul><p>定义中间件的简化形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义全局中间件的简化形式</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;这是全局中间件的简化形式&quot;</span>)<br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="中间件的作用"><a href="#中间件的作用" class="headerlink" title="中间件的作用"></a>中间件的作用</h5><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06 前后端交互/image-20220529090403125.png" alt="image-20220529090403125" style="zoom:80%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取请求到达服务器的时间</span><br>    <span class="hljs-keyword">const</span> time = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>    <span class="hljs-comment">// 为req对象挂载自定义属性，从而将时间time共享给后面所有的路由</span><br>    req.<span class="hljs-property">starttime</span> = time<br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用了/这个路由&#x27;</span>)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;首页&#x27;</span> + req.<span class="hljs-property">starttime</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用了/user这个路由&#x27;</span>)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;用户页面&#x27;</span> + req.<span class="hljs-property">starttime</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>在中间件函数里面定义了time，并挂载到乐req的自定义属性里面，由此就不必在每个路由中都重新定义一个时间time</p><h5 id="定义多个全局中间件"><a href="#定义多个全局中间件" class="headerlink" title="定义多个全局中间件"></a>定义多个全局中间件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义并注册多个全局中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第1个中间件&#x27;</span>)<br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br><br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第2个中间件&#x27;</span>)<br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br><br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用了 / 这个路由&#x27;</span>)<br>    res.<span class="hljs-title function_">send</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="定义局部中间件"><a href="#定义局部中间件" class="headerlink" title="定义局部中间件"></a>定义局部中间件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义中间件函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mw</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是一个中间件&#x27;</span>)<br>    <span class="hljs-title function_">next</span>()<br>&#125;<br><br><span class="hljs-comment">// mw 这个中间件只在“当前路由中生效”，这种用法属于“局部生效的中间件”</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, mw, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用了 / 这个路由&#x27;</span>)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;首页&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// mw 这个中间件不会影响下面这个路由</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用户页面&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="定义多个局部中间件"><a href="#定义多个局部中间件" class="headerlink" title="定义多个局部中间件"></a>定义多个局部中间件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义中间件函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mw1</span> (req, res, next) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第1个中间件&#x27;</span>)<br>    <span class="hljs-title function_">next</span>()<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mw2</span> (req, res, next) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第2个中间件&#x27;</span>)<br>    <span class="hljs-title function_">next</span>()<br>&#125;<br><br><span class="hljs-comment">// mw1 mw2 中间件只在“当前路由中生效”</span><br><span class="hljs-comment">// 写法1：mw1, mw2</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, mw1, mw2, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用了 / 这个路由&#x27;</span>)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;首页&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">// 写法2:[mw1, mw2]</span><br><span class="hljs-comment">// app.get(&#x27;/&#x27;, [mw1, mw2], (req, res) =&gt; &#123;</span><br><span class="hljs-comment">//     console.log(&#x27;调用了 / 这个路由&#x27;)</span><br><span class="hljs-comment">//     res.send(&#x27;首页&#x27;)</span><br><span class="hljs-comment">// &#125;)</span><br><br><span class="hljs-comment">// mw1 mw2 这个中间件不会影响下面这个路由</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用了 /user 这个路由&#x27;</span>)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;用户界面&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>一定要在路由之前注册中间件</li><li>执行完中间件的业务员代码后，一定要调用next()函数</li><li>调用next()后 不要再写额外的代码</li><li>连续调用多个中间件时，多个中间件之间，共享 req 和 res 对象</li></ul><h4 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类"></a>中间件的分类</h4><ul><li><p><strong>应用级别</strong>的中间件</p><p>通过app.use(), app.get(), app.post(), <strong>绑定到app实例</strong>上的中间件</p></li><li><p><strong>路由级别</strong>的中间件</p><p>绑定到express.<strong>Router()实例上</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>()<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>()<br><br>router.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) =&gt; &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;中间件&#x27;</span>)<br><span class="hljs-title function_">next</span>()<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p><strong>错误级别</strong>的中间件</p><p>错误级别的中间件的function处理函数中，必须有4个参数，参数的顺序从前到后，分别是（err, req, res, next)</p><p>特别注意的是：错误级别的中间件必须注册在所有路由之后，这是和之前不一样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 抛出一个自定义错误</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;服务器内部发生错误&#x27;</span>)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;首页&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 注意：错误级别的中间件，必须放在所有路由之后</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Error:&#x27;</span> + err.<span class="hljs-property">message</span>)<br>    <span class="hljs-comment">// 由于放在最后，此处是 res.send()，不是next</span><br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;发生了错误:&#x27;</span> + err.<span class="hljs-property">message</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p><strong>Express内置</strong>的中间件</p><ul><li><p><strong>express.static</strong></p><p>快速托管静态资源的内置中间件（无兼容性）</p></li><li><p><strong>express.json</strong></p><p>解析JSON格式的请求体数据（有兼容性，仅在4.16.0以后的版本可用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">// 配置解析json格式数据的内置中间件</span><br><span class="hljs-comment">// 若没有这一行,下面的req.body就是undefined</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>())<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 在服务器中可以使用req.body这个属性，来接收客户端发送过来的请求体数据</span><br>    <span class="hljs-comment">// 若不配置解析表单数据的中间件，则 req.body 默认等于 undefined</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;ok!&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>![image-20220529110437125](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220529110437125.png)</p></li><li><p><strong>express.urlencoded</strong></p><p>解析URL-encoded格式的请求体数据（有兼容性，仅在4.16.0以后的版本可用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">// 配置解析 x-www-form-urlencoded 格式数据的内置中间件</span><br><span class="hljs-comment">// 若没有这一行,下面的req.body就是&#123;&#125;</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123;<span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span>&#125;))<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 在服务器中可以使用req.body这个属性，来接收客户端发送过来的JSON格式的表单数据和 url-encoded 格式的数据</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;OK!&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>![image-20220529111433938](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220529111433938.png)</p></li></ul></li><li><p><strong>第三方的中间件</strong></p><p>由第三方开发出来的中间件，第三方中间件可以按需下载并配置</p><p>常用body-parser这个第三方中间件来解析请求体数据。</p><ul><li>运行 npm install <strong>body-parser</strong> 安装中间件</li><li>使用 require 导入中间件</li><li>调用 app.use() 注册并使用中间件</li></ul><p>express内置的express.urlencoded中间件，就是基于body-parser这个第三方中间件进一步封装出来的</p></li></ul><h4 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h4><p>步骤：</p><ol><li>定义中间件</li><li>监听req的data事件</li><li>监听req的end事件</li><li>使用querystring模块解析请求体数据</li><li>将解析出来的数据对象挂载为 req.body</li><li>将自定义中间件封装为模块</li></ol><h3 id="Express写接口"><a href="#Express写接口" class="headerlink" title="Express写接口"></a>Express写接口</h3>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>NodeJS</category>
      
      <category>后端框架</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Node基础</title>
    <link href="/2022/11/25/03-JS/NodeJS/Node%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/11/25/03-JS/NodeJS/Node%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Node基础"><a href="#Node基础" class="headerlink" title="Node基础"></a>Node基础</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h2 id="常用终端命令"><a href="#常用终端命令" class="headerlink" title="常用终端命令"></a>常用终端命令</h2><p>window + R 打开运行面板，输入cmd后回车，打开终端</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>node -v</td><td>查看下载的Node.js的版本号</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>常用快捷键：</p><ul><li><p>⬆上箭头 可以快速定位到上一次执行的命令</p></li><li><p>tab键 快速补全路径</p></li><li><p>esc键 快速清空当前已输入的命令</p></li><li><p>输入cls命令，可清空终端</p></li></ul><h2 id="初识Nodejs"><a href="#初识Nodejs" class="headerlink" title="初识Nodejs"></a>初识Nodejs</h2><h3 id="初识Node-js"><a href="#初识Node-js" class="headerlink" title="初识Node.js"></a>初识Node.js</h3><p>在Node.js环境中执行JavaScript代码</p><p>方式一</p><ul><li>打开终端</li><li>切换到执行文件的目录下</li><li>输入 node 文件名</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">利用cd切换目录<br>cd C:\Users\余萍萍\Desktop\学习\前端\前端基础代码\<span class="hljs-number">05</span> Nodejs基础<br><span class="hljs-keyword">node</span> <span class="hljs-title">test01</span>.js<br><br>执行结果：<br>hello node.js<br></code></pre></td></tr></table></figure><p>方式二</p><ul><li>直接在待执行文件目录下打开powershell终端</li><li>输入 node 文件名</li></ul><h2 id="npm与包"><a href="#npm与包" class="headerlink" title="npm与包"></a>npm与包</h2><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><h3 id="包管理配置文件"><a href="#包管理配置文件" class="headerlink" title="包管理配置文件"></a>包管理配置文件</h3><h4 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i 包名 --save<br><br><span class="hljs-comment">// 简写为</span><br>npm i 包名 -S<br></code></pre></td></tr></table></figure><h4 id="devDependencies节点"><a href="#devDependencies节点" class="headerlink" title="devDependencies节点"></a>devDependencies节点</h4><p>若<strong>只在项目开发</strong>阶段会用到，在项目上线之后不会用到，则简易将这些包记录到devDependencies节点中；</p><p>与之对应的，若这些包<strong>在开发和项目上线后都需要</strong>用到，则建议将这些包记录到dependencies节点中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 安装指定的包并记录到 devDependencies 节点中</span><br>npm i 包名 -D<br><br><span class="hljs-comment">// 上面命令是下面的简写</span><br>npm i 包名 --save-dev<br></code></pre></td></tr></table></figure><h3 id="下载包速度慢的问题"><a href="#下载包速度慢的问题" class="headerlink" title="下载包速度慢的问题"></a>下载包速度慢的问题</h3><h3 id="包的分类"><a href="#包的分类" class="headerlink" title="包的分类"></a>包的分类</h3><h3 id="规范的包结构"><a href="#规范的包结构" class="headerlink" title="规范的包结构"></a>规范的包结构</h3><h3 id="开发自己的包"><a href="#开发自己的包" class="headerlink" title="开发自己的包"></a>开发自己的包</h3><h3 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h3><h1 id="Npm-模块加载机制"><a href="#Npm-模块加载机制" class="headerlink" title="Npm+模块加载机制"></a>Npm+模块加载机制</h1>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>NodeJS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>fs&amp;path模块案例</title>
    <link href="/2022/11/25/03-JS/NodeJS/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/fs&amp;path%E6%A8%A1%E5%9D%97%E6%A1%88%E4%BE%8B/"/>
    <url>/2022/11/25/03-JS/NodeJS/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/fs&amp;path%E6%A8%A1%E5%9D%97%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="fs-amp-path模块案例"><a href="#fs-amp-path模块案例" class="headerlink" title="fs&amp;path模块案例"></a>fs&amp;path模块案例</h1><h3 id="案例-时钟"><a href="#案例-时钟" class="headerlink" title="案例-时钟"></a>案例-时钟</h3><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06 前后端交互/image-20220525161527989.png" alt="image-20220525161527989" style="zoom:50%;" /><p>将素材目录下的 index.html 页面，拆分成三个文件，分别是：</p><ul><li>index.css</li><li>index.js</li><li>index.html</li></ul><p>并且将拆分出来的 3 个文件，存放到 clock 目录中</p><h4 id="知识点复习"><a href="#知识点复习" class="headerlink" title="知识点复习"></a>知识点复习</h4><ul><li><p>exec()方法</p><p>用于检索字符串中的正则表达式的匹配</p><blockquote><p>regExpObject.exec(string)</p></blockquote><ul><li>参数string是必需参数，是要检索的字符串</li><li>返回值是一个数组，数组的第0个元素是与正则表达式相匹配的文本</li></ul></li></ul><h4 id="分析与代码"><a href="#分析与代码" class="headerlink" title="分析与代码"></a>分析与代码</h4><ol><li><p>导入模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>利用正则表达式匹配&lt;style&gt;&lt;/style&gt; 和 &lt;script&gt;&lt;/script&gt;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 其中 \s 表示空白字符 \S 表示非空白字符 * 表示匹配任意次</span><br><span class="hljs-keyword">const</span> regStyle = <span class="hljs-regexp">/&lt;style&gt;[\s\S]*&lt;\/style&gt;/</span><br><span class="hljs-keyword">const</span> regScript = <span class="hljs-regexp">/&lt;script&gt;[\s\S]*&lt;\/script&gt;/</span><br></code></pre></td></tr></table></figure><ul><li>注意：\s 表示空白字符 \S 表示非空白字符 * 表示匹配任意次</li></ul></li><li><p>读取原始index.html文件</p><p>调用处理 css文件 js文件 html文件的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">fs.<span class="hljs-title function_">readFile</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./素材/index.html&#x27;</span>), <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, htmlStr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取文件失败！&#x27;</span> + err.<span class="hljs-property">message</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// 读取文件成功</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取文件成功&#x27;</span>)<br><br>    <span class="hljs-title function_">resolveCSS</span>(htmlStr)<br>    <span class="hljs-title function_">resolveJS</span>(htmlStr)<br>    <span class="hljs-title function_">resolveHtml</span>(htmlStr)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>处理CSS样式的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolveCSS</span>(<span class="hljs-params">htmlStr</span>) &#123;<br>    <span class="hljs-comment">// 1 使用正则提取页面中的 &lt;style&gt;&lt;/style&gt; 标签，此时包含&lt;style&gt;&lt;/style&gt;</span><br>    <span class="hljs-keyword">const</span> r1 = regStyle.<span class="hljs-title function_">exec</span>(htmlStr)   <span class="hljs-comment">// r1是一个数组，其中r1[0]存放是的css代码</span><br>    <span class="hljs-comment">// 2 去掉 前后的&lt;style&gt; 和 &lt;/style&gt;</span><br>    <span class="hljs-keyword">const</span> newcss = r1[<span class="hljs-number">0</span>].<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;&lt;style&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;&lt;/style&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newcss);<br>    <span class="hljs-comment">// 3 将 内容写入index.css中</span><br>    fs.<span class="hljs-title function_">writeFile</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./clock/index.css&#x27;</span>), newcss, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入css文件失败&#x27;</span> + err.<span class="hljs-property">message</span>);<br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入css文件成功&#x27;</span>);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>处理js脚本的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolveJS</span>(<span class="hljs-params">htmlStr</span>) &#123;<br>    <span class="hljs-comment">// 1 使用正则提取页面中的 &lt;style&gt;&lt;/style&gt; 标签，此时包含&lt;style&gt;&lt;/style&gt;</span><br>    <span class="hljs-keyword">const</span> r2 = regScript.<span class="hljs-title function_">exec</span>(htmlStr)   <span class="hljs-comment">// r1是一个数组，其中r1[0]存放是的css代码</span><br>    <span class="hljs-comment">// 2 去掉 前后的&lt;style&gt; 和 &lt;/style&gt;</span><br>    <span class="hljs-keyword">const</span> newjs = r2[<span class="hljs-number">0</span>].<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;&lt;/script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newjs);<br>    <span class="hljs-comment">// 3 将 内容写入index.js中</span><br>    fs.<span class="hljs-title function_">writeFile</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./clock/index.js&#x27;</span>), newjs, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入js文件失败&#x27;</span> + err.<span class="hljs-property">message</span>);<br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入js文件成功&#x27;</span>)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>处理html文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolveHtml</span>(<span class="hljs-params">htmlStr</span>) &#123;<br>    <span class="hljs-comment">// 将 &lt;style&gt;&lt;/style&gt; 所有内容换为 &lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;</span><br>    <span class="hljs-comment">// 将 &lt;script&gt;&lt;/script&gt; 所有内容为 &lt;script src=&quot;&quot;&gt;&lt;/script&gt;</span><br>    <span class="hljs-keyword">const</span> r1 = regStyle.<span class="hljs-title function_">exec</span>(htmlStr)<br>    <span class="hljs-keyword">const</span> r2 = regScript.<span class="hljs-title function_">exec</span>(htmlStr)<br>    <span class="hljs-keyword">const</span> newhtml = htmlStr.<span class="hljs-title function_">replace</span>(r1, <span class="hljs-string">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&gt;&#x27;</span>).<span class="hljs-title function_">replace</span>(r2, <span class="hljs-string">&#x27;&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;&#x27;</span>)<br>    <span class="hljs-comment">// console.log(newhtml);</span><br>    fs.<span class="hljs-title function_">writeFile</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./clock/index.html&#x27;</span>), newhtml, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入html文件失败！&#x27;</span> + err.<span class="hljs-property">message</span>)<br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入html文件成功&#x27;</span>);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul><li>fs.writeFile()方法只能哟ing来创建文件，不能用来创建路径（如：若没有文件夹，则不能创建文件夹）</li><li>重复调用fs.writeFile()写入同一个文件，新写入的内容会覆盖之前的内容</li></ul>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>NodeJS</category>
      
      <category>内置模块</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>http模块</title>
    <link href="/2022/11/25/03-JS/NodeJS/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/http%E6%A8%A1%E5%9D%97/"/>
    <url>/2022/11/25/03-JS/NodeJS/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/http%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><h4 id="创建最基本的web服务器"><a href="#创建最基本的web服务器" class="headerlink" title="创建最基本的web服务器"></a>创建最基本的web服务器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 1 导入http模块 （要在自己电脑上创建一个web服务器，对外界提供web服务，需要导入http模块）</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><br><span class="hljs-comment">// 2 创建web服务器实例</span><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>()<br><br><span class="hljs-comment">// 3 为服务器绑定request事件 （绑定后，即可监听客户端发送过来的网络请求）</span><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 3.1 req请求对象，包含了与客户端相关得数据和属性</span><br>    <span class="hljs-comment">// const str = `your request url is $&#123;req.url&#125;, and request method is $&#123;req.method&#125;`   // 此处用了模板字符串 ``</span><br>    <span class="hljs-keyword">const</span> str = <span class="hljs-string">`您请求的url地址是 <span class="hljs-subst">$&#123;req.url&#125;</span>, 请求的method类型为 <span class="hljs-subst">$&#123;req.method&#125;</span>`</span><br>    <br>    <span class="hljs-comment">// 3.2 中文乱码的问题，解决如下：调用setHeader()方法，将Content-Type设置为 text/html;charset=utf-8</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/html; charset=utf-8&#x27;</span>)<br>    <br>    <span class="hljs-comment">// 3.3 res 响应对象 包含了与服务器相关的数据和属性，如：要发送到客户端的字符串</span><br>    res.<span class="hljs-title function_">end</span>(str)    <span class="hljs-comment">// res.end()作用：向客户端发送指定内容，并结束这次请求的处理过程</span><br>&#125;)<br><br><span class="hljs-comment">// 4 启动服务器（调用.listen方法）</span><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;http server is running at http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="根据不同的url响应不同的html页面"><a href="#根据不同的url响应不同的html页面" class="headerlink" title="根据不同的url响应不同的html页面"></a>根据不同的url响应不同的html页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>()<br><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">const</span> url = req.<span class="hljs-property">url</span><br>    <span class="hljs-comment">// 定义显示内容,动态响应内容</span><br>    <span class="hljs-keyword">let</span> content = <span class="hljs-string">&#x27;&lt;h1&gt;404 Not found!&lt;/h1&gt;&#x27;</span><br>    <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/&#x27;</span> || url === <span class="hljs-string">&#x27;/index.html&#x27;</span>) &#123;<br>        content = <span class="hljs-string">&#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/about.html&#x27;</span>) &#123;<br>        content = <span class="hljs-string">&#x27;&lt;h1&gt;about页面&lt;/h1&gt;&#x27;</span><br>    &#125;<br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/html; charset=utf-8&#x27;</span>)<br>    res.<span class="hljs-title function_">end</span>(content)<br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;http server is running at http://127.0.0.1&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="案例-实现clock时钟的web服务器"><a href="#案例-实现clock时钟的web服务器" class="headerlink" title="案例-实现clock时钟的web服务器"></a>案例-实现clock时钟的web服务器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 1 导入需要的模块</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; dirname &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-comment">// 2 创建基本的web服务器</span><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>()<br><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 3 将资源请求的url地址映射为文件的存放路径</span><br>    <span class="hljs-comment">// 3.1 获取客户端的请求地址</span><br>    <span class="hljs-keyword">const</span> url = req.<span class="hljs-property">url</span><br>    <span class="hljs-comment">// 3.2 将请求的地址 映射到 本地文件的地址</span><br>    <span class="hljs-keyword">let</span> fpath = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment">// 5 优化资源的请求路径</span><br>    <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>        fpath = path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./clock/index.html&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        fpath = path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./clock&#x27;</span>, url)<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fpath);<br>    <br>    <span class="hljs-comment">// 4 读取文件内容，并响应给客户端</span><br>    fs.<span class="hljs-title function_">readFile</span>(fpath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, htmlStr</span>) &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;404 Not found&#x27;</span>)<br>        &#125;<br>        res.<span class="hljs-title function_">end</span>(htmlStr)<br>    &#125;)<br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;http server running at http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>NodeJS</category>
      
      <category>内置模块</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>path路径模块</title>
    <link href="/2022/11/25/03-JS/NodeJS/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/path%E8%B7%AF%E5%BE%84%E6%A8%A1%E5%9D%97/"/>
    <url>/2022/11/25/03-JS/NodeJS/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/path%E8%B7%AF%E5%BE%84%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="path路径模块"><a href="#path路径模块" class="headerlink" title="path路径模块"></a>path路径模块</h1><p>path路径模块时Node.js官方提供的，用来处理路径的模块，提供了一系列方法和属性</p><p>如：</p><ul><li>path.join() 将多个路径片段拼接成一个完整的路径字符串</li><li>path.basename() 用来从路径字符串中，将文件名解析出来</li></ul><p>要使用path模块，需要先导入</p><blockquote><p>const path = require(‘path’)</p></blockquote><h4 id="路径拼接path-join"><a href="#路径拼接path-join" class="headerlink" title="路径拼接path.join()"></a>路径拼接path.join()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> pathStr1 = path.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;/a&#x27;</span>, <span class="hljs-string">&#x27;/b&#x27;</span>, <span class="hljs-string">&#x27;../&#x27;</span>, <span class="hljs-string">&#x27;/c/d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pathStr1);   <span class="hljs-comment">// \a\c\d\e 说明：../会抵消前面一个/b</span><br><br><span class="hljs-keyword">const</span> pathStr2 = path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./files/1.txt&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pathStr2);  <span class="hljs-comment">// 输出当前文件所处目录\files\1.txt</span><br></code></pre></td></tr></table></figure><p>注意：<span style="color:red">凡是涉及到路径拼接的操作，都要用path.join()进行处理，不要直接使用 + 进行字符串拼接</span></p><h4 id="获取路径中的文件名path-basename"><a href="#获取路径中的文件名path-basename" class="headerlink" title="获取路径中的文件名path.basename()"></a>获取路径中的文件名path.basename()</h4><blockquote><p>path.basename(path[, ext])</p></blockquote><p>参数说明</p><ul><li>path：必须参数，表示一个路径的字符串</li><li>ext：可选参数，表示<strong>文件扩展名</strong>的字符串</li><li>返回：返回的字符串表示路径中的最后一部分</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-keyword">const</span> fpath = __dirname + <span class="hljs-string">&#x27;./index.html&#x27;</span><br><span class="hljs-keyword">var</span> fullname = path.<span class="hljs-title function_">basename</span>(fpath)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fullname);  <span class="hljs-comment">// index.html</span><br><br><span class="hljs-keyword">var</span> nameWithoutExt = path.<span class="hljs-title function_">basename</span>(fpath, <span class="hljs-string">&#x27;.html&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nameWithoutExt);    <span class="hljs-comment">// index</span><br></code></pre></td></tr></table></figure><h4 id="获取路径中的文件扩展名path-extname"><a href="#获取路径中的文件扩展名path-extname" class="headerlink" title="获取路径中的文件扩展名path.extname()"></a>获取路径中的文件扩展名path.extname()</h4><blockquote><p>path.extname(path)</p></blockquote><ul><li>path：必须参数，表示一个路径的字符串</li><li>返回：返回得到的扩展名字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-keyword">const</span> fpath = __dirname + <span class="hljs-string">&#x27;./index.html&#x27;</span><br><span class="hljs-keyword">var</span> fext = path.<span class="hljs-title function_">extname</span>(fpath)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fext;  <span class="hljs-comment">// .html</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>NodeJS</category>
      
      <category>内置模块</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>fs文件系统模块</title>
    <link href="/2022/11/25/03-JS/NodeJS/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/fs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9D%97/"/>
    <url>/2022/11/25/03-JS/NodeJS/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/fs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a>fs文件系统模块</h1><p>fs模块是Node.js官方提供的、用来操作文件的模块，提供了一系列的方式和属性，用来满足用户对文件的操作需求。如：</p><ul><li>fs.readFile() 用来读取指定文件中的内容</li><li>fs.writeFile() 用来向指定的文件中写入内容</li></ul><p>使用fs模块来操作文件，需要先导入：</p><blockquote><p>const fs = require(‘fs’)</p></blockquote><h4 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h4><h5 id="fs-readFile"><a href="#fs-readFile" class="headerlink" title="fs.readFile"></a>fs.readFile</h5><blockquote><p>fs.readFile(path[, options], callback)</p></blockquote><ul><li>参数1：必选参数，字符串，表示文件的路径</li><li>参数2：可选参数，表示以什么编码格式来读取文件，一般默认指定 utf8</li><li>参数3：必选参数，文件读取完成后，通过回调函数拿到读取的结果，回调函数的参数有两个 err 和 datastr</li></ul><p>读取文件成功时：</p><ul><li>第一个参数 为 null</li><li>第二个参数 为 读取的内容</li></ul><p>读取文件失败时：</p><ul><li>第一个参数 为 错误对象</li><li>第二个参数 为 undefined</li></ul><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-comment">// 调用fs.readFile()</span><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, dataStr</span>) &#123;<br>    <span class="hljs-comment">// 打印读取的成功与否的结果</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);   <span class="hljs-comment">// 读取成功时，为 null；失败时，err为错误对象</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataStr);   <span class="hljs-comment">// 读取成功时，为读取的内容；失败时，是undefined</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>命令行执行结果：</p><p>成功时</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-literal">null</span><br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>失败时</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">[Error: ENOENT: no such file or directory, open &#x27;C:\Users\余萍萍\Desktop\学习\前端\前端基础代码\05 Nodejs基础\files\11.txt&#x27;] &#123;<br>  errno: -4058,<br>  code: &#x27;ENOENT&#x27;,<br>  syscall: &#x27;open&#x27;,<br>  path: &#x27;C:<span class="hljs-symbol">\\</span>Users<span class="hljs-symbol">\\</span>余萍萍<span class="hljs-symbol">\\</span>Desktop<span class="hljs-symbol">\\</span>学习<span class="hljs-symbol">\\</span>前端<span class="hljs-symbol">\\</span>前端基础代码<span class="hljs-symbol">\\</span>05 Nodejs基础<span class="hljs-symbol">\\</span>files<span class="hljs-symbol">\\</span>11.txt&#x27;<br>&#125;<br>undefined<br></code></pre></td></tr></table></figure><h5 id="判断读取文件是否成功"><a href="#判断读取文件是否成功" class="headerlink" title="判断读取文件是否成功"></a>判断读取文件是否成功</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-comment">// 调用fs.readFile()</span><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, result</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取文件失败&#x27;</span> + err.<span class="hljs-property">message</span>);<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取文件成功：&#x27;</span> + result);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="向文件写入内容"><a href="#向文件写入内容" class="headerlink" title="向文件写入内容"></a>向文件写入内容</h4><h5 id="fs-writeFile"><a href="#fs-writeFile" class="headerlink" title="fs.writeFile"></a>fs.writeFile</h5><blockquote><p>fs.writeFile(file, data[, options], callback)</p></blockquote><ul><li>参数1：必选参数，需要制定一个文件路径的字符串，表示文件的存放路径</li><li>参数2：必选参数，表示要写入的内容</li><li>参数3：可选参数，表示已什么格式写入文件内容，默认值是utf8</li><li>参数4：必选参数，文件写入完成后的回调函数，回调函数的参数有err</li></ul><p>若写入成功，err为 null；若失败，err为一个错误对象</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;Hello Node.js&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<span class="hljs-comment">// 若写入成功，err为 null；若失败，err为一个错误对象</span><br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="判断文件是否写入成功"><a href="#判断文件是否写入成功" class="headerlink" title="判断文件是否写入成功"></a>判断文件是否写入成功</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;files/2.txt&#x27;</span>, <span class="hljs-string">&#x27;Hello Node.js&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-comment">// console.log(err)    // 若写入成功，err为 null；若失败，err为一个错误对象</span><br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;写入文件内容失败：&quot;</span> + err.<span class="hljs-property">message</span>);<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;写入内容成功&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="案例-整理成绩"><a href="#案例-整理成绩" class="headerlink" title="案例-整理成绩"></a>案例-整理成绩</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-comment">// 0 读取成绩数据</span><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;素材/成绩.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, dataStr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取文件失败：&#x27;</span> + err.<span class="hljs-property">message</span>)<br>    &#125;<br>    <span class="hljs-comment">// 1 把成绩按照空格分割 字符串转换为数组</span><br>    <span class="hljs-keyword">const</span> olddata = dataStr.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br><br>    <span class="hljs-comment">// 2 遍历得到的数组，将等号替换为冒号，并放入新数组里面</span><br>    <span class="hljs-keyword">const</span> newdata = []<br>    olddata.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(element)<br>        newdata.<span class="hljs-title function_">push</span>(element.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>))<br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newdata)<br><br>    <span class="hljs-comment">// 3 将数组合并为字符串，并以换行回车分隔 \r\n</span><br>    res = newdata.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\r\n&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br><br>    <span class="hljs-comment">// 4 将内容写入到成绩中</span><br>    fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;素材/成绩.txt&#x27;</span>, res, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>        <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入数据失败！&#x27;</span> + err.<span class="hljs-property">message</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入数据成功！&#x27;</span>)<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="路径动态拼接问题"><a href="#路径动态拼接问题" class="headerlink" title="路径动态拼接问题"></a>路径动态拼接问题</h4><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>使用f模块操作文件时，若提供的操作时以 ./ 或 ../ 开头的<strong>相对路径</strong>时，容易出现路径动态拼接错误的问题。</p><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p>代码在运行时，会以<strong>执行node命令时所处</strong>的目录，动态拼接出 被操作文件 的完成路径</p><p>![image-20220525105935028](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220525105935028.png)</p><p>![image-20220525105143366](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220525105143366.png)</p><p>如上所示，执行文件06在Day1目录下，若不在Day1目录下执行该文件，文件路径会被动态的拼接为 当前目录地址 + 使用fs.readFile里面提供的地址</p><p>![image-20220525110448104](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220525110448104.png)</p><p>如上所示，由此读取文件就失败了</p><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>可以在为fs.readFile里面提供地址时，提供一个完整的文件路径，即绝对路径，就可以解决这个问题</p><p>![image-20220525111649159](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220525111649159.png)</p><ul><li><p>注意：路径粘贴后，将所有的 \ 改为 \\</p></li><li><p>问题：移植性差，不利于维护</p></li><li><p>改进：利用__dirname来拼接目录路径</p><p>__dirname表示当前文件所处目录</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(__dirname);<br>fs.<span class="hljs-title function_">readFile</span>(__dirname + <span class="hljs-string">&#x27;/files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, dataStr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取文件失败&#x27;</span> + err.<span class="hljs-property">message</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取文件成功！&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>注意：使用字符串拼接时，__dirname + ‘/files/1.txt’，第一个/前面不能再加 . ,否则路径拼接出来仍然无法读取。</li><li>后续尽量避免使用 + 来拼接路径，容易出错，后续使用path模块来处理路径</li></ul>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>NodeJS</category>
      
      <category>内置模块</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Github</title>
    <link href="/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/Github/"/>
    <url>/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/Github/</url>
    
    <content type="html"><![CDATA[<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>5种常见的开源许可协议</p><ul><li>BSD</li><li>Apache Licence 2.0</li><li>GPL(GNU General Public License)<ul><li>具有传染性的一种开源协议,不允许修改后和衍生的代码做为闭源的商业软件发布和销售</li><li>使用GPL的最著名的软件项目是:Linux</li></ul></li><li>LGPL</li><li>MIT(Massachusetts Institute Of Technology)<ul><li>是目前限制最少的协议,唯一的条件: 在修改后的代码或者发行包种,必须包含原作者的许可信息</li><li>使用MIT的软件项目有: jquery Node.js</li></ul></li></ul><p>开源项目托管平台</p><p>专门用于免费存放开源项目源代码的网站,角坐开源项目托管平台.比较出名的主要有以下3个:</p><ul><li>Github(全球最牛的开源项目托管平台)</li><li>Gitlab(对代码私有性支持较好,企业用户较多)</li><li>Gitee(又叫做 码云, 是国产的开源项目托管平台,访问速度快,纯中文界面,使用友好)</li></ul><p>注意:由于以上3个平台,只能托管以Git管理的项目源代码,因此,他们的名字都以Git开头</p><p>什么是Github?</p><p>Github是全球最大的开源项目托管平台.</p><h3 id="star2-远程仓库的使用"><a href="#star2-远程仓库的使用" class="headerlink" title=":star2:远程仓库的使用"></a>:star2:远程仓库的使用</h3><h4 id="1-新建空白远程仓库"><a href="#1-新建空白远程仓库" class="headerlink" title="1 新建空白远程仓库"></a>1 新建空白远程仓库</h4><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06 前后端交互/image-20220523174547349.png" alt="image-20220523174547349" style="zoom:50%;" /><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06 前后端交互/image-20220523175016244.png" alt="image-20220523175016244" style="zoom:67%;" /><h4 id="2-远程仓库的访问方式"><a href="#2-远程仓库的访问方式" class="headerlink" title="2 远程仓库的访问方式"></a>2 远程仓库的访问方式</h4><ul><li><p>HTTPS</p><p>零配置,但是每次访问仓库是,需要重复输入Github的账号和密码才能访问成功</p></li><li><p>SSH</p><p>需要进行额外的配置,但是配置成功后,每次访问仓库,不需要重复输入Github的账号和密码</p></li></ul><p>实际开发中,更推荐事件SSH的方式访问远程仓库</p><h4 id="2-a-基于HTTPS将本地仓库上传到Github"><a href="#2-a-基于HTTPS将本地仓库上传到Github" class="headerlink" title="2.a 基于HTTPS将本地仓库上传到Github"></a>2.a 基于HTTPS将本地仓库上传到Github</h4><ul><li><p>若本地没有现成的Git仓库</p><ol><li><p>使用终端命令创建README.md文档,并写入初始内容为 # project_01</p><blockquote><p>echo “# project_01” &gt;&gt; README.md</p></blockquote></li><li><p>初始化本地Git仓库,并将文件的修改提交到本地的Git仓库</p><blockquote><p>git init</p><p>git add README.md</p><p>git commit -m “first_commit”</p></blockquote></li><li><p>将本地仓库和远程仓库进行关联,并把远程仓库命名为origin</p><blockquote><p>git remote add origin “url地址”</p></blockquote></li><li><p>将本地仓库中的内容推送到远程origin仓库中</p><blockquote><p>git push -u origin master</p></blockquote></li></ol></li></ul><ul><li><p>若本地有现成的Git仓库</p><ol><li><p>将本地仓库和远程仓库进行关联,并把远程仓库命名为origin</p><blockquote><p>git remote add origin “url地址”</p></blockquote></li><li><p>将本地仓库中的内同推送到远程origin仓库中</p><blockquote><p>git push -u origin master</p></blockquote></li></ol></li></ul><p>![image-20220523180809452](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220523180809452.png)</p><h4 id="2-b-基于SSH将本地仓库上传到Github"><a href="#2-b-基于SSH将本地仓库上传到Github" class="headerlink" title="2.b 基于SSH将本地仓库上传到Github"></a>2.b 基于SSH将本地仓库上传到Github</h4><h5 id="SSH-key"><a href="#SSH-key" class="headerlink" title="SSH key"></a>SSH key</h5><p>作用：实现本地仓库和Github之间的免登录的加密数据传输</p><p>好处：免登录身份认证、数据加密传输</p><p>由两部分组成：</p><ul><li>id_rsa（私钥文件，存放于客户端的电脑即可）</li><li>id_rsa.pub（公钥文件，需要配置到Github中）</li></ul><h5 id="生成SSH-key"><a href="#生成SSH-key" class="headerlink" title="生成SSH key"></a>生成SSH key</h5><ul><li><p>打开Git Bash</p></li><li><p>粘贴如下命令</p><blockquote><p>ssh-keygen -t rsa -b 4096 -C “注册Github账号时填写的邮箱”</p></blockquote></li><li><p>连续敲击3次回车，即可在<strong>C:\users\用户名文件夹\.ssh</strong>目录中生成 id_rsa 和 id_rsa.pub 两个文件</p></li></ul><h5 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h5><ul><li>用记事本打开 id_rsa.pub 文件，复制里面的文本内容</li><li>在浏览器中登录Github，点击头像 → Setting → SSH and GPG Keys → New SSH key</li><li>将 id_rsa.pub 文件的内容，粘贴到key对应得文本框中</li><li>在Title文本框中人已填写一个名称，来标识这个key从何而来</li></ul><h5 id="检测SSH-key是否配置成功"><a href="#检测SSH-key是否配置成功" class="headerlink" title="检测SSH key是否配置成功"></a>检测SSH key是否配置成功</h5><p>打开Git Bash 输入以下命令并回车执行</p><blockquote><p>ssh -T <a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#104;&#x75;&#98;&#46;&#x63;&#111;&#109;">&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#104;&#x75;&#98;&#46;&#x63;&#111;&#109;</a></p></blockquote><p>在提示消息后面输入 yes，收到连接成功得提示消息，证明SSH key 就配置成功了</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git clone 远程仓库的地址</td><td>将远程仓库克隆到本地</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="本地分支操作"><a href="#本地分支操作" class="headerlink" title="本地分支操作"></a>本地分支操作</h3><p>为防止互相干扰，提高协同开发得体验，建议每个开发者都基于分支进行项目功能的开发</p><h4 id="master分支"><a href="#master分支" class="headerlink" title="master分支"></a>master分支</h4><p>在初始化Git仓库时，Git默认已经创建了一个名字叫做master的分支，通常把这个master分支叫做主分支</p><p>在实际工作中，master主分支的作用是：<strong>用来保存和记录整个项目已完成的功能代码</strong></p><p>因此不允许程序员直接在master分支上修改代码</p><h4 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h4><p>专门用来开发新功能的分支，临时从master主分支上分叉出来的，当新功能开发且测试完毕后，最终需要合并到master分支上</p><h4 id="star2-命令行操作"><a href="#star2-命令行操作" class="headerlink" title=":star2:命令行操作"></a>:star2:命令行操作</h4><h5 id="1-查看分支列表"><a href="#1-查看分支列表" class="headerlink" title="1 查看分支列表"></a>1 查看分支列表</h5><blockquote><p>git branch</p></blockquote><p>运行结果中，分支前面有 * 号 ，表示当前所处的分支</p><h5 id="2-创建新分支"><a href="#2-创建新分支" class="headerlink" title="2 创建新分支"></a>2 创建新分支</h5><p>基于当前分支，创建一个新的分支</p><blockquote><p>git branch 分支名称</p></blockquote><h5 id="3-切换分支"><a href="#3-切换分支" class="headerlink" title="3 切换分支"></a>3 切换分支</h5><p>可切换到指定的分支上进行开发</p><blockquote><p>git checkout 分支名称</p></blockquote><h5 id="4-分支的快捷创建和切换"><a href="#4-分支的快捷创建和切换" class="headerlink" title="4 分支的快捷创建和切换"></a>4 分支的快捷创建和切换</h5><blockquote><p>git checkout -b 分支名称</p></blockquote><p>-b 代表创建一个新的分支</p><p>checkout表示切换到刚才新建的分支上</p><p>相当于是 创建分支和切换分支两条命令的简写形式</p><h5 id="5-合并分支"><a href="#5-合并分支" class="headerlink" title="5 合并分支"></a>5 合并分支</h5><p>切换到主分支master上</p><blockquote><p>git checkout master</p></blockquote><p>在master分支上运行 git merge 命令，将 分支的代码合并到 master 分支</p><blockquote><p>git merge 分支名称</p></blockquote><h5 id="6-删除分支"><a href="#6-删除分支" class="headerlink" title="6 删除分支"></a>6 删除分支</h5><p>注意：待删除分支不能是当前所处分支</p><blockquote><p>git branch -d 分支名称</p></blockquote><p>当遇到无法删除时，可以强制删除</p><blockquote><p>git branch -D 分支名称</p></blockquote><h5 id="7-遇到冲突时的分支合并"><a href="#7-遇到冲突时的分支合并" class="headerlink" title="7 遇到冲突时的分支合并"></a>7 遇到冲突时的分支合并</h5><p>在两个不同的分支中，对同一个文件进行不同的修改，Git就没办法合并他们，此时需要打开这些包含了冲突的文件，然后手动解决冲突</p><p>手动解决完冲突后，再执行以下命令</p><blockquote><p>git add .</p><p>git commit -m “解决了分支合并冲突的问题”</p></blockquote><h3 id="star2-远程分支操作"><a href="#star2-远程分支操作" class="headerlink" title=":star2:远程分支操作"></a>:star2:远程分支操作</h3><h4 id="1-将本地分支推送到远程仓库"><a href="#1-将本地分支推送到远程仓库" class="headerlink" title="1 将本地分支推送到远程仓库"></a>1 将本地分支推送到远程仓库</h4><p>若是第一次推送分支需要 带-u 的参数，此后可以直接使用 git push 推送到 远程分支</p><blockquote><p>git push -u 远程仓库的别名 本地分支名称：远程分支名称</p></blockquote><p>如：</p><blockquote><p>git push -u origin payment:pay</p></blockquote><p>若希望远程分支名称和本地分支名称保持一致，可以不写冒号后面的重命名</p><blockquote><p>git push -u origin payment</p></blockquote><h4 id="2-跟踪分支"><a href="#2-跟踪分支" class="headerlink" title="2 跟踪分支"></a>2 跟踪分支</h4><p>即从远程仓库中，把远程分支下载到本地仓库中</p><blockquote><p>git checkout 远程分支名称</p></blockquote><p>如：</p><blockquote><p>git checkout pay</p></blockquote><p>从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地仓库分支进行重命名</p><blockquote><p>git checkout -b 本地分支名称 远程仓库名称/远程分支名称</p></blockquote><p>如：</p><blockquote><p>git checkout -b payment origin/pay</p></blockquote><h4 id="3-拉取远程分支的最新代码"><a href="#3-拉取远程分支的最新代码" class="headerlink" title="3 拉取远程分支的最新代码"></a>3 拉取远程分支的最新代码</h4><p>在远程分支编辑的代码，可以下载到本地对应的分支中</p><blockquote><p>git pull </p></blockquote><h4 id="4-删除远程分支"><a href="#4-删除远程分支" class="headerlink" title="4 删除远程分支"></a>4 删除远程分支</h4><blockquote><p>git push 远程仓库名称 –delete 远程分支名称</p></blockquote><p>如：</p><blockquote><p>git push origin –delete pay</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>06-工具</category>
      
      <category>版本控制</category>
      
      <category>git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git基础</title>
    <link href="/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/Git%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/Git%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h2><h3 id="什么是Git？"><a href="#什么是Git？" class="headerlink" title="什么是Git？"></a>什么是Git？</h3><ul><li>Git是一个开源的分布式版本控制系统，是目前世界上最先进、最流行的版本控制系统。可以快速高效的处理从很小到非常大的项目版本管理</li><li>Git快照是在原有文件版本的基础上重新生成一份新的文件，类似于备份。为了效率，若文件没有修改，Git不再重新存储该文件，而是保存一个链接指向之前存储的文件</li><li>在Git中绝大多数的操作都是只需要访问本地文件和资源，一般不需要来自网络上其他计算机的信息<ul><li>断网后依旧可以在本地对项目进行版本管理</li><li>联网后，把本地修改的记录同步到云端服务器即可</li></ul></li></ul><p>传统的版本控制系统是基于差异的版本控制，存储的是一组基本文件和每个文件随事件逐步累积的差异（例如：SVN）</p><h4 id="Git的三个区域"><a href="#Git的三个区域" class="headerlink" title="Git的三个区域"></a>Git的三个区域</h4><ul><li>工作区</li><li>暂存区：已完成的工作的临时存放区域，等待被提交</li><li>Git仓库区：最终的存放区域</li></ul><h4 id="Git的三种状态"><a href="#Git的三种状态" class="headerlink" title="Git的三种状态"></a>Git的三种状态</h4><ul><li><p>已修改modified</p><p>即 工作取得文件被修改了，但还没有放到暂存区</p></li><li><p>已暂存staged</p><p>即 若文件已修改并放入暂存区</p></li><li><p>已提交committed</p><p>即 若Git仓库中保存着特定版本的文件</p></li></ul><h3 id="Git的安装与配置"><a href="#Git的安装与配置" class="headerlink" title="Git的安装与配置"></a>Git的安装与配置</h3><ol><li><h4 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h4></li></ol><p>安装完Git后，第一件事情就是设置用户名和邮件地址</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;ypp&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;paopao0108@outlook.com&quot;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>若使用了 –global 选项 那么该命令只需要运行一次，即可永久生效</p><p>查看对Git的全局性配置，如下：</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06 前后端交互/image-20220521104448906.png" alt="image-20220521104448906" style="zoom:50%;" /><ol start="2"><li><h4 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h4></li></ol><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 查看所有全局配置项</span><br>git <span class="hljs-built_in">config</span> --list --global<br><br><span class="hljs-comment"># 查看指定的全局配置项</span><br>git <span class="hljs-built_in">config</span> user.name<br>git <span class="hljs-built_in">config</span> user.email<br></code></pre></td></tr></table></figure><ol start="3"><li><h4 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h4></li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"># 要想打开 git config 命令的帮助手册<br>git help config<br><br># 获取git config 命令的快速参考<br>git config -h<br></code></pre></td></tr></table></figure><h3 id="Git的基本操作"><a href="#Git的基本操作" class="headerlink" title="Git的基本操作"></a>Git的基本操作</h3><h4 id="获取Git仓库的方式"><a href="#获取Git仓库的方式" class="headerlink" title="获取Git仓库的方式"></a>获取Git仓库的方式</h4><ul><li>将尚未进行版本控制的本地目录转换为Git仓库</li><li>从其他服务其克隆一个已存在的Git仓库</li></ul><h4 id="工作区文件的4种状态"><a href="#工作区文件的4种状态" class="headerlink" title="工作区文件的4种状态"></a>工作区文件的4种状态</h4><ul><li><p>Untracked 未跟踪（只有这种状态是未被Git管理，以下三种状态都是 已被Git管理）</p></li><li><p>Unmodified 未修改</p><p>工作区内容和Git仓库中文件内容一致</p></li><li><p>Modified 已修改</p><p>工作区文件内容和Git仓库中文件内容不一致</p></li><li><p>Staged 已暂存</p><p>工作区中被修改的文件已被放到暂存区，准备将修改后的文件保存到Git仓库中</p></li></ul><p>Git操作的最终结果：让工作区的文件都处于“未修改”的状态</p><h4 id="Git关键字解释"><a href="#Git关键字解释" class="headerlink" title="Git关键字解释"></a>Git关键字解释</h4><p><code>HEAD</code> 当前版本的指针，当切换本地版本的时候会快速指向指定版本文件</p><p><code>master</code> git为我们创建主分支</p><p><code>origin</code> 远程仓库的名称</p><h4 id="star2-基本操作及命令"><a href="#star2-基本操作及命令" class="headerlink" title=":star2:基本操作及命令"></a>:star2:基本操作及命令</h4><h5 id="1-初始化仓库"><a href="#1-初始化仓库" class="headerlink" title="1 初始化仓库"></a>1 初始化仓库</h5><blockquote><p>git init</p></blockquote><h5 id="2-检查文件的状态"><a href="#2-检查文件的状态" class="headerlink" title="2 检查文件的状态"></a>2 检查文件的状态</h5><blockquote><p># 详细的方式显示文件状态</p><p>git status</p><p># 以精简的方式显示文件状态</p><p>git status -s<br>git status –short</p></blockquote><p>-s 是 –short 的缩写</p><h5 id="3-跟踪新文件"><a href="#3-跟踪新文件" class="headerlink" title="3 跟踪新文件"></a>3 跟踪新文件</h5><p>使用 git add <strong>开始跟踪</strong>一个文件，所以要跟踪index.html文件，运行如下命令：git add index.html</p><blockquote><p>git add index.html</p></blockquote><h5 id="4-提交更新"><a href="#4-提交更新" class="headerlink" title="4 提交更新"></a>4 提交更新</h5><p>现在暂存区有一个index.html文件<strong>等待被提交到Git仓库</strong>中进行保存，可以执行git commit 命令进行提交，其中-m选项后面是本次提交消息，用来对提交内容做进一步的描述</p><blockquote><p>git commit -m “新建了index.html文件”</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>提交成功后，可以用git status 再次检查文件的状态，若没有任何文件需要被提交，则证明工作区中所有的文件都处于“未修改”的状态。</p><h5 id="5-对已提交的文件进行修改"><a href="#5-对已提交的文件进行修改" class="headerlink" title="5 对已提交的文件进行修改"></a>5 对已提交的文件进行修改</h5><p>目前index.html文件已经被Git跟踪，并且工作区和Git仓库中的index.html文件内容保持一致。当我们修改工作区的中的index.html的内容后，会出现changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。</p><h5 id="6-暂存已修改的文件"><a href="#6-暂存已修改的文件" class="headerlink" title="6 暂存已修改的文件"></a>6 暂存已修改的文件</h5><p>index.html被修改后，若要暂存这次修改，需要再次运行 git add 命令，这条命令主要有3个功能：</p><ul><li>跟踪新文件</li><li>把 已跟踪、且已修改 的文件放到暂存区</li><li>把有冲突的文件标记为 已解决状态</li></ul><h5 id="7-提交已暂存的文件"><a href="#7-提交已暂存的文件" class="headerlink" title="7 提交已暂存的文件"></a>7 提交已暂存的文件</h5><p>再次运行 git commit -m “提交消息”</p><blockquote><p>git commit -m “修改了index.html的内容”</p></blockquote><h5 id="8-撤销对文件的修改"><a href="#8-撤销对文件的修改" class="headerlink" title="8 撤销对文件的修改"></a>8 撤销对文件的修改</h5><p>即 将工作区中对应文件的修改 还原为 Git仓库中所保存的版本。</p><p>操作的结果：所有的修改会丢失，且无法恢复，危险性比较高</p><p>撤销操作的本质：用Git仓库中保存的文件，覆盖工作区中指定的文件</p><h5 id="9-向暂存区一次性添加多个文件"><a href="#9-向暂存区一次性添加多个文件" class="headerlink" title="9 向暂存区一次性添加多个文件"></a>9 向暂存区一次性添加多个文件</h5><p>若需要被暂存的文件个数比较多，可以使用如下的命令，一次性将所有的新增和修改过的文件加入暂存区</p><blockquote><p>git add .</p></blockquote><h5 id="10-取消暂存文件"><a href="#10-取消暂存文件" class="headerlink" title="10 取消暂存文件"></a>10 取消暂存文件</h5><p>若需要从暂存区中移除对应的文件，可使用：</p><blockquote><p>git reset HEAD 要移除的文件</p></blockquote><h5 id="11-跳过使用暂存区域"><a href="#11-跳过使用暂存区域" class="headerlink" title="11 跳过使用暂存区域"></a>11 跳过使用暂存区域</h5><p>Git标准工作流程是： 工作区 → 暂存区 → Git仓库</p><p>为简化工作流程，可以指直接将工作区中修改的提交到Git仓库，这时候Git工作的流程简化为： 工作区 → Git仓库，跳过了 git add 步骤</p><blockquote><p>git commit -a -m “提交消息”</p></blockquote><h5 id="12-移除文件"><a href="#12-移除文件" class="headerlink" title="12 移除文件"></a>12 移除文件</h5><p>从Git中移除文件的方式有两种：</p><ul><li><p>从Git仓库和工作区中同时移除对应的文件</p><blockquote><p>git rm -f index.js</p></blockquote></li><li><p>只从Git仓库中移除指定的文件，但保留工作区中对应的文件</p><blockquote><p>git rm –cached index.css</p></blockquote></li></ul><h5 id="13-忽略文件"><a href="#13-忽略文件" class="headerlink" title="13 忽略文件"></a>13 忽略文件</h5><p>有些文件无需纳入Git的管理，不希望他们出现在未跟踪的文件列表。</p><p>这种情况下，可以创建一个名为 .gitignore 的配置文件，列出要忽略的文件的匹配模式</p><p>文件 .gitignore 的格式如下：</p><ul><li>以 # 开头的是注释</li><li>以 / 结尾的是目录</li><li>以 / 开头防止递归</li></ul><p>glob模式</p><p>即简化了的正则表达式：</p><ul><li>星号* 匹配<strong>零个或多</strong>个<strong>任意</strong>字符</li><li>[abc] 匹配<strong>任何一个</strong>列在<strong>方括号中</strong>的字符</li><li>问号？ 只匹配<strong>一个任意</strong>字符</li><li>[0-9] 短划线分割的两个字符，表示所有在这两个字符范围内的都可以匹配</li><li>两个星号** 表示匹配任意中间目录 （如： a/**/z 可以匹配 a/z a/b/z a/b/c/z）</li></ul><p>.gitignore文件的例子</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 忽略所有的 .a 文件</span><br>*<span class="hljs-string">.a</span><br><br><span class="hljs-comment"># 跟踪所有的lib.a文件(即便在前面忽略了.a文件)</span><br>!lib.a<br><br><span class="hljs-comment"># 只忽略当前目录下的TODO文件,而不忽略 subdir/TODO</span><br><span class="hljs-string">/TODO</span><br><br><span class="hljs-comment"># 忽略任何目录下名为 build 的文件夹</span><br>build/<br><br><span class="hljs-comment"># 忽略 doc/notes.txt 但不忽略 doc/server/arch.txt</span><br>doc/*<span class="hljs-string">.txt</span><br><br><span class="hljs-comment"># 忽略doc/ 目录及其所有子目录下的 .pdf 文件</span><br>doc/**/*<span class="hljs-string">.pdf</span><br><br></code></pre></td></tr></table></figure><h5 id="14-查看提交历史"><a href="#14-查看提交历史" class="headerlink" title="14 查看提交历史"></a>14 查看提交历史</h5><ul><li><p>按时间先后顺序列出所有提交历史,最近提交排在最上面</p><blockquote><p>git log</p></blockquote></li><li><p>只展示最新的两条提交历史,数字可以按需进行填写</p><blockquote><p>git log -2</p></blockquote></li><li><p>在一行上展示最近提交历史的信息</p><blockquote><p>git log -2 –pretty=online</p></blockquote></li><li><p>在一行上展示最近两条提交历史的信息,并自定义输出的格式</p><p>%h 提交的简写哈希值,%an作者名字, %ar作者修订日期,按多久以前的方式显示, %s提交说明</p><blockquote><p>git log -2 –pretty=format:”%h | %an | %ar | %s”</p></blockquote><p>其中 | 为自定义的分隔符,可以换成别的字符</p></li></ul><h5 id="15-回退到指定的版本"><a href="#15-回退到指定的版本" class="headerlink" title="15 回退到指定的版本"></a>15 回退到指定的版本</h5><ul><li><p>使用 git reset –hard 命令,根据指定的提交 ID 回退到指定版本</p><blockquote><p>git reset –hard <CommitID></p></blockquote><p>根据git log 查看提交历史,可以查看到版本的ID,再利用上面的命令即可回退到指定版本</p></li><li><p>在旧版本中使用 git reflog –pretty=oneline 命令,查看命令操作的历史</p><blockquote><p>git reflog –pretty=oneline</p></blockquote><p>如果切换到了旧版本,只能用上面这条命令来查看所有的操作历史</p></li><li><p>再次根据最新的提交 ID, 跳转到最新的版本</p><blockquote><p>git reset –hard <CommitID></p></blockquote></li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git status</td><td>详细的方式显示文件状态</td></tr><tr><td>git status -s 或 git status –short</td><td>以精简的方式显示文件状态，-s是–short的缩写</td></tr><tr><td>git add index.html</td><td>开始跟踪文件 index.html; 把已跟踪、且已修改的文件放到暂存区</td></tr><tr><td>git add .</td><td>一次性将所有的新增和修改过的文件加入暂存区</td></tr><tr><td>git commit -m “提交消息”</td><td>将暂存区的文件提交</td></tr><tr><td>git commit -a -m “提交消息”</td><td>直接将工作区中修改的提交到Git仓库，跳过了暂存区</td></tr><tr><td>git reset HEAD 要移除的文件</td><td>从暂存区中移除对应的文件</td></tr><tr><td>git rm -f index.js</td><td>从Git仓库和工作区中同时移除对应的文件</td></tr><tr><td>git rm –cached index.css</td><td>只从Git仓库中移除指定的文件，但保留工作区中对应的文件</td></tr><tr><td>git log</td><td>查看提交历史,最近提交排在最上面</td></tr><tr><td>git log -2</td><td>只展示最新的两条提交历史</td></tr><tr><td>git log -2 –pretty=online</td><td>在一行上展示最近提交历史的信息</td></tr><tr><td>git log -2 –pretty=format:”%h | %an | %ar | %s”</td><td>在一行上展示最近两条提交历史的信息,并自定义输出的格式</td></tr><tr><td>git reset –hard <CommitID></td><td>根据指定的提交 ID 回退到指定版本</td></tr><tr><td>git reflog –pretty=oneline</td><td>在旧版本中,查看命令操作的历史</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>06-工具</category>
      
      <category>版本控制</category>
      
      <category>git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue-router</title>
    <link href="/2022/11/25/04-VUE/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/vue-router/"/>
    <url>/2022/11/25/04-VUE/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/vue-router/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>04-VUE</category>
      
      <category>常用插件</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vscode 笔记</title>
    <link href="/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/vscode/vscode%20%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/11/25/06-%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/vscode/vscode%20%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h1 id="VScode的基本使用"><a href="#VScode的基本使用" class="headerlink" title="VScode的基本使用"></a>VScode的基本使用</h1><ul><li>放大缩小视图：ctrl + 或者ctrl -</li><li>向上复制一行：alt+shift+$\uparrow$</li><li>向下复制一行：alt+shift+$\downarrow$</li><li>当光标点击到某一行时，默认选中全行，可以直接进行复制剪切</li></ul><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="keybingds"><a href="#keybingds" class="headerlink" title="keybingds"></a>keybingds</h2><h2 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h2><h1 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h1><h1 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h1><ol><li>折叠代码可通过代码实现（手动折叠总是会自动展开）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">//#region<br>// 中间的内容将会被折叠<br>//endregion<br></code></pre></td></tr></table></figure><ol start="2"><li>TODO</li><li>debug</li></ol>]]></content>
    
    
    <categories>
      
      <category>06-工具</category>
      
      <category>编辑工具</category>
      
      <category>vscode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JS基础</title>
    <link href="/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/JS%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/11/25/03-JS/JS%E8%AF%AD%E6%B3%95/JS%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 用户输入姓名，并存入变量myname中</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> myname = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入您的名字&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">// 输出这个姓名</span></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(myname)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h2><ul><li><p>由字母、数字、下划线、美元符号($)组成。</p></li><li><p>严格区分<strong>大小写</strong></p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字、保留字。如：var(关键字)、for、while</p></li><li><p>变量名必须有意义。</p></li><li><p>遵守<strong>骆驼命名法</strong>。首字母小写，后面单词的首字母需要大写。如：myFirstName</p></li></ul><p><strong>注意: name 尽量不直接使用name作为变量名</strong> </p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>JavaScript 中共有 6 种基本数据类型</p><blockquote><p>Undefined、Null、Boolean、Number、String、Symbol (new in ES 6) </p><p><strong>基本数据类型的值是按值访问的</strong></p></blockquote><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p>一个声明后没有被赋值的变量会有一个默认值undefined</p><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p>一个声明变量给null值,里面存的值为空</p><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>统称为 Object 类型。具体有：</p><blockquote><p>Object 类型、Array 类型、Date 类型、RegExp 类型、Function 类型 等</p><p>null属于特殊引用类型</p><p><strong>引用类型的值是按引用访问的</strong></p></blockquote><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p><strong>1 new Array()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 利用new Array() 创建新数组</span><br>    <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> arr);<br><br></code></pre></td></tr></table></figure><p><strong>2 字面量创建</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 利用字面量创建空数组</span><br><span class="hljs-keyword">var</span> arr1 = [];<br><span class="hljs-comment">// 利用字面量声明创建带有初始值的数组</span><br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-literal">false</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1);<br></code></pre></td></tr></table></figure><h4 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h4><p>数组中可以存放任意类型的数据，（字符串、数字、布尔）</p><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><ul><li><p>slice(): </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">  <br></code></pre></td></tr></table></figure></li><li><p>length()</p><p>获取数组长度</p></li></ul><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><h3 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h3><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><h2 id="类型语法"><a href="#类型语法" class="headerlink" title="类型语法"></a>类型语法</h2><h3 id="类型转换语法"><a href="#类型转换语法" class="headerlink" title="类型转换语法"></a>类型转换语法</h3><ul><li>转换为字符串类型</li><li>转换为数字型</li><li>转换为布尔型</li></ul><h4 id="转换为字符串型"><a href="#转换为字符串型" class="headerlink" title="转换为字符串型"></a>转换为字符串型</h4><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>.toString()</td><td>转成字符串</td></tr><tr><td>String(变量)</td><td>转成字符串</td></tr><tr><td>加号拼接字符串</td><td>和字符串凭借的结果都是字符串</td></tr></tbody></table><ul><li>toString()和String()使用方式不一样</li><li>加号拼接字符串也称为隐式转换</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 变量.toString()</span><br><span class="hljs-keyword">var</span> str = num.<span class="hljs-title function_">toString</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> str);<br><span class="hljs-comment">// String(变量)</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(num));<br><span class="hljs-comment">// 利用 + ，拼接字符串的方法实现转换效果</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num + <span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="转换为数字型"><a href="#转换为数字型" class="headerlink" title="转换为数字型"></a>转换为数字型</h4><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>parseInt(string)</td><td>将string转换成整数数值型</td></tr><tr><td>parseFloat(string)</td><td>将string类型转成浮点数值型</td></tr><tr><td>Number()</td><td>将string类型转换为数值型</td></tr><tr><td>js隐式转换(- * /)</td><td>利用算术运算隐式转换为数值型</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 1 利用parseInt 和 parseFloat 将字符串转化为数字</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;3.14&#x27;</span>));          <span class="hljs-comment">// 3</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;3.91&#x27;</span>));          <span class="hljs-comment">// 3</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;120px&#x27;</span>));         <span class="hljs-comment">//120</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;qwe120px&#x27;</span>));      <span class="hljs-comment">// NaN</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;3.14&#x27;</span>));        <span class="hljs-comment">// 3.14</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;3.91&#x27;</span>));        <span class="hljs-comment">// 3.91</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;120px&#x27;</span>));       <span class="hljs-comment">// 120</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;qwe120px&#x27;</span>));    <span class="hljs-comment">// NaN</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 2 利用Number转化为数字</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;3&#x27;</span>));       <span class="hljs-comment">// 3</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;3.14&#x27;</span>));    <span class="hljs-comment">// 3.14</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 3 隐式转换:利用算数运算 - * /</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;12&#x27;</span> - <span class="hljs-number">0</span>);          <span class="hljs-comment">// 120</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;123&#x27;</span> - <span class="hljs-string">&#x27;120&#x27;</span>)      <span class="hljs-comment">// 3</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;123&#x27;</span> * <span class="hljs-number">1</span>);         <span class="hljs-comment">// 123</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h4><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>Boolean()</td><td>其他类型转成布尔值</td></tr></tbody></table><ul><li>代表空 否定的值会被转换为false 如: 0 null undefined NaN</li><li>其余值都转成true</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 以下均为false</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">null</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">undefined</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-number">0</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-title class_">NaN</span>));</span><br><span class="language-javascript">    <span class="hljs-comment">// 以下均为true</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&#x27;pink&#x27;</span>))</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&#x27;0&#x27;</span>))</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-number">2</span>));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="类型检测语法"><a href="#类型检测语法" class="headerlink" title="类型检测语法"></a>类型检测语法</h3><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><h2 id="分配"><a href="#分配" class="headerlink" title="分配"></a>分配</h2><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="条件选择"><a href="#条件选择" class="headerlink" title="条件选择"></a>条件选择</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if..else"></a>if..else</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">if (条件表达式) &#123;<br>// 条件成立执行语句<br>&#125;<br></code></pre></td></tr></table></figure><p>if-else语句</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">if (条件表达式) &#123;<br>// 执行语句1<br>&#125; else &#123;<br>// 执行语句2<br>&#125;<br></code></pre></td></tr></table></figure><p>if-else if 语句</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">if (条件表达式1) &#123;<br>// 执行语句1<br>&#125; else if (条件表达式2) &#123;<br>// 执行语句2<br>&#125; else if (条件表达式3) &#123;<br>// 执行语句3<br>&#125; else [<br>// 执行语句4<br>]<br></code></pre></td></tr></table></figure><h4 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h4><p>表达式1 ？ 表达式2 : 表达式3;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> result = num == <span class="hljs-number">11</span> ? <span class="hljs-string">&#x27;yes&#x27;</span> : <span class="hljs-string">&#x27;no&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">switch</span> (表达式) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">value1</span>:<br>        <span class="hljs-comment">// 表达式 等于 value1时要执行的代码</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">value2</span>:<br>        <span class="hljs-comment">// 表达式 等于 value2时要执行的代码</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">value3</span>:<br>        <span class="hljs-comment">// 表达式 等于 value2时要执行的代码</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-attr">default</span>:<br>        <span class="hljs-comment">// 表达式不等于任何一个value时执行的语句</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><h3 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h3><h3 id="forEach-ES6"><a href="#forEach-ES6" class="headerlink" title="forEach(ES6)"></a>forEach(ES6)</h3><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><h3 id="命名函数"><a href="#命名函数" class="headerlink" title="命名函数"></a>命名函数</h3><p>利用函数关键字自定义函数</p><p>注意：</p><ul><li>function是声明函数的关键字，必须小写</li><li>由于函数一般是为了实现某个功能才定义的，故通常将函数名命名为动词</li><li>调用函数时，不要忘记添加小括号</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数定义</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSum</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-comment">// 调用函数，并在控制台输出</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getSum</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>利用函数表达式定义函数 <code>var 变量名 = function () &#123; &#125;</code></p><p>注意：</p><ul><li>func是变量名，不是函数名（因此第二种中方法声明函数，是没有函数名的）</li><li>函数表达式声明方式更声明变量差不多（变量里面存的是值，函数表达式里面存的是函数）</li><li>函数表达式可以进行传递参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> func = <span class="hljs-keyword">function</span> (<span class="hljs-params">arg</span>) &#123;<br><br>&#125;<br><span class="hljs-title function_">func</span>();<br></code></pre></td></tr></table></figure><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><blockquote><p>当不确定有多少个参数传递的时候，可以用<code>arguments</code>来获取。</p><p>在JS中arguments实际上是当前函数的一个内置对象，所有函数都内置了一个arguments对象，arguments对象中存储了传递的所有实参</p></blockquote><p><strong>arguments展示形式是一个伪数组</strong>，因此可以进行遍历，具有以下特点：</p><ul><li>具有<strong>length属性</strong></li><li>按<strong>索引</strong>方式储存数据</li><li><strong>不</strong>具有数据的push、pop等方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);<span class="hljs-comment">// 存储了所有传递过来的实参</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>);<span class="hljs-comment">// 3</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>]);<span class="hljs-comment">// 1</span><br>    &#125;<br><br>    <span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><p>return</p><ul><li>return 后面的代码不会被执行</li><li>return返回多个值，如：return a, b; 只会返回最后一个值b</li><li>若希望return返回多个值，可以利用数组，将需要返回的值放在数组中，再将数组返回</li><li>若一个函数没有renturn，则其返回值是undefined</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>筛选数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 将数组[2, 0, 6, 1, 77, 0, 52, 0, 25, 7] 中大于等于10的元素选出来，放入新数组</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> newArr = [];<br><br><span class="hljs-comment">// 方法1</span><br><span class="hljs-comment">/* var j = 0;</span><br><span class="hljs-comment">        for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="hljs-comment">            if (arr[i] &gt;= 10) &#123;</span><br><span class="hljs-comment">                newArr[j] = arr[i];</span><br><span class="hljs-comment">                j++;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        console.log(newArr); */</span><br><br><span class="hljs-comment">// 方法2 利用length的自增性质</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (arr[i] &gt;= <span class="hljs-number">10</span>) &#123;<br>        newArr[newArr.<span class="hljs-property">length</span>] = arr[i];<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br></code></pre></td></tr></table></figure><ol><li><p>求任意个数中的最大值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getMax</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> max = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (max &lt; <span class="hljs-variable language_">arguments</span>[i]) &#123;</span><br><span class="language-javascript">                max = <span class="hljs-variable language_">arguments</span>[i];</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> max;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getMax</span>(<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">23</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getMax</span>(<span class="hljs-number">34</span>, <span class="hljs-number">56</span>, <span class="hljs-number">0</span>, <span class="hljs-number">999</span>, <span class="hljs-number">234</span>));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>翻转任意数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">arr</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> newArr = [];</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;</span><br><span class="language-javascript">            newArr[newArr.<span class="hljs-property">length</span>] = arr[i];</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> newArr;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr2 = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>];</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">reverse</span>(arr1));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">reverse</span>(arr2));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>利用函数冒泡排序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sort</span>(<span class="hljs-params">arr</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; arr.<span class="hljs-property">length</span> - i - <span class="hljs-number">1</span>; j++) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> temp = arr[j];</span><br><span class="language-javascript">                    arr[j] = arr[j + <span class="hljs-number">1</span>];</span><br><span class="language-javascript">                    arr[j + <span class="hljs-number">1</span>] = temp;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> arr;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr1 = <span class="hljs-title function_">sort</span>([<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">23</span>, <span class="hljs-number">11</span>, <span class="hljs-number">99</span>, <span class="hljs-number">34</span>]);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>利用函数判断闰年</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isLeapyear</span>(<span class="hljs-params">year</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isLeapyear</span>(<span class="hljs-number">2000</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isLeapyear</span>(<span class="hljs-number">2004</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isLeapyear</span>(<span class="hljs-number">2003</span>));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>判断输入年份2月份的天数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">days</span>(<span class="hljs-params">year</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isLeapyear</span>(year)) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;当年2月份有29天&#x27;</span>);</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;当年2月份有28天&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isLeapyear</span>(<span class="hljs-params">year</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">days</span>(<span class="hljs-number">2000</span>);<span class="hljs-comment">// 当年2月份有29天</span></span><br><span class="language-javascript">    <span class="hljs-title function_">days</span>(<span class="hljs-number">1999</span>);<span class="hljs-comment">// 当年2月份有28天</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>JS语法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS单位</title>
    <link href="/2022/11/24/02-CSS/CSS/CSS%E5%8D%95%E4%BD%8D/"/>
    <url>/2022/11/24/02-CSS/CSS/CSS%E5%8D%95%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="像素单位"><a href="#像素单位" class="headerlink" title="像素单位"></a>像素单位</h1><h2 id="px"><a href="#px" class="headerlink" title="px"></a>px</h2><h1 id="相对单位"><a href="#相对单位" class="headerlink" title="相对单位"></a>相对单位</h1><h2 id="rem-em"><a href="#rem-em" class="headerlink" title="rem/em"></a>rem/em</h2><h2 id="百分比单位"><a href="#百分比单位" class="headerlink" title="百分比单位"></a>百分比单位</h2><h1 id="视口单位"><a href="#视口单位" class="headerlink" title="视口单位"></a>视口单位</h1><h2 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw/vh"></a>vw/vh</h2><p>在视口单位中的“视口”，PC端指的是浏览器的可视区域；移动端指的就是Viewport中的布局视口（Layout Viewport）</p><p>根据CSS3规范，视口单位主要包括以下4个：</p><ul><li>vw：1vw等于视口宽度的1%。</li><li>vh：1vh等于视口高度的1%。</li><li>vmin：选取vw和vh中最小的那个。</li><li>vmax：选取vw和vh中最大的那个。</li></ul><p> vh and vw：相对于视口的高度和宽度，1vh 等于1/100的视口高度，1vw 等于1/100的视口宽度</p><p><img src="https://www.likecs.com/default/index/img?u=aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTQyNDM1OS8yMDE5MTAvMTQyNDM1OS0yMDE5MTAwOTExMDIyNzY2OS0xMTgwOTM0ODcwLnBuZw==" alt="CSS中的自适应单位vw、vh、vmin、vmax"></p><p>vmax相对于视口的宽度或高度中较大的那个。其中最大的那个被均分为100单位的vmax。</p><p>vmin相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的vmin。</p>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>俄罗斯方块</title>
    <link href="/2022/11/21/10-%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/"/>
    <url>/2022/11/21/10-%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="俄罗斯方块"><a href="#俄罗斯方块" class="headerlink" title="俄罗斯方块"></a>俄罗斯方块</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>vue中在js中动态生成的元素，样式无法通过less提前指定？</li></ol><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><blockquote><p>Math.random() * 10 - 5;</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//生成随机运动方向(-5 ~ 5)</span><br><span class="hljs-keyword">var</span> h = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">10</span> - <span class="hljs-number">5</span>;<br><span class="hljs-keyword">var</span> l = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">10</span> - <span class="hljs-number">5</span>;<br>minblock.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = minblock.<span class="hljs-property">offsetLeft</span> + l + <span class="hljs-string">&#x27;px&#x27;</span>;<br>minblock.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = minblock.<span class="hljs-property">offsetTop</span> + h + <span class="hljs-string">&#x27;px&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>10-项目笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>生成迷宫</title>
    <link href="/2022/11/13/09-%E7%AE%97%E6%B3%95/%E7%94%9F%E6%88%90%E8%BF%B7%E5%AE%AB/"/>
    <url>/2022/11/13/09-%E7%AE%97%E6%B3%95/%E7%94%9F%E6%88%90%E8%BF%B7%E5%AE%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="生成迷宫-prim算法"><a href="#生成迷宫-prim算法" class="headerlink" title="生成迷宫-prim算法"></a>生成迷宫-prim算法</h2><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>说明：</p><ol><li>将墙和路都处理为网格，边框也当作墙</li><li>将作为墙的那些网格规定为墙点，把作为路的网格规定为路点</li><li>每一个路点四周都有墙点，因此每个迷宫地图行和列必为奇数，假设一行路点有 <code>x</code> 个，那么墙点就有 <code>2*x+1</code> 个，一列路点有 <code>y</code> 个，那么墙点就有 <code>2*y+1</code> 个</li></ol><p>算法思想：</p><ol><li>初始化<ol><li>将整个地图初始化为墙</li><li>随机选择一个路点，将其变为路，并将四周的路点加入待选路点</li></ol></li><li>当待选路点列表不为空时，循环：<ol><li>从待选路点中随机选择一个路点A</li><li>将A与它四周的随机一个已经变为路的路点B打通（将A变为路，将A与B之间的墙点变为路）</li><li>将A四周不是路的路点加入待选路点（已经加入待选路点的除外）</li><li>从待选路点中移除A</li></ol></li></ol><h2 id="利用canvas用于判断角色移动"><a href="#利用canvas用于判断角色移动" class="headerlink" title="利用canvas用于判断角色移动"></a>利用canvas用于判断角色移动</h2><p>说明：</p><ol><li>当迷宫是以图片的形式给出，可以利用canvas将图片放置到相应位置，迷宫路径和迷宫中的墙是不同颜色，可以利用canvas获取整个迷宫图片的数据，每个位置的数据都是以rgba的形式存储，根据数据的不同来判断角色是否可以移动</li></ol>]]></content>
    
    
    <categories>
      
      <category>09-算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>逆序数</title>
    <link href="/2022/11/13/09-%E7%AE%97%E6%B3%95/%E9%80%86%E5%BA%8F%E6%95%B0/"/>
    <url>/2022/11/13/09-%E7%AE%97%E6%B3%95/%E9%80%86%E5%BA%8F%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="逆序数"><a href="#逆序数" class="headerlink" title="逆序数"></a>逆序数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 计算逆序数对;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">InversePairs</span> = data =&gt; &#123;<br>  <span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// write code here</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeSort</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>    <span class="hljs-keyword">var</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(arr.<span class="hljs-property">length</span> / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">var</span> left_arr = arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, mid),<br>      right_arr = arr.<span class="hljs-title function_">slice</span>(mid);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(<span class="hljs-title function_">mergeSort</span>(left_arr), <span class="hljs-title function_">mergeSort</span>(right_arr));<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 方法2:采用归并排序，假设有顺序数组 A 和 B ，A 在 B 的前面。</span><br><span class="hljs-comment">   * 那么如果有A的第i个数字比B的第j个数字大，则有i后面的数字都</span><br><span class="hljs-comment">   * 比B的第j个数字大，可以组成A.length-i个逆序对。</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">left, right</span>) &#123;<br>    <span class="hljs-keyword">var</span> result = [];<br>    <span class="hljs-keyword">while</span> (left.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; right.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (left[<span class="hljs-number">0</span>] &lt; right[<span class="hljs-number">0</span>]) &#123;<br>        result.<span class="hljs-title function_">push</span>(left.<span class="hljs-title function_">shift</span>());<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        num += left.<span class="hljs-property">length</span>;<br>        result.<span class="hljs-title function_">push</span>(right.<span class="hljs-title function_">shift</span>());<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">/* 当左右数组长度不等.将比较完后剩下的数组项链接起来即可 */</span><br>    <span class="hljs-keyword">return</span> result.<span class="hljs-title function_">concat</span>(left).<span class="hljs-title function_">concat</span>(right);<br>  &#125;<br>  <span class="hljs-title function_">mergeSort</span>(data);<br>  <span class="hljs-comment">// return num % 1000000007;</span><br>  <span class="hljs-keyword">return</span> num;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>09-算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>模块化</title>
    <link href="/2022/11/10/03-JS/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <url>/2022/11/10/03-JS/%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="export-module-default"><a href="#export-module-default" class="headerlink" title="export module default"></a>export module default</h1><p>参考网址：<a href="https://www.jianshu.com/p/28be9dcfc6ff">https://www.jianshu.com/p/28be9dcfc6ff</a></p><h2 id="模块规范"><a href="#模块规范" class="headerlink" title="模块规范"></a>模块规范</h2><p>JS模块化编程分了两种规范：CommonJS模块规范和ES6模块规范。</p><ul><li>CommonJS模块规范 —— CommonJS规范中，以module.exports导出接口，以require引入模块</li><li>ES6模块规范 —— ES6标准规范中，以export指令导出接口，以import引入模块</li></ul><p>在Node.js编程中，Node模块系统遵循的是CommonJS规范</p><h3 id="CommonJS模块规范"><a href="#CommonJS模块规范" class="headerlink" title="CommonJS模块规范"></a>CommonJS模块规范</h3><p>CommonJS规范规定: </p><ul><li>每个js文件就是一个模块，有自己的作用域</li><li>每个模块内部，module 变量代表当前模块。</li><li>在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见</li><li>如果要暴露给其他程序，需要以module.exports导出接口，以require引入模块</li><li>module 变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口。</li><li>加载某个模块，其实是加载该模块的 module.exports 属性。require() 方法用于加载模块。</li></ul><h4 id="module-export-与-export"><a href="#module-export-与-export" class="headerlink" title="module.export 与 export"></a>module.export 与 export</h4><blockquote><p>Node支持的导出</p><p>模块导出的时候，导出的是module.exports，不是exports<br>module.exports可以导出所有的类型。对象，函数，字符串、数值等</p><p>require() 模块时，得到的永远是 module.exports 指向的对象</p></blockquote><ul><li>每一个js文件通过node执行时，都自动创建一个module变量和一个exports变量。<br>module变量代表当前模块。这个变量是一个对象，同时，module对象会创建一个叫exports的属性（即module.exports），该属性初始化的值是 {}，是对外的接口。加载某个模块，其实是加载该模块的module.exports属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// test01.js</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">module</span>);<br></code></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Module &#123;  <br><span class="hljs-function">  id: &#x27;.&#x27;,</span><br><span class="hljs-function">  <span class="hljs-title">path</span>: &#x27;<span class="hljs-title">G</span>:\\学习\\前端\\02 编程\\08 复习\\<span class="hljs-title">export_study</span>&#x27;,</span><br><span class="hljs-function">  <span class="hljs-title">exports</span>: &#123;&#125;,</span><br><span class="hljs-function">  <span class="hljs-title">filename</span>: &#x27;<span class="hljs-title">G</span>:\\学习\\前端\\02 编程\\08 复习\\<span class="hljs-title">export_study</span>\\<span class="hljs-title">test01.js</span>&#x27;  <span class="hljs-title">loaded</span>: <span class="hljs-title">false</span>,</span><br><span class="hljs-function">  <span class="hljs-title">children</span>: [],</span><br><span class="hljs-function">  <span class="hljs-title">paths</span>: [</span><br><span class="hljs-function">    &#x27;<span class="hljs-title">G</span>:\\学习\\前端\\02 编程\\08 复习\\<span class="hljs-title">node_modules</span>&#x27;,</span><br><span class="hljs-function">    &#x27;<span class="hljs-title">G</span>:\\学习\\前端\\02 编程\\<span class="hljs-title">node_modules</span>&#x27;,</span><br><span class="hljs-function">    &#x27;<span class="hljs-title">G</span>:\\学习\\前端\\<span class="hljs-title">node_modules</span>&#x27;,</span><br><span class="hljs-function">    &#x27;<span class="hljs-title">G</span>:\\学习\\<span class="hljs-title">node_modules</span>&#x27;,</span><br><span class="hljs-function">    &#x27;<span class="hljs-title">G</span>:\\<span class="hljs-title">node_modules</span>&#x27;</span><br><span class="hljs-function">  ]</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p>默认exports变量是对module.exports的引用，即exports和module.exports指向同一个内存块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-built_in">exports</span> = <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>;<br></code></pre></td></tr></table></figure></li><li><p>当通过exports去改变内存块里内容时，module.exports的值也会改变</p><p>当通过module.exports去改变内存块里内容时，exports的值也会改变</p><p>当module.exports被改变的时候，exports不会被改变</p><p>当exports被改变的时候，module.exports不会被改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">a</span> = <span class="hljs-number">100</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;log1: &#x27;</span> + <span class="hljs-built_in">exports</span>.<span class="hljs-property">a</span>); <span class="hljs-comment">// log1: 100</span><br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">a</span> = <span class="hljs-number">200</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;log2: &#x27;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">a</span>); <span class="hljs-comment">// log2: 200</span><br><br><span class="hljs-comment">// 当module.exports被改变的时候，exports不会被改变</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;log3: &#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-built_in">exports</span>)); <span class="hljs-comment">// log3: &#123;&quot;a&quot;:200&#125;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;log1: &#x27;</span> + <span class="hljs-built_in">exports</span>.<span class="hljs-property">a</span>); <span class="hljs-comment">// log1: 200 还是原来的</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;log2: &#x27;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">a</span>); <span class="hljs-comment">// log2: undefined 相当于重写了module.export,已经与export断开连接，不存在a了</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;log4: &#x27;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>); <span class="hljs-comment">// log4: hello</span><br></code></pre></td></tr></table></figure></li><li><p>对比使用require时，取的是module.exports里面的值 还是 exports里面的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// test02.js</span><br><span class="hljs-comment">// require时对比下两种方式x的值到底取哪个</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">20</span><br>&#125;;<br><br><span class="hljs-built_in">exports</span> = &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">10</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// test02_require.js</span><br><span class="hljs-keyword">const</span> x = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./test02.js&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// &#123; x: 20 &#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="require"><a href="#require" class="headerlink" title="require"></a>require</h4><p>使用强大的 require() 方法，可以加载需要的<strong>内置模块、用户自定义模块、第三方模块</strong>进行使用</p><p>require方法接受以下几种参数的传递：</p><ul><li>原生模块，如http、fs、path等</li><li>相对路径的文件模块，如./mod或../mod</li><li>绝对路径的文件模块，如 /pathtomodule/mod</li><li>第三方模块，如koa等</li></ul><p>require是运行时的，参数可以为表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> value = <span class="hljs-number">2</span><br><span class="hljs-keyword">const</span> demo2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./module_export&quot;</span> + <span class="hljs-string">&quot;_demo&quot;</span> + value)<br></code></pre></td></tr></table></figure><p>require()加载模块</p><ol><li>require()加载模块顺序: 按照其在代码中出现的顺序</li><li>require()加载模块是: 同步的，只有加载完成，才能执行后面的操作</li><li>require()加载的模块是: 被输出的值的拷贝，不会受到模块内容变化影响</li><li>模块第一次被加载时会执行一次，后续被加载时不会再执行，都是从缓存中获取的</li></ol><h3 id="ES6模块规范"><a href="#ES6模块规范" class="headerlink" title="ES6模块规范"></a>ES6模块规范</h3><p>ES6模块规范:</p><ul><li>在创建JS模块时，export 语句用于从模块中导出函数、对象或原始值，以便其他程序可以通过 import 语句使用它们</li></ul><h4 id="export-与-export-default"><a href="#export-与-export-default" class="headerlink" title="export 与 export default"></a>export 与 export default</h4><ul><li>export与export default均可用于导出常量、函数、文件、模块等</li><li>通过export方式导出，在**导入时要加{ }**，export default则不需要</li><li>在一个文件中，export可以有多个，<strong>export default仅有一个</strong></li><li>大部分风格建议，模块中最好在末尾用一个export导出所有的接口</li></ul><p>当使用 <code>export default</code> 导出时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">export</span> &#123; a <span class="hljs-keyword">as</span> <span class="hljs-keyword">default</span> &#125;;<br></code></pre></td></tr></table></figure><p>导入时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入时 a 可以为任意规范的文件名</span><br><span class="hljs-keyword">import</span> a <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test.js&quot;</span>;<br><br><span class="hljs-comment">// 下面这种方法需要加 &#123;&#125;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> xxx &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test.js&#x27;</span><br></code></pre></td></tr></table></figure><p>混合导入导出(同时有 export和export default)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 04_export_defalut.js 导出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fn2&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入</span><br><span class="hljs-keyword">import</span> xxx, &#123; b &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./04_export_defalut.js&#x27;</span>;<br><span class="hljs-title function_">xxx</span>();<span class="hljs-comment">// fn2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);  <span class="hljs-comment">// 20</span><br><br><span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> api <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./04_export_defalut.js&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;api&#x27;</span>, api); <span class="hljs-comment">// api &#123; default: [Function: fn2], b: 20 &#125;</span><br>api.<span class="hljs-title function_">default</span>();<span class="hljs-comment">// fn2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(api.<span class="hljs-property">b</span>); <span class="hljs-comment">// 20</span><br></code></pre></td></tr></table></figure><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><p>require是赋值过程，import是解构过程</p><ul><li>import是编译时的, 必须放在文件开头，否则会报错</li><li>import后面跟上花括号的形式是最基本的用法，花括号里面的变量与export后面的变量一一对应。</li><li>支持给变量取别名</li></ul><h2 id="node为何支持export-import"><a href="#node为何支持export-import" class="headerlink" title="node为何支持export / import"></a>node为何支持export / import</h2><p>在node中使用<code>babel</code>支持ES6，仅仅是将ES6转码为ES5再执行，import语法会被转码为require</p><p>因此，在使用module.exports模块导出时，在引入模块时使用import仍然起效，因为本质上，import会被转码为require去执行</p><p>(没有安装babel以及配置，无法在node中使用import 参考 ：</p><p><a href="https://juejin.cn/post/6844904017764548622">https://juejin.cn/post/6844904017764548622</a> </p><p><a href="http://www.ruanyifeng.com/blog/2016/01/babel.html">http://www.ruanyifeng.com/blog/2016/01/babel.html</a>)</p><h3 id="在node环境中支持ES6代码"><a href="#在node环境中支持ES6代码" class="headerlink" title="在node环境中支持ES6代码"></a>在node环境中支持ES6代码</h3><p>在node中使用babel支持ES6</p><ol><li>安装babel-cli</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 安装<br>npm install --save-dev babel-cli<br></code></pre></td></tr></table></figure><ol start="2"><li><p>在package.json文件中scripts添加 <code>&quot;script-name&quot;: &quot;babel-node script.js&quot;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;script-name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;babel-node script.js&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>新建 .babelrc 文件，用于 用来设置转码规则和插件</p><p>文件内容格式如下，presets字段用于设定转码规则，</p><p>plugins 告诉babel需要用哪些插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [],<br>  <span class="hljs-string">&quot;plugins&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><p>安装 <code>npm install babel-preset-es2015 --save</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [<br>    <span class="hljs-string">&quot;es2015&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;plugins&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用babel-node 命令</p><p>babel-node命令是babel-cli工具自带的一个命令，随babel-cli一起安装，它支持Node的REPL环境的所有功能，而且可以直接运行ES6代码</p><p>测试babal-node命令： </p><ol><li><p>直接运行</p><p>在命令行输入 <code>babel-node filename.js</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">.\node_modules\.bin\babel-node .\<span class="hljs-number">06</span>_test_import.js<br></code></pre></td></tr></table></figure><p>可正常运行带有import的文件</p></li><li><p>将其转码结果写入一个文件，<code>--out-file</code> 或 <code>-o</code> 参数指定输出文件</p><p>在命令行输入 <code>babel filename.js -o compiled.js</code> compiled.js为指定的输入文件名</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">.\node_modules\.bin\babel .\<span class="hljs-number">06</span>_test_import.js -o compiled.js<br></code></pre></td></tr></table></figure><p>执行结果为，compiled.js将原文件的import转为了require等操作</p></li><li><p>上一步操作是单文件转码，若要整个目录转码</p><p>3.1 需要在package.json文件scripts中添加 <code>&quot;build&quot;: &quot;babel src -d lib&quot;</code></p><ul><li>src是需要转码的目录名</li><li>lib是转码后的目录名</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;babel src -d lib&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>3.2 再再命令行中输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm run build<br></code></pre></td></tr></table></figure><p>会将src里面的所有文件都转码</p></li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>module.exports / exports: 只有 Node 支持的导出</li><li>require: Node 和 ES6 都支持的引入</li><li>export / import : 只有 ES6 支持的导出引入</li></ul><h2 id="不同引用方式的区别及其操作"><a href="#不同引用方式的区别及其操作" class="headerlink" title="不同引用方式的区别及其操作"></a>不同引用方式的区别及其操作</h2><h3 id="通过script引入"><a href="#通过script引入" class="headerlink" title="通过script引入"></a>通过script引入</h3><p>在html中通过 script 标签引入的文件（如 echarts.min.js），是全局的对象，可以通过 window.echarts 获取</p><h3 id="通过require导入"><a href="#通过require导入" class="headerlink" title="通过require导入"></a>通过require导入</h3><h3 id="通过import导入"><a href="#通过import导入" class="headerlink" title="通过import导入"></a>通过import导入</h3>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数组</title>
    <link href="/2022/11/10/03-JS/JS%E8%AF%AD%E6%B3%95/%E6%95%B0%E7%BB%84/"/>
    <url>/2022/11/10/03-JS/JS%E8%AF%AD%E6%B3%95/%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><h3 id="升序"><a href="#升序" class="headerlink" title="升序"></a>升序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> points = [<span class="hljs-number">40</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">25</span>,<span class="hljs-number">10</span>];<br>points.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<span class="hljs-keyword">return</span> a-b&#125;); <span class="hljs-comment">// 1,5,10,25,40,100</span><br></code></pre></td></tr></table></figure><h3 id="降序"><a href="#降序" class="headerlink" title="降序"></a>降序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> points = [<span class="hljs-number">40</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">25</span>,<span class="hljs-number">10</span>];<br>points.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<span class="hljs-keyword">return</span> b-a&#125;);<br></code></pre></td></tr></table></figure><h3 id="乱序"><a href="#乱序" class="headerlink" title="乱序"></a>乱序</h3><h4 id="1-利用sort（巧妙）"><a href="#1-利用sort（巧妙）" class="headerlink" title="1 利用sort（巧妙）"></a>1 利用sort（巧妙）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">blockArr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-number">0.5</span> - <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sort-blockArr&#x27;</span>, blockArr);<br></code></pre></td></tr></table></figure><ul><li>Math.random() 返回 [0, 1) 之间的小数</li><li>0.5 - Math.random() 返回 [-0.5, 0.5) 之间的数字，即可能为正，可能为负数</li><li>利用sort函数的原理，</li></ul><h4 id="2-手写函数"><a href="#2-手写函数" class="headerlink" title="2 手写函数"></a>2 手写函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 打乱数组中的顺序</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">shuffle</span>(<span class="hljs-params">blockArr</span>) &#123;<br>  <span class="hljs-keyword">let</span> oldLength = blocksNumber;<br>  <span class="hljs-keyword">let</span> newArr = [];<br>  <span class="hljs-keyword">while</span> (oldLength--) &#123;<br>    <span class="hljs-keyword">let</span> randomIndex = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * oldLength);<br>    newArr.<span class="hljs-title function_">push</span>(blockArr[randomIndex]);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br>    blockArr.<span class="hljs-title function_">splice</span>(randomIndex, <span class="hljs-number">1</span>); <span class="hljs-comment">// 移除已经添加到新数组的元素</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> newArr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><h2 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a>数组合并</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><br>arr1.<span class="hljs-title function_">push</span>(arr2)<span class="hljs-comment">// 结果为[1, 2, 3, [4, 5, 6]]</span><br><span class="hljs-keyword">const</span> newArr = [...arr1, ...arr2]<span class="hljs-comment">// 结果为 [1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure><p><code>...</code>可以将数组每一项展开</p>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>JS语法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS显示与隐藏</title>
    <link href="/2022/11/09/02-CSS/CSS/CSS%E6%98%BE%E7%A4%BA%E4%B8%8E%E9%9A%90%E8%97%8F/"/>
    <url>/2022/11/09/02-CSS/CSS/CSS%E6%98%BE%E7%A4%BA%E4%B8%8E%E9%9A%90%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h1><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p>规定元素应该生成的框的类型。</p><p>display属性用于设置一个元素应如何显示</p><ul><li>display: none; 隐藏对象</li><li>display: block; 除了转换为块级元素之外，同时还有显示元素的意思</li></ul><p><strong>display隐藏元素后，不再占有原来的位置</strong>，HTML元素（对象）的宽度、高度等各种属性值都将“丢失”。</p><h2 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h2><p>将透明度设置为0，仅仅是看不见而已，还是占位置的。审查元素的时候还是可以找的到的。</p><p>visibility属性用于指定一个元素应可见还是隐藏</p><ul><li>visibility: visible; 元素可视</li><li>visibility: hidden; 元素隐藏</li></ul><p><strong>visibility隐藏元素后，继续占用原来的位置</strong></p><h2 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h2><p>设置一个元素的透明度级别。<br>将DOM元素设置为隐藏，但是该隐藏仅仅是看不见而已，还是占位置的，也即是说它仍具有高度、宽度等属性值</p><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><ul><li>overflow: hidden; 溢出部分隐藏</li><li>overflow: scroll; 溢出部分自动显示滚动条，不溢出也会显示滚动条</li><li>overflow: auto; 溢出的时候才显示滚动条</li><li>overflow: visible; 不剪切内容也不添加滚动条</li></ul><p>有定位的盒子，需要慎用overflow：hidden；因为它会隐藏溢出部分</p><h2 id="异同"><a href="#异同" class="headerlink" title="异同"></a>异同</h2><p>株连性</p><p>display: none,虽然被隐藏的子元素也会一起隐藏,并且当子元素设置display:block属性时并无效果。<br>opacity:0也是一样的。当父级已经设置opacity:0后，子元素是基于父元素的opacity:0基础上的opacity值。无论子元素设置opacity为多大时均无效果。<br>visibility:hidden就不一样了,我们将visibility的子元素设置为visibility:visibile时仍会起效果。</p><p>关于事件</p><ul><li>display:none属性使该元素无法再触发事件。</li><li>visibility:hidden也无法触发事件。</li><li>opacity: 0仍然可以触发事件。</li></ul>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS样式获取</title>
    <link href="/2022/11/07/02-CSS/CSS/CSS%E6%A0%B7%E5%BC%8F%E8%8E%B7%E5%8F%96/"/>
    <url>/2022/11/07/02-CSS/CSS/CSS%E6%A0%B7%E5%BC%8F%E8%8E%B7%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS样式获取"><a href="#CSS样式获取" class="headerlink" title="CSS样式获取"></a>CSS样式获取</h1><p>CSS的行内样式，在js中无法获取，但可以在js中修改</p><p>CSS行内样式在js中window.getComputedStyle(bird).getPropertyValue(‘top’)需要通过以下方式获取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getComputedStyle</span>(bird).<span class="hljs-title function_">getPropertyValue</span>(<span class="hljs-string">&#x27;top&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>column瀑布流布局</title>
    <link href="/2022/11/06/02-CSS/CSS/%E5%B8%83%E5%B1%80/column%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/"/>
    <url>/2022/11/06/02-CSS/CSS/%E5%B8%83%E5%B1%80/column%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="column瀑布流布局"><a href="#column瀑布流布局" class="headerlink" title="column瀑布流布局"></a>column瀑布流布局</h1>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>布局</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常见模块</title>
    <link href="/2022/11/03/03-JS/NodeJS/%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9D%97/%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9D%97/"/>
    <url>/2022/11/03/03-JS/NodeJS/%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9D%97/%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="时间处理模块"><a href="#时间处理模块" class="headerlink" title="时间处理模块"></a>时间处理模块</h1><h2 id="momentjs"><a href="#momentjs" class="headerlink" title="momentjs"></a>momentjs</h2><h2 id="dayjs"><a href="#dayjs" class="headerlink" title="dayjs"></a>dayjs</h2><h1 id="算法插件"><a href="#算法插件" class="headerlink" title="算法插件"></a>算法插件</h1><h2 id="Power-Set插件"><a href="#Power-Set插件" class="headerlink" title="Power Set插件"></a>Power Set插件</h2><h1 id="效果模块"><a href="#效果模块" class="headerlink" title="效果模块"></a>效果模块</h1><h2 id="轮播图插件"><a href="#轮播图插件" class="headerlink" title="轮播图插件"></a>轮播图插件</h2><p>glidejs：</p><p>从CDN引入：<a href="https://cdnjs.cloudflare.com/ajax/libs/Glide.js/3.6.0/glide.min.js">https://cdnjs.cloudflare.com/ajax/libs/Glide.js/3.6.0/glide.min.js</a></p><p>可引入js、css文件等</p><p>插件用法参考：<a href="https://glidejs.com/">https://glidejs.com</a></p><p>使用</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glide&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glide__track&quot;</span> <span class="hljs-attr">data-glide-el</span>=<span class="hljs-string">&quot;track&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glide__slides&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glide__slide&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glide__slide&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glide__slide&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> portfolioCarousel = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.portfolio-carousel&#x27;</span>);<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Glide</span>(portfolioCarousel, &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;carousel&#x27;</span>,<br>  <span class="hljs-attr">gap</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// A size of the space between slides</span><br>  <span class="hljs-attr">startAt</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// Start at specific slide number</span><br>  <span class="hljs-attr">perView</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 播放时可以看到的数量，一般情况下都是1 A number of visible slides</span><br>  <span class="hljs-attr">autoplay</span>: <span class="hljs-number">2000</span>, <span class="hljs-comment">// Change slides after a specified interval,此处时1s后播放下一张</span><br>  <span class="hljs-attr">hoverpause</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 悬停：鼠标移上去，会停止动画</span><br>  <span class="hljs-attr">animationDuration</span>: <span class="hljs-number">1000</span>, <span class="hljs-comment">// Duration of the animation动画的持续时间</span><br>  <span class="hljs-attr">focusAt</span>: <span class="hljs-string">&#x27;center&#x27;</span><br>&#125;).<span class="hljs-title function_">mount</span>();<br></code></pre></td></tr></table></figure><h3 id="breakpoints"><a href="#breakpoints" class="headerlink" title="breakpoints"></a>breakpoints</h3><p>Collection of options applied at specified media breakpoints. For example, display two slides per view under 800px:</p><p>在800px以下时，展示的轮播图slide有两项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">breakpoints</span>: &#123;<br>    <span class="hljs-number">800</span>: &#123;<br>        <span class="hljs-attr">perview</span>: <span class="hljs-number">2</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Glide</span>(portfolioCarousel, &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;carousel&#x27;</span>,<br>  <span class="hljs-attr">gap</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// A size of the space between slides</span><br>  <span class="hljs-attr">startAt</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// Start at specific slide number</span><br>  <span class="hljs-attr">perView</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 播放时可以看到的数量，一般情况下都是1 A number of visible slides</span><br>  <span class="hljs-attr">autoplay</span>: <span class="hljs-number">2000</span>, <span class="hljs-comment">// Change slides after a specified interval,此处时1s后播放下一张</span><br>  <span class="hljs-attr">hoverpause</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 悬停：鼠标移上去，会停止动画</span><br>  <span class="hljs-attr">animationDuration</span>: <span class="hljs-number">1000</span>, <span class="hljs-comment">// Duration of the animation动画的持续时间</span><br>  <span class="hljs-attr">breakpoints</span>: &#123;<br>    <span class="hljs-number">800</span>: &#123;<br>     <span class="hljs-attr">perview</span>: <span class="hljs-number">2</span><br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">mount</span>();<br></code></pre></td></tr></table></figure><h3 id="peek"><a href="#peek" class="headerlink" title="peek"></a>peek</h3><p>The distance value of the <strong>next</strong> and <strong>previous</strong> viewports which have to peek in the current view. Accepts number and pixels as a string. Left and right peeking can be setup separately with a directions object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">peek</span>: &#123;<br>    <span class="hljs-attr">before</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">after</span>: <span class="hljs-number">200</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Lodash"><a href="#Lodash" class="headerlink" title="Lodash"></a>Lodash</h1><p>深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;cloneDeep&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>NodeJS</category>
      
      <category>常见模块</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>flex布局</title>
    <link href="/2022/11/01/02-CSS/CSS/%E5%B8%83%E5%B1%80/flex%E5%B8%83%E5%B1%80/"/>
    <url>/2022/11/01/02-CSS/CSS/%E5%B8%83%E5%B1%80/flex%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1><p>采用flex布局后，宽度失效</p><h2 id="传统布局-Vs-flex布局"><a href="#传统布局-Vs-flex布局" class="headerlink" title="传统布局 Vs flex布局"></a>传统布局 Vs flex布局</h2><p>传统布局</p><ul><li>兼容性好</li><li>布局繁琐</li><li>局限性，不能再移动端很好的布局</li></ul><p>flex 弹性布局</p><ul><li>操作方便，布局极为简单，移动端应用很广泛</li><li>PC 端浏览器支持情况较差</li><li>IE 11或更低版本，不支持或仅部分支持</li></ul><p>建议： </p><ol><li>如果是PC端页面布局，我们还是传统布局。 </li><li>如果是移动端或者<strong>不考虑兼容性</strong>问题的PC端页面布局，我们还是使用flex弹性布局</li></ol><h2 id="布局原理"><a href="#布局原理" class="headerlink" title="布局原理"></a>布局原理</h2><h3 id="flex初体验"><a href="#flex初体验" class="headerlink" title="flex初体验"></a>flex初体验</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例效果：无需给宽度，直接平均分配</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01-3 移动web开发/image-20220910103632843.png" alt="image-20220910103632843" style="zoom:25%;" /><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。 </li></ol><ul><li>当我们为父盒子设为 flex 布局以后，<strong>子元素的 float、clear 和 vertical-align 属性将失效</strong></li><li>伸缩布局 = 弹性布局 = 伸缩盒布局 = 弹性盒布局 =flex布局</li></ul><ol start="2"><li>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</li></ol><ul><li>体验中 div 就是 flex父容器。</li><li>体验中 span 就是 子容器 flex项目</li><li>子容器可以<strong>横向</strong>排列也可以<strong>纵向</strong>排列</li></ul><h2 id="flex布局父项常见属性"><a href="#flex布局父项常见属性" class="headerlink" title="flex布局父项常见属性"></a>flex布局父项常见属性</h2><p>以下由6个属性是对父元素设置的</p><ul><li>flex-direction：设置主轴的方向</li><li>justify-content：设置主轴上的子元素排列方式</li><li>flex-wrap：设置子元素是否换行</li><li>align-content：设置侧轴上的子元素的排列方式（多行）</li><li>align-items：设置侧轴上的子元素排列方式（单行）</li><li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li></ul><h3 id="1-主轴方向flex-direction"><a href="#1-主轴方向flex-direction" class="headerlink" title="1 主轴方向flex-direction"></a>1 主轴方向flex-direction</h3><h4 id="主轴与侧轴"><a href="#主轴与侧轴" class="headerlink" title="主轴与侧轴"></a>主轴与侧轴</h4><p>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和y 轴</p><ul><li><p>默认主轴方向就是 x 轴方向，水平向右</p></li><li><p>默认侧轴方向就是 y 轴方向，水平向下</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01-3 移动web开发/image-20220910100611751.png" alt="image-20220910100611751" style="zoom:50%;" /></li></ul><h4 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h4><p>flex-direction 属性决定主轴的方向（即项目的排列方向） 注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>row</td><td>默认值从左到右</td></tr><tr><td>row-reverse</td><td>从右到左</td></tr><tr><td>column</td><td>默认从上到下</td></tr><tr><td>column-reverse</td><td>从下到上</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    <span class="hljs-comment">/* 设置主轴方向为 从上到下 */</span></span><br><span class="language-css">    <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例效果</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01-3 移动web开发/image-20220910103605658.png" alt="image-20220910103605658" style="zoom:25%;" /><h3 id="2-主轴子元素排列justify-content"><a href="#2-主轴子元素排列justify-content" class="headerlink" title="2 主轴子元素排列justify-content"></a>2 主轴子元素排列justify-content</h3><p>justify-content 属性定义了项目在主轴上的对齐方式 </p><blockquote><p>注意： 使用这个属性之前一定要确定好主轴是哪个</p></blockquote><p>属性值 说明 flex-start 默认值 从头部开始 如果主轴是x轴，则从左到右 flex-end 从尾部开始排列 center 在主轴居中对齐（如果主轴是x轴则 水平居中） space-around 平分剩余空间 space-between 先两边贴边 再平分剩余空间（重要）</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值 从头部开始 如果主轴是x轴，则从左到右</td></tr><tr><td>flex-end</td><td>从尾部开始排列</td></tr><tr><td>center</td><td>在主轴居中对齐（如果主轴是x轴则 水平居中）</td></tr><tr><td>space-around</td><td>（左右边距一样）</td></tr><tr><td><strong>space-between</strong></td><td>先两边贴边 再平分剩余空间（重要)</td></tr><tr><td>space-evenly</td><td>将剩余空间平分</td></tr></tbody></table><p>注意区别：（主轴排列方式都为 从上到下时）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex-direction</span>: column;<br></code></pre></td></tr></table></figure><ol><li><p>space-around</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">justify-content</span>: space-around;<br></code></pre></td></tr></table></figure></li></ol><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01-3 移动web开发/image-20220910102536540.png" alt="image-20220910102536540" style="zoom:25%;" /><ol start="2"><li><p>space-evenly</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">justify-content</span>: space-evenly;<br></code></pre></td></tr></table></figure></li></ol><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01-3 移动web开发/image-20220910102652739.png" alt="image-20220910102652739" style="zoom:25%;" /><ol start="3"><li><p>space-between</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">justify-content</span>: space-between;<br></code></pre></td></tr></table></figure></li></ol><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01-3 移动web开发/image-20220910102920660.png" alt="image-20220910102920660" style="zoom:25%;" /><h3 id="3-子元素是否换行flex-wrap"><a href="#3-子元素是否换行flex-wrap" class="headerlink" title="3 子元素是否换行flex-wrap"></a>3 子元素是否换行flex-wrap</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>nowrap</td><td>默认值 不换行</td></tr><tr><td>wrap</td><td>换行</td></tr></tbody></table><p>示例：（不换行时）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例效果（默认不换行）</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01-3 移动web开发/image-20220910104049076.png" alt="image-20220910104049076" style="zoom:25%;" /><p>示例（换行时）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    <span class="hljs-comment">/* 设置是否换行 */</span></span><br><span class="language-css">    <span class="hljs-attribute">flex-wrap</span>: wrap;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例效果：</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01-3 移动web开发/image-20220910104218254.png" alt="image-20220910104218254" style="zoom:25%;" /><h3 id="4-侧轴子元素排列（单行）align-items"><a href="#4-侧轴子元素排列（单行）align-items" class="headerlink" title="4 侧轴子元素排列（单行）align-items"></a>4 侧轴子元素排列（单行）align-items</h3><p>该属性是控制子项在侧轴（默认是y轴）上的排列方式 在子项为单项（单行）的时候使用</p><p>当侧轴为y轴时：</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值 从头部开始 如果侧轴是x轴，则从上到下</td></tr><tr><td>flex-end</td><td>从下到上</td></tr><tr><td>center</td><td>（挤在一起居中）在侧轴居中对齐（如果侧轴是y轴则 垂直居中）</td></tr><tr><td>stretch</td><td>拉伸（默认值）</td></tr></tbody></table><h3 id="5-侧轴子元素排列（多行）align-content"><a href="#5-侧轴子元素排列（多行）align-content" class="headerlink" title="5 侧轴子元素排列（多行）align-content"></a>5 侧轴子元素排列（多行）align-content</h3><p>设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值 在侧轴的头部开始</td></tr><tr><td>flex-end</td><td>从在侧轴的尾部开始排列</td></tr><tr><td>center</td><td>在侧轴居中对齐</td></tr><tr><td>space-around</td><td>子项在侧轴平分剩余空间</td></tr><tr><td><strong>space-between</strong></td><td>子项在侧轴先分布在两头 再平分剩余空间</td></tr><tr><td>stretch</td><td>设置子项元素高度平分父元素高度</td></tr></tbody></table><h3 id="6-区别align-content和align-items"><a href="#6-区别align-content和align-items" class="headerlink" title="6 区别align-content和align-items"></a>6 区别align-content和align-items</h3><ul><li>align-items 适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸</li><li>align-content 适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、 下对齐、居中、拉伸以及平均分配剩余空间等属性值。</li><li>总结就是单行找 align-items 多行找 align-content</li></ul><h3 id="7-复合属性flex-flow"><a href="#7-复合属性flex-flow" class="headerlink" title="7 复合属性flex-flow"></a>7 复合属性flex-flow</h3><p>flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex-flow</span>:row wrap;<br></code></pre></td></tr></table></figure><h2 id="flex布局子项常见属性"><a href="#flex布局子项常见属性" class="headerlink" title="flex布局子项常见属性"></a>flex布局子项常见属性</h2><ul><li>flex 子项目占的份数</li><li>align-self 控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序（前后顺序）</li></ul><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大</p><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">flex-shrink</span>: &lt;number&gt;; <span class="hljs-comment">/* default 1 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p>负值对该属性无效。</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小.</p><p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间</p><h3 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h3><p>flex 属性定义子项目分配剩余空间，用flex来表示占多少份数</p><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选</p><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)</p><h3 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h3><p>控制子项自己在侧轴上的排列方式，允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。 默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><h3 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h3><p>数值越小，排列越靠前，默认为0。 注意：和 z-index 不一样。</p><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f00</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 开启flex布局 */</span></span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-flex;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ff0</span>;</span><br><span class="language-css">             <span class="hljs-comment">/* 设置order属性 */</span></span><br><span class="language-css">            <span class="hljs-attribute">order</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0f0</span>;</span><br><span class="language-css">             <span class="hljs-comment">/* 设置order属性 */</span></span><br><span class="language-css">            <span class="hljs-attribute">order</span>: <span class="hljs-number">2</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box3</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-comment">/*设置order属性*/</span></span><br><span class="language-css">            <span class="hljs-attribute">order</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1 box&quot;</span>&gt;</span>idems1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2 box&quot;</span>&gt;</span>idems2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3 box&quot;</span>&gt;</span>idens3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221101153042672.png" alt="image-20221101153042672" style="zoom:50%;" /><h2 id="携程首页案例"><a href="#携程首页案例" class="headerlink" title="携程首页案例"></a>携程首页案例</h2><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li><p>固定定位相关事项：</p><ul><li><p>固定定位与其父级没有关系，以屏幕为准；</p></li><li><p>若想要固定定位的盒子水平居中，利用定位+transform可以实现；或者不给left值，默认也是水平居中的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br><span class="hljs-comment">/* 兼容性写法 */</span><br>-webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>); <span class="hljs-comment">/* 不考虑兼容性时，可以不写这行 */</span> <br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);<br></code></pre></td></tr></table></figure></li><li><p>有定位的盒子，设置margin就不起效果了</p></li><li><p>有定位的盒子就可以设置宽高了</p></li></ul></li><li><p>在css3中的盒子模型，<code>box-sizing: border-box;</code>,此时需要注意高度height=26px将border边框的宽度也算进来的，如果<code>line-height: 26px</code>, 如下所示，因此，line-height应该设置为除开边框宽度的数值</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/01-3 移动web开发/image-20220711230136946.png" alt="image-20220711230136946" style="zoom:25%;" /></li><li><p>在flex布局中，不会出现外边距合并的问题</p></li><li><p>文字阴影：text-shadow</p></li><li><p>元素父元素和元素本身都可以设置flex布局，不会冲突</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>要让html中的文本内容在网页显示的时候显示不出来：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-indent</span>: -<span class="hljs-number">999px</span>;<br><span class="hljs-attribute">overflow</span>: hidden;<br></code></pre></td></tr></table></figure><p>问题：既然不需要文本显示出来，为什么不直接删除文本？</p><p>原因：为了SU优化（搜索引擎优化）</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>布局</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>H5新增</title>
    <link href="/2022/11/01/01-HTML/HTML5/H5%E6%96%B0%E5%A2%9E/"/>
    <url>/2022/11/01/01-HTML/HTML5/H5%E6%96%B0%E5%A2%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="H5新增标签"><a href="#H5新增标签" class="headerlink" title="H5新增标签"></a>H5新增标签</h1><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><ul><li>&lt;header&gt;头部标签</li><li>&lt;nav&gt;导航标签</li><li>&lt;article&gt;内容标签</li><li>&lt;section&gt;定义文档某个区域</li><li>&lt;aside&gt;侧边栏标签</li><li>&lt;footer&gt;尾部标签</li></ul><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220326103804621.png" alt="image-20220326103804621" style="zoom:50%;" /><p>移动端更喜欢使用这些标签</p><h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h2><h3 id="视频-lt-video-gt"><a href="#视频-lt-video-gt" class="headerlink" title="视频&lt;video&gt;"></a>视频&lt;video&gt;</h3><p>当前&lt;video&gt;元素支持三种视频格式。（尽量使用mp4格式）</p><table><thead><tr><th>浏览器</th><th>MP4</th><th>WebM</th><th>Ogg</th></tr></thead><tbody><tr><td>Internet Explorer</td><td>yes</td><td>no</td><td>no</td></tr><tr><td>Chrome</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>Firefox</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>Safari</td><td>yes</td><td>no</td><td>no</td></tr><tr><td>Opera</td><td>yes</td><td>yes</td><td>yes</td></tr></tbody></table><p><strong>常见属性</strong>如下</p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>autoplay</strong></td><td>autoplay</td><td>视频就绪自动播放（谷歌浏览器需要添加muted来解决自动播放问题）</td></tr><tr><td>controls</td><td>controls</td><td>向用户显示播放控件</td></tr><tr><td><strong>width</strong></td><td>pixels(像素)</td><td>设置播放器宽度</td></tr><tr><td><strong>height</strong></td><td>pixels(像素)</td><td>设置播放器高度</td></tr><tr><td><strong>loop</strong></td><td>loop</td><td>播放完是否继续播放该视频，循环播放</td></tr><tr><td>preload</td><td>auto（预先加载视频）<br/>none (不应加载视频)</td><td>规定是否预加载视频（若有了autoplay，就忽略该属性）</td></tr><tr><td><strong>src</strong></td><td>url</td><td>视频url地址</td></tr><tr><td>poster</td><td>imgurl</td><td>加载等待的画面图片</td></tr><tr><td><strong>muted</strong></td><td>muted</td><td>静音播放</td></tr></tbody></table><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;文件地址&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;controls&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">/* 以下代码会从上至下进行，如果ogg格式可以播放，就以ogg格式播放，否则继续往下执行 */<br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;controls&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;move.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/ogg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;move.mp4&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span><br>    您的浏览器暂不支持<span class="hljs-tag">&lt;<span class="hljs-name">video</span>&gt;</span>标签播放视频<br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="音频-lt-audio-gt"><a href="#音频-lt-audio-gt" class="headerlink" title="音频&lt;audio&gt;"></a>音频&lt;audio&gt;</h3><p>当前audio元素支持三种音频格式</p><table><thead><tr><th>浏览器</th><th>MP3</th><th>Wav</th><th>Ogg</th></tr></thead><tbody><tr><td>Internet Explorer</td><td>yes</td><td>no</td><td>no</td></tr><tr><td>Chrome</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>Firefox</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>Safari</td><td>yes</td><td>yes</td><td>no</td></tr><tr><td>Opera</td><td>yes</td><td>yes</td><td>yes</td></tr></tbody></table><p><strong>常见属性</strong>如下</p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>若出现该属性，则音频在就绪后马上播放</td></tr><tr><td>controls</td><td>controls</td><td>若出现该属性，则向用户显示控件，如播放按钮</td></tr><tr><td>loop</td><td>loop</td><td>若出现该属性，则每当音频结束时重新开始播放</td></tr><tr><td>src</td><td>url</td><td>要播放音频的url</td></tr></tbody></table><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;文件地址&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;controls&quot;</span> <span class="hljs-attr">loop</span>=<span class="hljs-string">&quot;loop&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;controls&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;happy.mp3&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/ogg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;move.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span><br>    您的浏览器暂不支持<span class="hljs-tag">&lt;<span class="hljs-name">video</span>&gt;</span>标签播放视频<br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="多媒体标签总结"><a href="#多媒体标签总结" class="headerlink" title="多媒体标签总结"></a>多媒体标签总结</h3><ul><li>音频标签与视频标签使用方式基本一致</li><li>浏览器支持情况不同</li><li>谷歌浏览器把音频和视频自动播放禁止了</li><li>可以给视频标签添加muted属性来静音播放视频，音频不可以（可以通过JS解决）</li><li>视频标签是重点，经常设置自动播放，不使用controls控件，循环和设置大小属性</li></ul><h2 id="source标签"><a href="#source标签" class="headerlink" title="source标签"></a>source标签</h2><p><code>&lt;source&gt;</code> 标签为媒介元素（比如 picture、video 和 audio）定义媒介资源。</p><p><code>&lt;source&gt;</code> 标签允许您规定可替换的视频/音频文件供浏览器根据它对媒体类型或者编解码器的支持进行选择</p><p>注意：IE 8 或更早版本的 IE 浏览器都不支持 source 标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/ogg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.mp3&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/mpeg&quot;</span>&gt;</span><br>    您的浏览器不支持 audio 元素。<br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实例：在 <code>&lt;picture&gt;</code> 标签中使用 <code>&lt;source&gt;</code> 来设置不同屏幕显示的图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">picture</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;(min-width:650px)&quot;</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;https://static.runoob.com/images/runoob-logo.png&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;(min-width:465px)&quot;</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;https://static.runoob.com/images/code-icon-script.png&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://static.runoob.com/images/mix/hjkg_icon.png&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:auto;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">picture</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h2><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>type=“email”</td><td>限制用户输入必须为email类型</td></tr><tr><td>type=“url”</td><td>限制用户输入必须为url类型</td></tr><tr><td>type=“date”</td><td>限制用户输入必须为日期类型</td></tr><tr><td>type=“time”</td><td>限制用户输入必须为时间类型</td></tr><tr><td>type=“month”</td><td>限制用户输入必须为月类型</td></tr><tr><td>type=“week”</td><td>限制用户输入必须为周类型</td></tr><tr><td>type=“<strong>number</strong>”</td><td>限制用户输入必须为数字类型</td></tr><tr><td>type=“<strong>tel</strong>”</td><td>手机号码</td></tr><tr><td>type=“<strong>search</strong>”</td><td>搜索框</td></tr><tr><td>type=“color”</td><td>生成一个颜色选择表单</td></tr></tbody></table><p>验证时必须添加form表单域，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>邮箱：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>网址：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>日期：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>时间：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>月份：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;month&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>周：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;week&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>数字：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>手机号码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tel&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>搜索框：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>颜色：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;color&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 当点击提交按钮时就可以验证表单了 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="color类型的input"><a href="#color类型的input" class="headerlink" title="color类型的input"></a>color类型的input</h3><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221026205412311.png" alt="image-20221026205412311"> <img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221026205510067.png" alt="image-20221026205510067" style="zoom:50%;" /></p><p>点击input可以进行颜色的选择，<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221026205412311.png" alt="image-20221026205412311">在chrome中是由两个伪类来控制的：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">:</span><span class="hljs-symbol">:-webkit-color-swatch-wrapper</span> 这个是外面的容器<br><span class="hljs-symbol">:</span><span class="hljs-symbol">:-webkit-color-swatch</span> 这个是内部的颜色按钮，改变颜色后会改变<br></code></pre></td></tr></table></figure><p>若要去除外面的边框以及背景颜色，如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&#x27;color&#x27;</span>]</span> &#123;<br>  <span class="hljs-comment">/* 改变按钮和其他控件的外观，使其类似于原生控件 </span><br><span class="hljs-comment">  去除系统默认appearance的样式,常用于IOS下移除原生样式 */</span><br>  -webkit-appearance: none;<br>  -moz-appearance: none;<br>  appearance: none;<br>  <span class="hljs-attribute">background-color</span>: transparent;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">28px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br></code></pre></td></tr></table></figure><p>若要设置内部颜色按钮的样式，如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&#x27;color&#x27;</span>]</span>::-webkit-color-swatch &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-comment">/* 通过阴影设置颜色按钮外的边框(内层白阴影,外层黑阴影) */</span><br>  <span class="hljs-comment">/* box-shadow: h-shadow必需 v-shadow必需 blur spread color inset */</span><br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">#fff</span>, <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">3px</span> <span class="hljs-number">#000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现效果：<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221026211543905.png" alt="image-20221026211543905"></p><h3 id="range类型的input"><a href="#range类型的input" class="headerlink" title="range类型的input"></a>range类型的input</h3><p>用于提供一定范围内数值的输入范围，在网页中显示为滑动条。通过min属性和max属性，可以设置最小值与最大值，通过step属性指定每次滑动的步幅</p><h3 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h3><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>表单拥有此属性表示其内容不能为空，必填</td></tr><tr><td><strong>placeholder</strong></td><td>提示文本</td><td>表单的提示信息，存在默认值将不再显示</td></tr><tr><td>autofocus</td><td>autofocus</td><td>自动聚焦属性，页面加载完成自动聚焦到指定表单</td></tr><tr><td>autocomplete</td><td>off / on</td><td>当用户在字段开始键入时，浏览器基于之前键入过的值，显示除该字段中填写的选项。默认打开on，更改需要放在表单中，<strong>同时加上name属性</strong>，同时成功提交（实际应用中 不太安全，需手动更改为off）</td></tr><tr><td>multiple</td><td>multiple</td><td>可以选择多个文件提交</td></tr></tbody></table><ul><li>拥有required属性后，未输入内容点击提交会提示填写，如下所示：</li></ul><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220326145018120.png" alt="image-20220326145018120" style="zoom:67%;" /><ul><li><p>拥有<strong>placeholder属性</strong>后，会有提示文本，且光标在首位，开始输入内容后，提示文本自动消失</p><p style="color:red">设置placeholder里面文字的颜色：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">::placeholder</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ul><li>autocomplete属性在IE浏览器中默认为on，会显示之前搜索内容，要将其关闭需手动将其改为off</li></ul><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;required&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span> <span class="hljs-attr">autofocus</span>=<span class="hljs-string">&quot;autofocus&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- multiple可选多个文件上传 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="H5新增属性"><a href="#H5新增属性" class="headerlink" title="H5新增属性"></a>H5新增属性</h1><h2 id="media属性"><a href="#media属性" class="headerlink" title="media属性"></a>media属性</h2><h2 id="sizes属性"><a href="#sizes属性" class="headerlink" title="sizes属性"></a>sizes属性</h2><h2 id="src属性"><a href="#src属性" class="headerlink" title="src属性"></a>src属性</h2><h2 id="srcset属性"><a href="#srcset属性" class="headerlink" title="srcset属性"></a>srcset属性</h2><h2 id="type属性"><a href="#type属性" class="headerlink" title="type属性"></a>type属性</h2>]]></content>
    
    
    <categories>
      
      <category>01-HTML</category>
      
      <category>HTML5</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS3动画</title>
    <link href="/2022/10/31/02-CSS/CSS/CSS3%E5%8A%A8%E7%94%BB/"/>
    <url>/2022/10/31/02-CSS/CSS/CSS3%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS3过渡transition"><a href="#CSS3过渡transition" class="headerlink" title="CSS3过渡transition"></a>CSS3过渡transition</h1><p>transition 属性设置元素当过渡效果，四个简写属性为：</p><ul><li>transition-property</li><li>transition-duration(必需)</li><li>transition-timing-function</li><li>transition-delay</li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition</span>: property duration timing-function delay;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">transition-property</td><td align="left">指定CSS属性的name，transition效果</td></tr><tr><td align="left">transition-duration</td><td align="left">transition效果需要指定多少秒或毫秒才能完成</td></tr><tr><td align="left">transition-timing-function</td><td align="left">指定transition效果的转速曲线</td></tr><tr><td align="left">transition-delay</td><td align="left">定义transition效果开始的时候</td></tr></tbody></table><h2 id="转速曲线"><a href="#转速曲线" class="headerlink" title="转速曲线"></a>转速曲线</h2><p>transition-timing-function的可取值有：</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">linear</td><td align="left">规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。</td></tr><tr><td align="left">ease</td><td align="left">规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。</td></tr><tr><td align="left">ease-in</td><td align="left">规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。</td></tr><tr><td align="left">ease-out</td><td align="left">规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。</td></tr><tr><td align="left">ease-in-out</td><td align="left">规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。</td></tr><tr><td align="left">cubic-bezier(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td align="left">在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</td></tr></tbody></table><h1 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h1><p>animation-fill-mode</p><p>属性值有：</p><ul><li>forwards 动画结束后，保持当前位置</li><li>backwards 动画结束后，回到起始位置</li></ul><h2 id="事件animationiteration"><a href="#事件animationiteration" class="headerlink" title="事件animationiteration"></a>事件animationiteration</h2><p>animationiteration 事件在 CSS 动画重新播放时触发</p><p>该事件支持冒泡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;animationiteration&#x27;</span>, <span class="hljs-title function_">callback</span>())<br></code></pre></td></tr></table></figure><p>CSS 动画播放时，会发生以下三个事件：</p><ul><li>animationstart - CSS 动画开始后触发</li><li>animationiteration - CSS 动画重复播放时触发</li><li>animationend - CSS 动画完成后触发</li></ul><h1 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h1><p>在less中可以使用混入来动态改变不同元素的动画传值</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.moveblock</span>(<span class="hljs-variable">@left</span>:<span class="hljs-number">500px</span>, <span class="hljs-variable">@time</span>:<span class="hljs-number">2s</span>) &#123;<br>  <span class="hljs-keyword">@keyframes</span> moveblock &#123;<br>    <span class="hljs-number">0%</span> &#123;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-variable">@left</span>;<br>    &#125;<br>    <span class="hljs-number">100%</span> &#123;<br>      <span class="hljs-attribute">left</span>: -<span class="hljs-number">50px</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-attribute">animation</span>: moveblock <span class="hljs-number">2s</span> <span class="hljs-variable">@time</span> linear infinite;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h1><h2 id="js-如何获取-transform"><a href="#js-如何获取-transform" class="headerlink" title="js 如何获取 transform"></a>js 如何获取 transform</h2><blockquote><p>window.getComputedStyle(transform).transform</p></blockquote><ul><li>返回的是 矩阵字符串</li><li>最后两位就是 translate的值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;transform&quot;</span>&gt;</span>transform<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.transform</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">100px</span>, <span class="hljs-number">100px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> tmp = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getComputedStyle</span>(transform).<span class="hljs-property">transform</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tmp); <span class="hljs-comment">// matrix(1, 0, 0, 1, 100, 100)</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> (tmp)); <span class="hljs-comment">// string</span><br></code></pre></td></tr></table></figure><p>若要<strong>获取</strong>matrix里面的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">tmp = tmp.<span class="hljs-title function_">slice</span>(<span class="hljs-number">7</span>, -<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tmp); <span class="hljs-comment">// 1, 0, 0, 1, 100, 0</span><br>tmpArr = tmp.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;, &#x27;</span>) <span class="hljs-comment">// 这里是 逗号和一个空格</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tmpArr); <span class="hljs-comment">// [&#x27;1&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;100&#x27;, &#x27;0&#x27;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>grid网格布局</title>
    <link href="/2022/10/31/02-CSS/CSS/%E5%B8%83%E5%B1%80/grid%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/"/>
    <url>/2022/10/31/02-CSS/CSS/%E5%B8%83%E5%B1%80/grid%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="grid网格布局"><a href="#grid网格布局" class="headerlink" title="grid网格布局"></a>grid网格布局</h3><p><code>display: grid</code></p><p>常见属性</p><table><thead><tr><th>属性</th><th>属性值</th></tr></thead><tbody><tr><td>grid-template-columns</td><td>定义每一列的列宽，如 <code>100px 100px 100px;</code> 或 <code>repeat(3,100px);</code> 总共三列，每列列宽是100px</td></tr><tr><td>grid-template-rows</td><td>定义每一行的行高，如 <code>100px 100px 100px;</code> 或 <code>repeat(3,100px);</code>从上至下，每行高度为100px</td></tr><tr><td></td><td></td></tr></tbody></table><h4 id="grid-template-columns的属性值"><a href="#grid-template-columns的属性值" class="headerlink" title="grid-template-columns的属性值"></a>grid-template-columns的属性值</h4><h5 id="使用px"><a href="#使用px" class="headerlink" title="使用px"></a>使用px</h5><p><code>grid-template-columns: 100px, 100px 80px;</code></p><h5 id="使用repeat"><a href="#使用repeat" class="headerlink" title="使用repeat"></a>使用repeat</h5><ul><li><p>repeat(次数, 大小)：<code>grid-template-columns: repeat(2, 100px 80px);</code> 等价于 <code>grid-template-columns: 100px 80px 100px 80px;</code> </p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221026170308724.png" alt="image-20221026170308724"></p></li><li><p>repeat(auto-fill, minmax(50px, 1fr))</p><ul><li><p>minmax()表示一个范围，第一个参数为最小数，第二个参数为最大数</p><ul><li>屏幕比较小时，每个格子都是50px，屏幕比较大时，每个格子的宽度=容器宽度/格子数量）-gap，即将容器宽度等分给每个格子</li></ul></li><li><p>auto-fill是尽量填充格子的模式</p><ul><li><p>举例：</p><p>格子最小为50px时，7个格子为 7*50=350，8个格子为 8*50=400， 9个格子为 9*50=450</p><p>若屏幕宽度为 [350, 400]会显示7个格子，每个格子宽度为 width/7</p><p>若屏幕宽度为 [400, 450] 会显示8个格子，每个格子宽度为 width/8</p></li></ul></li></ul></li><li><p>repeat(auto-fit, minmax(50px, 1fr))</p><ul><li>auto-fit不会填充没有元素的格子，当屏幕较大时，只会给已有的元素等分宽度</li></ul></li></ul><h5 id="使用fr"><a href="#使用fr" class="headerlink" title="使用fr"></a>使用fr</h5><ul><li><p>单位fr：<code>grid-template-columns: 1fr 2fr;</code> 表示 后者列宽是前者的两倍</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221026170044349.png" alt="image-20221026170044349"></p></li></ul><h5 id="使用fr和px配合"><a href="#使用fr和px配合" class="headerlink" title="使用fr和px配合"></a>使用fr和px配合</h5><ul><li><p>单位fr也可以和px配合使用：<code>grid-template-columns: 800px 1fr 2fr;</code> 第1列列宽800px，第3列列宽为第2列的2倍</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221026170007891.png" alt="image-20221026170007891"></p></li></ul><h5 id="使用minmax"><a href="#使用minmax" class="headerlink" title="使用minmax()"></a>使用minmax()</h5><ul><li><p><code>grid-template-columns: 1fr 5fr minmax(100px, 2fr);</code> 第一列是1fr，第二列是5fr，第三列最小值是100px,最大是2fr。当第二列fr无限大时和第三列到100px时，会往第一列借值</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221026171341703.png" alt="image-20221026171341703"></p></li></ul><h5 id="使用auto"><a href="#使用auto" class="headerlink" title="使用auto"></a>使用auto</h5><ul><li>auto自适应：<code>grid-template-columns: 100px auto 100px;</code></li></ul><h5 id="定义网线格名称"><a href="#定义网线格名称" class="headerlink" title="定义网线格名称"></a>定义网线格名称</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">grid</span>-template-columns: [<span class="hljs-built_in">c1</span>] <span class="hljs-number">100</span>px [<span class="hljs-built_in">c2</span>] <span class="hljs-number">100</span>px [<span class="hljs-built_in">c3</span>] auto [<span class="hljs-built_in">c4</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>指定每一根网格线的名字，方便以后的引用。也可以有多个名字；[c1,c1a]</p><h4 id="grid-template-rows"><a href="#grid-template-rows" class="headerlink" title="grid-template-rows"></a>grid-template-rows</h4><p>同上</p><h4 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h4><ul><li><p>row-gap:行间距</p></li><li><p>colum-gap:列间距</p></li><li><p><code>row-gap</code>和<code>column-gap简写形式:</code> gap:20px 10px;</p></li><li><p>gap:20px; 等价于 行间距、列间距都为20px</p></li></ul><h4 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h4><p>网格布局允许指定”区域”（area），一个区域由单个或多个单元格组成。<code>grid-template-areas</code>属性用于定义区域。</p><p>可用于合并单元格　　　</p><h4 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h4><p>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行；</p><p>默认是row；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">grid-auto-flow</span>: row;<br></code></pre></td></tr></table></figure><p>效果如下所示<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221106211040851.png" alt="image-20221106211040851"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">grid-auto-flow</span>: column;<br></code></pre></td></tr></table></figure><p>效果如下所示<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221106211131054.png" alt="image-20221106211131054"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">grid-auto-flow</span>: row dense;<br></code></pre></td></tr></table></figure><p>效果如下所示<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221106211203590.png" alt="image-20221106211203590"></p><p>参数形式：</p><ul><li>单个关键字：<code>row</code>、<code>column</code>，或 <code>dense</code> 中的一个。</li><li>两个关键字：<code>row dense</code> 或 <code>column dense</code>。</li></ul><h4 id="justify-items-align-items-place-items"><a href="#justify-items-align-items-place-items" class="headerlink" title="justify-items align-items place-items"></a>justify-items align-items place-items</h4><p>justify-items设置单元格水平位置：设置单元格内容的水平位置（左中右）；</p><p>align-items设置单元格垂直位置：设置单元格内容的垂直位置（上中下）；</p><p>二者的属性值可以取：</p><ul><li>start：对齐单元格的起始边缘。</li><li>end：对齐单元格的结束边缘。</li><li>center：单元格内部居中。</li><li>stretch：拉伸，占满单元格的整个宽度（默认值）。</li></ul><p>二者的简写为：</p><ul><li><code>place-items: align-items  justify-items</code></li></ul><h4 id="justify-content-align-content-place-content"><a href="#justify-content-align-content-place-content" class="headerlink" title="justify-content align-content place-content"></a>justify-content align-content place-content</h4><p><code>justify-content</code>：整个内容区域在容器里面的水平位置（左中右）；</p><p><code>align-content</code>：整个内容区域的垂直位置（上中下）。</p><p>二者简写为：</p><p><code>place-content: align-content  justify-content;</code></p>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>布局</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue高频面试题2</title>
    <link href="/2022/10/30/12-%E9%9D%A2%E8%AF%95%E9%A2%98/Vue%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%982/"/>
    <url>/2022/10/30/12-%E9%9D%A2%E8%AF%95%E9%A2%98/Vue%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%982/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Vue生命周期"><a href="#一、Vue生命周期" class="headerlink" title="一、Vue生命周期"></a>一、Vue生命周期</h1><h3 id="1-1-Vue生命周期都有哪些？"><a href="#1-1-Vue生命周期都有哪些？" class="headerlink" title="1.1 Vue生命周期都有哪些？"></a>1.1 Vue生命周期都有哪些？</h3><p>​        解答：系统自带了八个生命周期，分别是：</p><pre><code class="hljs">    beforeCreate    created  beforeMount  mounted  beforeUpdate  updated  beforeDestroy  destroyed</code></pre><h3 id="1-3-一旦进入组件或者一旦进入页面，会执行哪些生命周期？"><a href="#1-3-一旦进入组件或者一旦进入页面，会执行哪些生命周期？" class="headerlink" title="1.3 一旦进入组件或者一旦进入页面，会执行哪些生命周期？"></a>1.3 一旦进入组件或者一旦进入页面，会执行哪些生命周期？</h3><p>​        解答：会之前前面4个</p><pre><code class="hljs">    beforeCreate    created  beforeMount     mounted</code></pre><h3 id="1-4-如果使用了keep-alive会多出来俩个生命周期"><a href="#1-4-如果使用了keep-alive会多出来俩个生命周期" class="headerlink" title="1.4 如果使用了keep-alive会多出来俩个生命周期"></a>1.4 如果使用了keep-alive会多出来俩个生命周期</h3><pre><code class="hljs">activateddeactivated</code></pre><h3 id="1-5-如果使用了keep-alive第一次进入组件会执行5个生命周期"><a href="#1-5-如果使用了keep-alive第一次进入组件会执行5个生命周期" class="headerlink" title="1.5 如果使用了keep-alive第一次进入组件会执行5个生命周期"></a>1.5 如果使用了keep-alive第一次进入组件会执行5个生命周期</h3><pre><code class="hljs">beforeCreatecreatedbeforeMountmountedactivated</code></pre><h3 id="1-6-如果使用了keep-alive第二次或者第N次，每次都会执行一个生命周期"><a href="#1-6-如果使用了keep-alive第二次或者第N次，每次都会执行一个生命周期" class="headerlink" title="1.6 如果使用了keep-alive第二次或者第N次，每次都会执行一个生命周期"></a>1.6 如果使用了keep-alive第二次或者第N次，每次都会执行一个生命周期</h3><pre><code class="hljs">activated</code></pre><h1 id="二、v-show和v-if是干什么？有什么区别？"><a href="#二、v-show和v-if是干什么？有什么区别？" class="headerlink" title="二、v-show和v-if是干什么？有什么区别？"></a>二、v-show和v-if是干什么？有什么区别？</h1><p>2.1 v-show</p><pre><code class="hljs">显示和隐藏 : display:none进行隐藏 、display:block进行显示        </code></pre><p>2.2 v-if</p><pre><code class="hljs">创建和删除：remove、append        </code></pre><p>2.3 区别：</p><pre><code class="hljs">显示和隐藏用：v-show创建和删除用：v-if频繁切换用：v-show不频繁切换用：v-if    首次加载：用v-if，不用v-show为什么：            如果用v-if可以没有这个盒子，然后再通过v-if进行创建（但是第一次进入页面是没有这个盒子，是不加载的）。            如果用v-show这个盒子不管是显示还是隐藏，该盒子都是在的（节点都是存在）</code></pre><p>2.4 使用场景：</p><pre><code class="hljs">v-show ： 加入购物车、分享、蒙层这种都基本上用v-showv-if : 首页栏目切换的时候v-if</code></pre><h1 id="三、v-if和v-for-优先级"><a href="#三、v-if和v-for-优先级" class="headerlink" title="三、v-if和v-for 优先级"></a>三、v-if和v-for 优先级</h1><h5 id="v-for的优先级要比v-if的优先级高"><a href="#v-for的优先级要比v-if的优先级高" class="headerlink" title="v-for的优先级要比v-if的优先级高"></a>v-for的优先级要比v-if的优先级高</h5><p>证明这个事情，是在vue.js源码种10997行</p><pre><code class="hljs">if (el.staticRoot &amp;&amp; !el.staticProcessed) &#123;  return genStatic(el, state)&#125; else if (el.once &amp;&amp; !el.onceProcessed) &#123;  return genOnce(el, state)&#125; else if (el.for &amp;&amp; !el.forProcessed) &#123;  return genFor(el, state)&#125; else if (el.if &amp;&amp; !el.ifProcessed) &#123;  return genIf(el, state)&#125; else if (el.tag === &#39;template&#39; &amp;&amp; !el.slotTarget &amp;&amp; !state.pre) &#123;  return genChildren(el, state) || &#39;void 0&#39;&#125; else if (el.tag === &#39;slot&#39;) &#123;  return genSlot(el, state)&#125; else &#123;</code></pre><h5 id="注：v-if和v-for不要写在同一个节点上，这个性能很差。（v-if要写在父节点上）"><a href="#注：v-if和v-for不要写在同一个节点上，这个性能很差。（v-if要写在父节点上）" class="headerlink" title="注：v-if和v-for不要写在同一个节点上，这个性能很差。（v-if要写在父节点上）"></a>注：v-if和v-for不要写在同一个节点上，这个性能很差。（v-if要写在父节点上）</h5><h1 id="四、ref"><a href="#四、ref" class="headerlink" title="四、ref"></a>四、ref</h1><p>4.1 是什么？</p><p>​    获取dom</p><p>4.2 场景？</p><p>​    如果项目中使用插件，并且插件是要获取dom的，那么就可以使用ref了。</p><h1 id="五、keep-alive"><a href="#五、keep-alive" class="headerlink" title="五、keep-alive"></a>五、keep-alive</h1><p>5.1 是什么？</p><p>​    缓存组件</p><p>5.2 一旦使用keep-alive会多倆个生命周期</p><p>​    activated<br>​    deactivated</p><p>5.3 功能</p><p>​    提升性能的</p><h1 id="六、nextTick"><a href="#六、nextTick" class="headerlink" title="六、nextTick"></a>六、nextTick</h1><p>6.1 是什么？</p><p>​    当dom更新完毕执行内部代码</p><p>6.2 场景</p><p>​    使用插件的时候会用到。例如new Swiper这个插件可能会获取当前元素的宽度或者高度，等dom都加载完毕再去获取宽度和高度就不会有任何问题了。</p><h1 id="七、computed、methods、watch区别"><a href="#七、computed、methods、watch区别" class="headerlink" title="七、computed、methods、watch区别"></a>七、computed、methods、watch区别</h1><h5 id="computed：计算属性"><a href="#computed：计算属性" class="headerlink" title="computed：计算属性"></a>computed：计算属性</h5><h6 id="可以监听某些数据的变化，并且有缓存。"><a href="#可以监听某些数据的变化，并且有缓存。" class="headerlink" title="可以监听某些数据的变化，并且有缓存。"></a>可以监听某些数据的变化，并且有缓存。</h6><h6 id="如果一进入页面调用，就会触发"><a href="#如果一进入页面调用，就会触发" class="headerlink" title="如果一进入页面调用，就会触发"></a>如果一进入页面调用，就会触发</h6><h5 id="methods-：-可以放入函数"><a href="#methods-：-可以放入函数" class="headerlink" title="methods  ： 可以放入函数"></a>methods  ： 可以放入函数</h5><h6 id="没有缓存"><a href="#没有缓存" class="headerlink" title="没有缓存"></a>没有缓存</h6><h6 id="如果一进入页面调用，就会触发-1"><a href="#如果一进入页面调用，就会触发-1" class="headerlink" title="如果一进入页面调用，就会触发"></a>如果一进入页面调用，就会触发</h6><h5 id="watch-：监听（路由和数据）"><a href="#watch-：监听（路由和数据）" class="headerlink" title="watch ：监听（路由和数据）"></a>watch ：监听（路由和数据）</h5><h6 id="当数据发生改变时，才会触发"><a href="#当数据发生改变时，才会触发" class="headerlink" title="当数据发生改变时，才会触发"></a>当数据发生改变时，才会触发</h6><h6 id="可以得到现在的值和过去的值"><a href="#可以得到现在的值和过去的值" class="headerlink" title="可以得到现在的值和过去的值"></a>可以得到现在的值和过去的值</h6><p>​                </p><h1 id="八、Vue组件的通信（组件的传值）"><a href="#八、Vue组件的通信（组件的传值）" class="headerlink" title="八、Vue组件的通信（组件的传值）"></a>八、Vue组件的通信（组件的传值）</h1><h3 id="8-1-父传子"><a href="#8-1-父传子" class="headerlink" title="8.1 父传子"></a>8.1 父传子</h3><pre><code class="hljs">父：&lt;HelloWorld :msg=&quot;str&quot; /&gt;&lt;HelloWorld :msg=&quot;str&quot; &gt;&lt;/HelloWorld&gt;子：props:[&#39;msg&#39;]props: &#123;    msg: String,&#125;,</code></pre><h3 id="8-2-子传父"><a href="#8-2-子传父" class="headerlink" title="8.2 子传父"></a>8.2 子传父</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript">子：<br>&lt;button <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;changeParentName&quot;</span>&gt;改变父组件的name&lt;/button&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-comment">//子组件的事件</span><br>        <span class="hljs-attr">changeParentName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;handleChange&#x27;</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>) <span class="hljs-comment">// 触发父组件中handleChange事件并传参Jack</span><br>            <span class="hljs-comment">// 注：此处事件名称与父组件中绑定的事件名称要一致</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>父：<br>&lt;child <span class="hljs-meta">@handleChange</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;&lt;/child&gt;<br><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">changeName</span>(<span class="hljs-params">name</span>) &#123;  <span class="hljs-comment">// name形参是子组件中传入的值Jack</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-兄弟组件传值"><a href="#8-3-兄弟组件传值" class="headerlink" title="8.3 兄弟组件传值"></a>8.3 兄弟组件传值</h3><p>创建bus作为中转</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vue;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript">A组件：<br>&lt;button <span class="hljs-meta">@click</span>=<span class="hljs-string">&#x27;btn&#x27;</span>&gt;<span class="hljs-title class_">HelloWorld</span>按钮&lt;/button&gt;<br>data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">hlStr</span>:<span class="hljs-string">&quot;这是helloWorld组件的数据&quot;</span><br>    &#125;<br>&#125;,<br><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-title function_">btn</span>(<span class="hljs-params"></span>)&#123;<br>      bus.$emit(<span class="hljs-string">&#x27;selectItem&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">hlStr</span>);<br>    &#125;<br>&#125;<br><br>B组件：<br><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>bus.$on(<span class="hljs-string">&#x27;selectItem&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">val</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( val , <span class="hljs-number">1111</span>);<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="九、slot插槽"><a href="#九、slot插槽" class="headerlink" title="九、slot插槽"></a>九、slot插槽</h1><p>使用场景：组件中有些地方的布局可能大多一致，但是细微有些小小变化</p><h1 id="十、Vue路由的高频面试题"><a href="#十、Vue路由的高频面试题" class="headerlink" title="十、Vue路由的高频面试题"></a>十、Vue路由的高频面试题</h1><h3 id="10-1-SPA单页面应用和传统页面跳转有什么区别？"><a href="#10-1-SPA单页面应用和传统页面跳转有什么区别？" class="headerlink" title="10.1 SPA单页面应用和传统页面跳转有什么区别？"></a>10.1 SPA单页面应用和传统页面跳转有什么区别？</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">SPA跳转是一个页面进行切换<br><br>传统页面跳转就是跳转不同的<span class="hljs-selector-tag">html</span>了<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">SPA对于seo部分不是特别好，只能收录一个<br><br>传统的页面对于seo比较好，多个<span class="hljs-selector-tag">html</span>文件收录<br></code></pre></td></tr></table></figure><h3 id="10-2-路径传值"><a href="#10-2-路径传值" class="headerlink" title="10.2 路径传值"></a>10.2 路径传值</h3><p>显示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">传：<br>this.<span class="hljs-variable">$router</span>.<span class="hljs-title function_ invoke__">push</span>(&#123;<br>        <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-attr">query</span>:&#123;<br>          <span class="hljs-attr">key</span>:<span class="hljs-string">&#x27;你好&#x27;</span><br>        &#125;<br>&#125;)<br>接：<br>this.<span class="hljs-variable">$route</span>.query<br></code></pre></td></tr></table></figure><p>隐示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">传：<br>this.<span class="hljs-variable">$router</span>.<span class="hljs-title function_ invoke__">push</span>(&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;About&#x27;</span>,<br>        <span class="hljs-attr">params</span>:&#123;<br>          <span class="hljs-attr">key</span>:<span class="hljs-string">&#x27;你好&#x27;</span><br>        &#125;<br>&#125;)<br>接：<br>this.<span class="hljs-variable">$route</span>.params<br></code></pre></td></tr></table></figure><h3 id="10-3-路由的模式"><a href="#10-3-路由的模式" class="headerlink" title="10.3 路由的模式"></a>10.3 路由的模式</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">mode: <span class="hljs-string">&quot;history&quot;</span>   http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span>/about<br><br>mode:<span class="hljs-string">&quot;hash&quot;</span>       http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/#/</span>about<br></code></pre></td></tr></table></figure><h3 id="10-4-路由导航守卫（拦截、路由钩子函数）"><a href="#10-4-路由导航守卫（拦截、路由钩子函数）" class="headerlink" title="10.4 路由导航守卫（拦截、路由钩子函数）"></a>10.4 路由导航守卫（拦截、路由钩子函数）</h3><p>全局</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">beforeEach<br>beforeResolve<br>afterEach<br></code></pre></td></tr></table></figure><p>路由独享</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">beforeEnter</span><br></code></pre></td></tr></table></figure><p>组件内</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">beforeRouteEnter</span><br><span class="hljs-attribute">beforeRouteUpdate</span> (<span class="hljs-number">2</span>.<span class="hljs-number">2</span> 新增)<br><span class="hljs-attribute">beforeRouteLeave</span><br></code></pre></td></tr></table></figure><h5 id="场景：要去拦截，判断用户是否是登录状态。功能：进入地址管理，用户如果没有登录是进入不了地址管理（在进入之前判断拦截），需要先登录。"><a href="#场景：要去拦截，判断用户是否是登录状态。功能：进入地址管理，用户如果没有登录是进入不了地址管理（在进入之前判断拦截），需要先登录。" class="headerlink" title="场景：要去拦截，判断用户是否是登录状态。功能：进入地址管理，用户如果没有登录是进入不了地址管理（在进入之前判断拦截），需要先登录。"></a>场景：要去拦截，判断用户是否是登录状态。功能：进入地址管理，用户如果没有登录是进入不了地址管理（在进入之前判断拦截），需要先登录。</h5><h3 id="10-5-子路由、动态路由"><a href="#10-5-子路由、动态路由" class="headerlink" title="10.5 子路由、动态路由"></a>10.5 子路由、动态路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">子路由：children<br>动态路由：<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="11、Vuex"><a href="#11、Vuex" class="headerlink" title="11、Vuex"></a>11、Vuex</h1><h3 id="11-1-Vuex有哪些部分构成"><a href="#11-1-Vuex有哪些部分构成" class="headerlink" title="11.1 Vuex有哪些部分构成"></a>11.1 Vuex有哪些部分构成</h3><p>state、getters、mutations、actions、modules</p><h3 id="11-2-什么场景用Vuex"><a href="#11-2-什么场景用Vuex" class="headerlink" title="11.2 什么场景用Vuex"></a>11.2 什么场景用Vuex</h3><p>共享、方便管理、方便维护、组件传值……</p><p>项目：购物车数据，订单数据，用户的登录信息….</p><h3 id="11-3-mutations和actions的区别"><a href="#11-3-mutations和actions的区别" class="headerlink" title="11.3 mutations和actions的区别"></a>11.3 mutations和actions的区别</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">本质区别：<br>mutations必须是同步函数<br>actions“可以包含”任意异步操作<br><br>使用区别：mutations中可以放入函数，actions也可以放入函数，但是一般我们在mutations中放入函数而actions是提交mutations<br></code></pre></td></tr></table></figure><h1 id="12、双向绑定原理"><a href="#12、双向绑定原理" class="headerlink" title="12、双向绑定原理"></a>12、双向绑定原理</h1><p>通过Object.defineProperty劫持数据发生的改变，如果数据发生改变了（在set中进行赋值的），触发update方法进行更新节点内容（），从而实现了数据双向绑定的原理。</p><h1 id="13、diff算法"><a href="#13、diff算法" class="headerlink" title="13、diff算法"></a>13、diff算法</h1><p>功能：提升性能</p><p>虚拟dom ===》其实就是数据（ 把dom数据化 ）</p><h3 id="主流：snabbdom、virtual-dom"><a href="#主流：snabbdom、virtual-dom" class="headerlink" title="主流：snabbdom、virtual-dom"></a>主流：snabbdom、virtual-dom</h3><p>snabbdom：<a href="https://www.npmjs.com/package/snabbdom">https://www.npmjs.com/package/snabbdom</a></p><h3 id="13-1-搭建环境"><a href="#13-1-搭建环境" class="headerlink" title="13.1 搭建环境"></a>13.1 搭建环境</h3><p>npm init -y</p><p>cnpm install webpack@5 webpack-cli@3 webpack-dev-server@3 -S</p><p>cnpm install snabbdom -S</p><p>新建webpack.config.js</p><p>配置webpack.config.js</p><h3 id="13-2-虚拟节点-和-真实节点"><a href="#13-2-虚拟节点-和-真实节点" class="headerlink" title="13.2 虚拟节点 和  真实节点"></a>13.2 虚拟节点 和  真实节点</h3><p>虚拟节点：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">  children:</span> undefined<br><span class="hljs-symbol">  data:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">  elm:</span> h1<br><span class="hljs-symbol">  key:</span> undefined<br><span class="hljs-symbol">  sel:</span> <span class="hljs-string">&quot;h1&quot;</span><br><span class="hljs-symbol">  text:</span> <span class="hljs-string">&quot;你好h1&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>真实节点：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="13-3-新老节点替换的规则"><a href="#13-3-新老节点替换的规则" class="headerlink" title="13.3 新老节点替换的规则"></a>13.3 新老节点替换的规则</h3><p>​    1、如果新老节点不是同一个节点名称，那么就暴力删除旧的节点，创建插入新的节点。</p><p>​    2、只能同级比较，不能跨层比较。如果跨层那么就暴力删除旧的节点，创建插入新的节点。</p><p>​    3、如果是相同节点，又分为很多情况</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-number">3.1</span> 新节点有没有children<br>如果新的节点没有children，那就证明新节点是文本，那直接把旧的替换成新的文本<br><span class="hljs-number">3.2</span> 新节点有children<br>新的有children，旧的也有children <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>》就是diff算法的核心了【<span class="hljs-number">3.3</span>】<br>新的有children，旧的没有 <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>》创建元素添加（把旧的内容删除清空掉，增加新的）<br></code></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">3</span><span class="hljs-string">.</span><span class="hljs-comment">3 diff算法的核心（最复杂的情况）</span><br><br><span class="hljs-comment">1、 旧前 和 新前</span><br><span class="hljs-comment">匹配：旧前的指针</span><span class="hljs-literal">++</span> <span class="hljs-comment">、 新前的指针</span><span class="hljs-literal">++</span><br><span class="hljs-comment">2、 旧后 和 新后</span><br><span class="hljs-comment">匹配：旧后的指针</span><span class="hljs-literal">--</span> <span class="hljs-comment">、 新后的指针</span><span class="hljs-literal">--</span><br><span class="hljs-comment">3、 旧前 和 新后</span><br><span class="hljs-comment">匹配：旧前的指针</span><span class="hljs-literal">++</span> <span class="hljs-comment">、 新后的指针</span><span class="hljs-literal">--</span><br><span class="hljs-comment">4、 旧后 和 新前</span><br><span class="hljs-comment">匹配：旧后的指针</span><span class="hljs-literal">--</span> <span class="hljs-comment">、 新前的指针</span><span class="hljs-literal">++</span><br><span class="hljs-comment">5、 以上都不满足条件 ===》查找</span><br><span class="hljs-comment">新的指针</span><span class="hljs-literal">++</span><span class="hljs-comment">，新的添加到页面上并且新在旧的种有，要给旧的复制成undefined</span><br><span class="hljs-comment">6、 创建或者删除</span><br><br></code></pre></td></tr></table></figure><p>***注意：如果要提升性能，一定要加入key，key是唯一标示，在更改前后，确认是不是同一个节点。</p><h1 id="14、谈一下MVVM框架"><a href="#14、谈一下MVVM框架" class="headerlink" title="14、谈一下MVVM框架"></a>14、谈一下MVVM框架</h1><h3 id="web1-0时代"><a href="#web1-0时代" class="headerlink" title="web1.0时代"></a>web1.0时代</h3><p>​        文件全在一起，也就是前端和后端的代码全在一起</p><p>​        问题：</p><p>​                1、前端和后端都是一个人开发。（技术没有侧重点或者责任不够细分）</p><p>​                2、项目不好维护。</p><p>​                3、html、css、js页面的静态内容没有，后端是没办法工作的（没办法套数据）。</p><p>​        mvc….都是后端先出的</p><h3 id="web2-0时代"><a href="#web2-0时代" class="headerlink" title="web2.0时代"></a>web2.0时代</h3><p>​            ajax出现了，就可以：前端和后端数据分离了。</p><p>​            解决问题：后端不用等前端页面弄完没，后端做后端的事情（写接口）、前端布局、特效、发送请求。</p><p>​            问题：</p><p>​                    1、html、css、js都在一个页面中，单个页面可能内容也是比较多的（也会出现不好维护的情况）。</p><h3 id="出现前端的框架了MVC、MVVM"><a href="#出现前端的框架了MVC、MVVM" class="headerlink" title="出现前端的框架了MVC、MVVM"></a>出现前端的框架了MVC、MVVM</h3><p>​            解决问题：可以把一个“特别大”页面，进行拆分（组件化），单个组件进行维护</p><h3 id="什么是MVVM"><a href="#什么是MVVM" class="headerlink" title="什么是MVVM"></a>什么是MVVM</h3><p>​            Model-View-的简写</p><p>![image-20210809000318578](/Users/each/Library/Application Support/typora-user-images/image-20210809000318578.png)</p><p>view : 视图【dom==》在页面中展示的内容】</p><p>model：模型【数据层：vue中的data数据】</p><p>viewModel：视图模型层【就是vue源码】</p>]]></content>
    
    
    <categories>
      
      <category>12-面试题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS选择器</title>
    <link href="/2022/10/29/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2022/10/29/02-CSS/CSS/%E5%9F%BA%E7%A1%80/CSS%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><p>又称元素选择器，是指用HTML标签名作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式</p><p>作用：</p><ul><li>标签选择器可以把某一类标签全部选择出来</li></ul><p>优点：</p><ul><li>能快速为页面中同类型的标签统一设置样式</li></ul><p>缺点：</p><ul><li>不能设计差异化样式，只能选择全部的当前标签</li></ul><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器</p><p>类选择器在HTML中以class属性表示，在CSS中，类选择器以一个点“.”号表示</p><p>口诀：样式点定义，结构类(class)调用，一个或多个，开发最常用</p><p><strong>1. 语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html">在<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>标签中定义，在<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>标签中利用class调用<br>.类名 &#123;<br>属性1: 属性值1;<br>...<br>&#125;<br><br>例：<br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>选择器的使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.red</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>学习<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>C语言<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>:</p><ul><li>类选择器使用“.”(英文点号)进行标识，后面紧跟类名（自定义命名类名）</li><li>长名称或者词组可以使用中横线来为选择器命名</li><li>不要使用数字或者中文等命名，尽量使用英文字母来表示</li><li>命名要有意义</li></ul><p>案例：使用类选择器<strong>画盒子</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">        </span><br><span class="language-css"><span class="hljs-selector-class">.pinkbox</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pinkbox&quot;</span>&gt;</span>娱乐<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>2. 类选择-多类名</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box gray&quot;</span>&gt;</span>我爱学习<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在标签class属性中写<strong>多个</strong>类名</li><li>多个类名中间必须<strong>空格</strong>分开</li><li>这个标签可以具备这些类名的样式</li></ul><p>多类名使用场景：</p><ol><li>可以把一些标签元素相同的样式（共同的部分）都放在一个类里面</li><li>这些标签都可以调用这个公共的类。然后再调用自己独有的类</li><li>节省CSS代码，统一修改也比较方便</li></ol><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><p>id选择器口诀：样式#定义，结构id调用，<strong>只能调用一次</strong>，别人切勿使用</p><p>定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 样式#定义，结构id调用，只能调用一次，别人切勿使用 */</span></span><br><span class="language-css">    <span class="hljs-selector-id">#pink</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: greenyellow;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pink&quot;</span>&gt;</span>id选择器<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>id选择器和类选择器的区别：</p><ul><li>类选择器就如人的名字，一个人可以有又多个名字，一个名字也可以被多个人使用</li><li>id选择器就如人的身份证号码，是唯一的</li><li>id选择器和类选择器最大的区别是使用次数不同</li><li>类选择器在修改样式中用的最多，id选择器一般用于页面<strong>唯一性</strong>的元素上，经常和JavaScript搭配使用</li></ul><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><p>在CSS中，通配符选择器使用“*”定义，他表示选取页面中的所有元素（标签）</p><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    * &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>通配符选择器不需要调用，自动就给所有的元素使用样式</li><li>特殊情况才使用。</li></ul><h2 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h2><ul><li>复合选择器可以更准确、更高效得选择目标元素（标签）</li><li>符合选择器是由两个或多个基础选择器通过不同的方式组合而成的</li><li>常用的符合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器。</li></ul><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>又称包含选择器，可以选择父元素里面的子元素。</p><p>写法：将外层标签写在前面，内层标签卸载后面，中间用空格分隔，当标签发生嵌套时，内层标签就成为外层标签的后代。</p><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">元素1 元素2 &#123; 样式声明 &#125;<br><br>如：<br>ul li &#123;<br>    color: rgb(79, 196, 12);<br>&#125;<br></code></pre></td></tr></table></figure><p>表示选择元素1里面所有元素2（后代元素）</p><p><strong>注意：</strong></p><ul><li>元素1与元素2中间空格隔开</li><li>元素1是父级，元素2是子级，最终选择的是元素2</li><li>元素2可以是儿子，也可以是孙子，只要是元素1的后代即可</li><li>元素1和元素2可以是任意基础选择器</li></ul><h3 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h3><p>只能选择某元素的最近一级子元素</p><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">元素1&gt;元素2 &#123; 样式声明 &#125;<br><br>如：<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.nav</span>&gt;<span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>选择元素1里面的所有直接后代（子元素）元素2</p><p><strong>注意</strong></p><ul><li>元素1与元素2中间用大于号(&gt;)隔开</li><li>元素1是父级，元素2是子级，最终选择的是元素2</li><li>元素2必须是亲儿子，不能选择其孙子、重孙子。</li></ul><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><p>可以选择多组标签，同时要为他们定义相同的样式。</p><p>是各类选择器通过英文逗号(,)链接而成，任何形式的选择器都可以作为并集选择器的一部分。</p><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">元素1,<br>元素2 &#123; 样式声明 &#125;<br>如：<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span>,</span><br><span class="language-css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span>,</span><br><span class="language-css">    <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>元素1和元素2之间用<strong>逗号</strong>隔开</li><li>逗号可以理解为和</li><li>并集选择器常用于集体声明</li><li>约定的语法规范：并集选择器喜欢竖着写</li></ul><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p>用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第一个，第n个元素。</p><p>伪类选择器书写最大的特点是用冒号(:)表示</p><h4 id="所有伪类选择器"><a href="#所有伪类选择器" class="headerlink" title="所有伪类选择器"></a>所有伪类选择器</h4><table><thead><tr><th align="left">选择器</th><th align="left">例子</th><th align="left">例子描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_active.asp">:active</a></td><td align="left">a:active</td><td align="left">选择活动的链接。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_checked.asp">:checked</a></td><td align="left">input:checked</td><td align="left">选择每个被选中的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_disabled.asp">:disabled</a></td><td align="left">input:disabled</td><td align="left">选择每个被禁用的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_empty.asp">:empty</a></td><td align="left">p:empty</td><td align="left">选择没有子元素的每个 <p> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_enabled.asp">:enabled</a></td><td align="left">input:enabled</td><td align="left">选择每个已启用的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-child.asp">:first-child</a></td><td align="left">p:first-child</td><td align="left">选择作为其父的首个子元素的每个 <p> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-of-type.asp">:first-of-type</a></td><td align="left">p:first-of-type</td><td align="left">选择作为其父的首个 <p> 元素的每个 <p> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_focus.asp">:focus</a></td><td align="left">input:focus</td><td align="left">选择获得焦点的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_hover.asp">:hover</a></td><td align="left">a:hover</td><td align="left">选择鼠标悬停其上的链接。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_in-range.asp">:in-range</a></td><td align="left">input:in-range</td><td align="left">选择具有指定范围内的值的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_invalid.asp">:invalid</a></td><td align="left">input:invalid</td><td align="left">选择所有具有无效值的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_lang.asp">:lang(<em>language</em>)</a></td><td align="left">p:lang(it)</td><td align="left">选择每个 lang 属性值以 “it” 开头的 <p> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_last-child.asp">:last-child</a></td><td align="left">p:last-child</td><td align="left">选择作为其父的最后一个子元素的每个 <p> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_last-of-type.asp">:last-of-type</a></td><td align="left">p:last-of-type</td><td align="left">选择作为其父的最后一个 <p> 元素的每个 <p> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_link.asp">:link</a></td><td align="left">a:link</td><td align="left">选择所有未被访问的链接。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_not.asp">:not(<em>selector</em>)</a></td><td align="left">:not(p)</td><td align="left">选择每个非 <p> 元素的元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-child.asp">:nth-child(<em>n</em>)</a></td><td align="left">p:nth-child(2)</td><td align="left">选择作为其父的第二个子元素的每个 <p> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-last-child.asp">:nth-last-child(<em>n</em>)</a></td><td align="left">p:nth-last-child(2)</td><td align="left">选择作为父的第二个子元素的每个<p>元素，从最后一个子元素计数。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-last-of-type.asp">:nth-last-of-type(<em>n</em>)</a></td><td align="left">p:nth-last-of-type(2)</td><td align="left">选择作为父的第二个<p>元素的每个<p>元素，从最后一个子元素计数</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-of-type.asp">:nth-of-type(<em>n</em>)</a></td><td align="left">p:nth-of-type(2)</td><td align="left">选择作为其父的第二个 <p> 元素的每个 <p> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_only-of-type.asp">:only-of-type</a></td><td align="left">p:only-of-type</td><td align="left">选择作为其父的唯一 <p> 元素的每个 <p> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_only-child.asp">:only-child</a></td><td align="left">p:only-child</td><td align="left">选择作为其父的唯一子元素的 <p> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_optional.asp">:optional</a></td><td align="left">input:optional</td><td align="left">选择不带 “required” 属性的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_out-of-range.asp">:out-of-range</a></td><td align="left">input:out-of-range</td><td align="left">选择值在指定范围之外的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_read-only.asp">:read-only</a></td><td align="left">input:read-only</td><td align="left">选择指定了 “readonly” 属性的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_read-write.asp">:read-write</a></td><td align="left">input:read-write</td><td align="left">选择不带 “readonly” 属性的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_required.asp">:required</a></td><td align="left">input:required</td><td align="left">选择指定了 “required” 属性的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_root.asp">:root</a></td><td align="left">root</td><td align="left">选择元素的根元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_target.asp">:target</a></td><td align="left">#news:target</td><td align="left">选择当前活动的 #news 元素（单击包含该锚名称的 URL）。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_valid.asp">:valid</a></td><td align="left">input:valid</td><td align="left">选择所有具有有效值的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_visited.asp">:visited</a></td><td align="left">a:visited</td><td align="left">选择所有已访问的链接。</td></tr></tbody></table><h4 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h4><table><thead><tr><th>样式</th><th>说明</th></tr></thead><tbody><tr><td>a:link</td><td>选择所有未被访问过的链接</td></tr><tr><td>a:visited</td><td>选择所有已被访问的链接</td></tr><tr><td>a:hover</td><td>选择鼠标指针位于其上的链接</td></tr><tr><td>a:active</td><td>选择活动链接（鼠标按下未弹起的链接）</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-comment">/* 选择所有未被访问过的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<br>    <span class="hljs-attribute">color</span>: black;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br><br><span class="hljs-comment">/* 选择所有已被访问的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<br>    <span class="hljs-attribute">color</span>: blueviolet;<br>&#125;<br><br><span class="hljs-comment">/* 选择鼠标指针位于其上的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>&#125;<br><br><span class="hljs-comment">/* 选择活动链接（鼠标按下未弹起的链接） */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>    <span class="hljs-attribute">color</span>: green;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>为了确保生效，须按照LVHA的顺序声明：link、visited、hover、active</li><li>记忆：love hate</li><li>因a链接在浏览器中具有默认样式，所以再实际工作中都需要给链接单独指定样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 鼠标经过链接时，由原来的灰色变为红色 */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: gray;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="focus伪类选择器"><a href="#focus伪类选择器" class="headerlink" title="focus伪类选择器"></a>focus伪类选择器</h4><p>:focus伪类选择器用于选取获得焦点的表单元素</p><p>焦点就是光标，一般情况下&lt;input&gt;类表单元素才能获取，因此这个选择器也<strong>主要针对表单元素</strong>来说</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">input:focus &#123;<br>    background-color: rgb(185, 179, 179);<br>    color: blue;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>:where</p><p>:has</p><p>:is</p><p>:not</p><h1 id="CSS3选择器"><a href="#CSS3选择器" class="headerlink" title="CSS3选择器"></a>CSS3选择器</h1><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><p>选取元素的一部分并设置其样式</p><table><thead><tr><th align="left">选择器</th><th align="left">例子</th><th align="left">例子描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_after.asp">::after</a></td><td align="left">p::after</td><td align="left">在每个 <p> 元素之后插入内容。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_before.asp">::before</a></td><td align="left">p::before</td><td align="left">在每个 <p> 元素之前插入内容。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-letter.asp">::first-letter</a></td><td align="left">p::first-letter</td><td align="left">选择每个 <p> 元素的首字母。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-line.asp">::first-line</a></td><td align="left">p::first-line</td><td align="left">选择每个 <p> 元素的首行。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_selection.asp">::selection</a></td><td align="left">p::selection</td><td align="left">选择用户选择的元素部分。</td></tr></tbody></table><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><table><thead><tr><th align="left">选择器</th><th align="left">例子</th><th align="left">例子描述</th></tr></thead><tbody><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute.asp"><em>attribute</em>]</a></td><td align="left">a[target]</td><td align="left">选择<a> 元素带有 target 属性的所有元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value.asp"><em>attribute</em>=<em>value</em>]</a></td><td align="left">a[target=_blank]</td><td align="left">选择<a> 元素带有 target=”_blank” 属性的所有元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value_contain.asp"><em>attribute</em>~=<em>value</em>]</a></td><td align="left">a[title~=flower]</td><td align="left">选择<a> 元素的 title 属性包含单词 “flower” 的所有元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value_start.asp"><em>attribute</em>|=<em>value</em>]</a></td><td align="left">a[lang|=en]</td><td align="left">选择<a> 元素的 lang 属性值以 “en” 开头的所有元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attr_begin.asp"><em>attribute</em>^=<em>value</em>]</a></td><td align="left">a[href^=”https”]</td><td align="left">选择其 href 属性值以 “https” 开头的每个 <a> 元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attr_end.asp"><em>attribute</em>$=<em>value</em>]</a></td><td align="left">a[href$=”.pdf”]</td><td align="left">选择其 href 属性以 “.pdf” 结尾的所有 <a> 元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attr_contain.asp"><em>attribute</em>*=<em>value</em>]</a></td><td align="left">a[href*=”w3school”]</td><td align="left">选择其 href 属性值包含子串 “w3school” 的每个 <a> 元素。</td></tr></tbody></table><h1 id="简单选择器"><a href="#简单选择器" class="headerlink" title="简单选择器"></a>简单选择器</h1><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>p.intro</td><td>选择 class=”intro” 的所有 <p> 元素。</td><td></td></tr><tr><td><a href="https://www.w3school.com.cn/cssref/selector_element_comma.asp"><em>element</em>,<em>element</em></a></td><td>div, p</td><td>选择所有 <div> 元素和所有 <p> 元素。</td></tr><tr><td><a href="https://www.w3school.com.cn/cssref/selector_element_element.asp"><em>element</em> <em>element</em></a></td><td>div p 后代选择器</td><td>选择 <div> 元素内的所有 <p> 元素。</td></tr><tr><td><a href="https://www.w3school.com.cn/cssref/selector_element_gt.asp"><em>element</em>&gt;<em>element</em></a></td><td>div &gt; p 子选择器</td><td>选择父元素是 <div> 的所有 <p> 元素。</td></tr><tr><td><a href="https://www.w3school.com.cn/cssref/selector_element_plus.asp"><em>element</em>+<em>element</em></a></td><td>div + p 相邻兄弟选择器</td><td>选择紧跟 <div> 元素的首个 <p> 元素。</td></tr><tr><td><a href="https://www.w3school.com.cn/cssref/selector_gen_sibling.asp"><em>element1</em>~<em>element2</em></a></td><td>p ~ ul 通用兄弟选择器</td><td>选择前面有 <p> 元素的每个 <ul> 元素。</td></tr></tbody></table><h3 id=""><a href="#" class="headerlink" title="*"></a>*</h3><h3 id="-1"><a href="#-1" class="headerlink" title="+"></a>+</h3><h3 id="-2"><a href="#-2" class="headerlink" title="~"></a>~</h3><h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS函数</title>
    <link href="/2022/10/29/02-CSS/CSS/CSS%E5%87%BD%E6%95%B0/"/>
    <url>/2022/10/29/02-CSS/CSS/CSS%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="css函数"><a href="#css函数" class="headerlink" title="css函数"></a>css函数</h1><h2 id="hsl-函数"><a href="#hsl-函数" class="headerlink" title="hsl() 函数"></a>hsl() 函数</h2><p>hsl() 函数使用色相、饱和度、亮度来定义颜色。</p><p>HSL 即色相、饱和度、亮度（英语：Hue, Saturation, Lightness）。</p><ul><li><strong>色相（H）</strong>是色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等。</li><li><strong>饱和度（S）</strong>取 0-100% 的数值，是指色彩的纯度，越高色彩越纯，低则逐渐变灰。</li><li><strong>亮度（L）</strong>，取 0-100%，增加亮度，颜色会向白色变化；减少亮度，颜色会向黑色变化。</li></ul><p>HSL 是一种将 RGB 色彩模型中的点在圆柱坐标系中的表示法。这两种表示法试图做到比基于笛卡尔坐标系的几何结构 RGB 更加直观。</p><p>支持版本：CSS3</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#p1</span> &#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">hsl</span>(<span class="hljs-number">120</span>,<span class="hljs-number">100%</span>,<span class="hljs-number">50%</span>);&#125; <span class="hljs-comment">/* 绿色 */</span><br><span class="hljs-selector-id">#p2</span> &#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">hsl</span>(<span class="hljs-number">120</span>,<span class="hljs-number">100%</span>,<span class="hljs-number">75%</span>);&#125; <span class="hljs-comment">/* 浅绿  */</span><br><span class="hljs-selector-id">#p3</span> &#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">hsl</span>(<span class="hljs-number">120</span>,<span class="hljs-number">100%</span>,<span class="hljs-number">25%</span>);&#125; <span class="hljs-comment">/* 暗绿  */</span><br><span class="hljs-selector-id">#p4</span> &#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">hsl</span>(<span class="hljs-number">120</span>,<span class="hljs-number">60%</span>,<span class="hljs-number">70%</span>);&#125; <span class="hljs-comment">/* 柔和的绿色 */</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>hue - 色相</em></td><td align="left">定义色相; (0 到 360) - 0 (或 360) 为红色, 120 为绿色, 240 为蓝色</td></tr><tr><td align="left"><em>saturation - 饱和度</em></td><td align="left">定义饱和度; 0% 为灰色， 100% 全色</td></tr><tr><td align="left"><em>lightness - 亮度</em></td><td align="left">定义亮度 0% 为暗, 50% 为普通, 100% 为白</td></tr></tbody></table><h2 id="calc-函数"><a href="#calc-函数" class="headerlink" title="calc()函数"></a>calc()函数</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: #<span class="hljs-number">#088</span>;<br>&#125;<br><br><span class="hljs-selector-class">.son</span> &#123;<br>    <span class="hljs-comment">/* 注意：表示孩子son一定比父级father的宽度少50px，且减号两边一定要有空格 */</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">50px</span>);<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter()函数"></a>filter()函数</h2><p>blur模糊处理，数值越大越模糊</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/tudou.jpg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;filter:blur(3px)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS变量</title>
    <link href="/2022/10/29/02-CSS/CSS/CSS%E5%8F%98%E9%87%8F/"/>
    <url>/2022/10/29/02-CSS/CSS/CSS%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS变量"><a href="#CSS变量" class="headerlink" title="CSS变量"></a>CSS变量</h1><p>声明一个自定义属性，属性名以两个减号(–)开始，属性值可以是任何有效的CSS值，并且这个属性和其他属性一样可以写在规则集之内</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--main-bg-color</span>: <span class="hljs-number">#C92E33</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>CSS变量定义在根伪类:root下，这样就可以在HTML文档的任何地方访问到它了。在使用CSS变量时，使用 <code>var()</code> 函数包裹所需变量的变量名即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--main-bg-color)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以在媒体查询中重新设置变量，这些重新设置的值可以在任何地方使用，这是预处理器变量无法实现的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--width</span>: <span class="hljs-number">25%</span>;<br>  <span class="hljs-attr">--margin</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">400px</span>) &#123;<br>  <span class="hljs-selector-pseudo">:root</span> &#123;<br>    <span class="hljs-attr">--width</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attr">--margin</span>: <span class="hljs-number">10px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>var() 还有第二个参数——备用值。在发现变量值不可访问的情况下，将使用备用值来代替它</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--main-bg-color, red);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CSS全局变量"><a href="#CSS全局变量" class="headerlink" title="CSS全局变量"></a>CSS全局变量</h2><p>要在全局范围内声明变量，就要将变量定义在 :root 选择器中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--primary-color</span>: <span class="hljs-number">#000</span>;<br>&#125;<br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--primary-color);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CSS局部变量"><a href="#CSS局部变量" class="headerlink" title="CSS局部变量"></a>CSS局部变量</h2><p>在局部范围声明变量，只需要在选择器中定义变量即可，这样声明的变量只能在该选择器中使用，如果尝试在其他地方使用，它不会有任何效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attr">--h2-color</span>: <span class="hljs-number">#999</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--h2-color);<br>&#125;<br><span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--h2-color);  <span class="hljs-comment">/* 不生效 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h2><p>CSS变量和JavaScript变量类似，CSS 变量中的局部作用域优先于全局作用域</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--color</span>: red;<br>&#125;<br><span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attr">--color</span>: orange;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里<code>&lt;h2&gt;</code> 标签的内容将是橙色的，因为局部变量的优先级比全局变量的优先级更高</p><h2 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h2><p>下面的<code>&lt;h2&gt;</code> 标签的内容也将是橙色的，因为<code>&lt;h2&gt;</code>在其选择器中没有找到 –color 变量，所以就会在其父级逐级往上查找这个变量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--color</span>: red;<br>&#125;<br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attr">--color</span>: orange;<br>&#125;<br><span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>CSS变量区分大小</p></li><li><p>避免循环依赖，页面将无法加载，如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attr">--variable_name_1</span> : <span class="hljs-built_in">var</span>(variable_name_2, fallback);<br><span class="hljs-attr">--variable_name_2</span> : <span class="hljs-built_in">var</span>(variable_name_1, fallback);<br></code></pre></td></tr></table></figure></li><li><p>CSS 变量不能是属性名</p></li></ol><h2 id="在-JavaScript-中使用"><a href="#在-JavaScript-中使用" class="headerlink" title="在 JavaScript 中使用"></a>在 JavaScript 中使用</h2><p>使用 CSS 变量的一大好处就是可以在 JavaScript 中访问它。</p><ol><li>内联样式中设置 CSS 变量：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;--color: red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以通过以下代码来<strong>获取变量值</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取 &lt;p&gt; 元素</span><br><span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br><span class="hljs-comment">// 检索CSS变量 --color </span><br>element.<span class="hljs-property">style</span>.<span class="hljs-title function_">getPropertyValue</span>(<span class="hljs-string">&#x27;--color&#x27;</span>); <span class="hljs-comment">// &#x27;red&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>如果在CSS文件中设置CSS变量：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attr">--color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>就需要通过以下形式来<strong>获取变量值</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取 &lt;p&gt; 元素</span><br><span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br><span class="hljs-comment">// 获取CSS变量 --color </span><br><span class="hljs-title function_">getComputedStyle</span>(element).<span class="hljs-title function_">getPropertyValue</span>(<span class="hljs-string">&#x27;--color&#x27;</span>); <span class="hljs-comment">// &#x27;red&#x27;</span><br></code></pre></td></tr></table></figure><p>当然也可以使用这种形式来获取变量值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;p style=<span class="hljs-string">&quot;--color: red&quot;</span>&gt;&lt;/p&gt;<br><span class="hljs-comment">// 获取 &lt;p&gt; 元素</span><br><span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br><span class="hljs-comment">// 获取CSS变量 --color</span><br><span class="hljs-title function_">getComputedStyle</span>(element).<span class="hljs-title function_">getPropertyValue</span>(<span class="hljs-string">&#x27;--color&#x27;</span>); <span class="hljs-comment">// &#x27;red&#x27;</span><br></code></pre></td></tr></table></figure><p>可以通过以下形式使用JavaScript来<strong>设置CSS变量</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取 &lt;p&gt; 元素</span><br><span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br><span class="hljs-comment">// 将 --color 变量设置为 blue </span><br>element.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--color&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="CSS变量与字符串拼接"><a href="#CSS变量与字符串拼接" class="headerlink" title="CSS变量与字符串拼接"></a>CSS变量与字符串拼接</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--block-width</span>: <span class="hljs-number">80</span>;<br>  <span class="hljs-attr">--block-height</span>: <span class="hljs-number">80</span>;<br>&#125;<br><br><span class="hljs-selector-class">.block</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-built_in">var</span>(--block-width) *<span class="hljs-number">1px</span>);<br>  <span class="hljs-attribute">height</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-built_in">var</span>(--block-height) *<span class="hljs-number">1px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>由此就可以将 80 变为 80px，为css变量加上单位</li></ul>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SEO</title>
    <link href="/2022/10/29/01-HTML/HTML/SEO/"/>
    <url>/2022/10/29/01-HTML/HTML/SEO/</url>
    
    <content type="html"><![CDATA[<h1 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h1><p>参考： <a href="https://www.isolves.com/it/wlyx/SEO/2022-07-20/58246.html">https://www.isolves.com/it/wlyx/SEO/2022-07-20/58246.html</a></p><p>meta可用于搜索引擎优化（seo)，定义页面使用语言，自动刷新并指向新的页面，实现网页转换时的动态效果，控制页面缓冲，网页定级评价，控制网页显示的窗口等</p><h2 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h2><p>name属性主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</p><p>meta标签的name属性语法格式是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;参数&quot;</span><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;具体的参数值&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="name属性的参数"><a href="#name属性的参数" class="headerlink" title="name属性的参数"></a>name属性的参数</h3><h4 id="Keywords"><a href="#Keywords" class="headerlink" title="Keywords"></a>Keywords</h4><p>Keywords用来告诉搜索引擎你的网页的关键字是什么</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;网上购物,网上商城,家电,手机,电脑,服装,居家,母婴,美妆,个护,食品,生鲜,京东&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="description"><a href="#description" class="headerlink" title="description"></a>description</h4><p>description用来告诉搜索引擎你的网站主要内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;京东JD.COM-专业的综合网上购物商城，为您提供正品低价的购物选择、优质便捷的服务体验。商品来自全球数十万品牌商家，囊括家电、手机、电脑、服装、居家、母婴、美妆、个护、食品、生鲜等丰富品类，满足各种购物需求。&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h4><p>robots用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引</p><p>content得参数有all,none,index,noindex,follow,nofollow。默认是all</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;robots&quot;</span><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>信息参数为all：文件将被检索，且页面上的链接可以被查询；</p><p>信息参数为none：文件将不被检索，且页面上的链接不可以被查询；</p><p>信息参数为index：文件将被检索；</p><p>信息参数为follow：页面上的链接可以被查询；</p><p>信息参数为noindex：文件将不被检索，但页面上的链接可以被查询；</p><p>信息参数为nofollow：文件将被检索，但页面上的链接不可以被查询；</p><h4 id="viewpoint"><a href="#viewpoint" class="headerlink" title="viewpoint"></a>viewpoint</h4><p>webkit内核中的私有的meta标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”viewport”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”width</span>=<span class="hljs-string">device-width,</span> <span class="hljs-attr">initial-scale</span>=<span class="hljs-string">1.0,</span> <span class="hljs-attr">maximum-scale</span>=<span class="hljs-string">1.0,</span> <span class="hljs-attr">user-scalable</span>=<span class="hljs-string">0;”</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>强制让文档的宽度与设备的宽度保持1:1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览；</p><h4 id="theme-color"><a href="#theme-color" class="headerlink" title="theme-color"></a>theme-color</h4><p>定义页面的主题颜色 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;theme-color&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="author"><a href="#author" class="headerlink" title="author"></a>author</h4><p>说明：标注网页的作者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;root,root@xxxx.com&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;generator&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;信息参数&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>meta标签的generator的信息参数，代表说明网站采用的什么软件制作。</p><h4 id="COPYRIGHT"><a href="#COPYRIGHT" class="headerlink" title="COPYRIGHT"></a>COPYRIGHT</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">META</span> <span class="hljs-attr">NAME</span>=<span class="hljs-string">&quot;COPYRIGHT&quot;</span> <span class="hljs-attr">CONTENT</span>=<span class="hljs-string">&quot;信息参数&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>meta标签的COPYRIGHT的信息参数，代表说明网站版权信息。</p><h4 id="revisit-after"><a href="#revisit-after" class="headerlink" title="revisit-after"></a>revisit-after</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">META</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;revisit-after&quot;</span> <span class="hljs-attr">CONTENT</span>=<span class="hljs-string">&quot;7days&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>revisit-after代表网站重访,7days代表7天，依此类推。</p><h2 id="http-equiv属性"><a href="#http-equiv属性" class="headerlink" title="http-equiv属性"></a>http-equiv属性</h2><h3 id="http-equiv属性参数"><a href="#http-equiv属性参数" class="headerlink" title="http-equiv属性参数"></a>http-equiv属性参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge,chrome=1&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>这是个是IE8的专用标记,用来指定IE8浏览器去模拟某个特定版本的IE浏览器的渲染方式（比如IE6），以此来解决部分兼容问题</p><p>例如模拟IE7的具体方式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt; meta http-equiv = &quot;X-UA-Compatible&quot; content =&quot;IE=EmulateIE7&quot; /&gt;<br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf8&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&#x27;1&#x27;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;renderer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;webkit&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>01-HTML</category>
      
      <category>HTML</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Less</title>
    <link href="/2022/10/17/02-CSS/LESS/Less/"/>
    <url>/2022/10/17/02-CSS/LESS/Less/</url>
    
    <content type="html"><![CDATA[<h1 id="Less变量"><a href="#Less变量" class="headerlink" title="Less变量"></a>Less变量</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@width:</span> <span class="hljs-number">10px</span>;<br><span class="hljs-variable">@height:</span> <span class="hljs-variable">@width</span> + <span class="hljs-number">10px</span>;<br><br><span class="hljs-selector-id">#header</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-variable">@width</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-variable">@height</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#header</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：less变量编译后不会转为css变量，因此直接通过less变量动态改变主题颜色，是无法生效的。徐奥借助css变量</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@background-color:</span> <span class="hljs-built_in">var</span>(--background-color, <span class="hljs-number">#000</span>);<br></code></pre></td></tr></table></figure><ul><li>当css变量的var有两个参数时，第二个参数是在第一个参数不可用的情况下的备用值</li><li>因此可以将第二个参数的值作为默认值（此时可以暂不定义第一个参数），在需要改变主题颜色时，再定义第一个参数，那么less变量就可以取到第一个参数的值</li></ul><h1 id="Mixins混入"><a href="#Mixins混入" class="headerlink" title="Mixins混入"></a>Mixins混入</h1><p>参考：<a href="https://less.bootcss.com/features/#mixins">https://less.bootcss.com/features/#mixins</a></p><p>混入样式</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.a</span>, <span class="hljs-selector-id">#b</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.mixin-class</span> &#123;<br>  <span class="hljs-selector-class">.a</span>();<br>&#125;<br><span class="hljs-selector-class">.mixin-id</span> &#123;<br>  <span class="hljs-selector-id">#b</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.a</span>, <span class="hljs-selector-id">#b</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.mixin-class</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.mixin-id</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>如果你不想mixins样式出现在编译结果中，加上（）</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.my-mixin</span> &#123;<br>  <span class="hljs-attribute">color</span>: black;<br>&#125;<br><span class="hljs-selector-class">.my-other-mixin</span>() &#123;<br>  <span class="hljs-attribute">background</span>: white;<br>&#125;<br><span class="hljs-selector-class">.class</span> &#123;<br>  <span class="hljs-selector-class">.my-mixin</span>();<br>  <span class="hljs-selector-class">.my-other-mixin</span>();<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.my-mixin</span> &#123;<br>  <span class="hljs-attribute">color</span>: black;<br>&#125;<br><span class="hljs-selector-class">.class</span> &#123;<br>  <span class="hljs-attribute">color</span>: black;<br>  <span class="hljs-attribute">background</span>: white;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>mixin里面能包含选择器</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.my-hover-mixin</span>() &#123;<br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  &#125;<br>&#125;<br><span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-selector-class">.my-hover-mixin</span>();<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="Namespaces"><a href="#Namespaces" class="headerlink" title="Namespaces"></a>Namespaces</h2><p>可以把多个混入样式堆叠平放一起，然后用个命名空间包裹</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#outer</span>() &#123;<br>  <span class="hljs-selector-class">.inner</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.c</span> &#123;<br>  <span class="hljs-selector-id">#outer</span> &gt; <span class="hljs-selector-class">.inner</span>();<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>使用方式有下面几种</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// all do the same thing</span><br><span class="hljs-selector-id">#outer</span> &gt; <span class="hljs-selector-class">.inner</span>();<br><span class="hljs-selector-id">#outer</span> <span class="hljs-selector-class">.inner</span>();<br><span class="hljs-selector-id">#outer</span><span class="hljs-selector-class">.inner</span>();<br>复制代码<br></code></pre></td></tr></table></figure><p>对mixin命名空间可以减少与其他库mixin或用户mixin的冲突，它也可以成为“组织”mixin组的一种方式。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#my-library</span> &#123;<br>  <span class="hljs-selector-class">.my-mixin</span>() &#123;<br>    <span class="hljs-attribute">color</span>: black;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// which can be used like this</span><br><span class="hljs-selector-class">.class</span> &#123;<br>  <span class="hljs-selector-id">#my-library</span><span class="hljs-selector-class">.my-mixin</span>();<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="守卫when"><a href="#守卫when" class="headerlink" title="守卫when"></a>守卫when</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#namespace</span> <span class="hljs-keyword">when</span> (<span class="hljs-variable">@mode</span> = huge) &#123;<br>  <span class="hljs-selector-class">.mixin</span>() &#123; <span class="hljs-comment">/* */</span> &#125;<br>&#125;<br><br><span class="hljs-selector-id">#namespace</span> &#123;<br>  <span class="hljs-selector-class">.mixin</span>() <span class="hljs-keyword">when</span> (<span class="hljs-variable">@mode</span> = huge) &#123; <span class="hljs-comment">/* */</span> &#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>如果@mode = hug 为false，则mixin不会生效，以上两个编译后是一样的</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino">#<span class="hljs-function">sp_1 <span class="hljs-title">when</span> <span class="hljs-params">(<span class="hljs-keyword">default</span>())</span> </span>&#123;<br>  #<span class="hljs-function">sp_2 <span class="hljs-title">when</span> <span class="hljs-params">(<span class="hljs-keyword">default</span>())</span> </span>&#123;<br>    .<span class="hljs-built_in">mixin</span>() <span class="hljs-function">when <span class="hljs-title">not</span><span class="hljs-params">(<span class="hljs-keyword">default</span>())</span> </span>&#123; <span class="hljs-comment">/* */</span> &#125;<br>  &#125;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>defalut（）为假值</p><h2 id="important"><a href="#important" class="headerlink" title="!important"></a><code>!important</code></h2><p>mixin后添加该关键字会给mixin里的所有添加该关键字</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.foo</span> (<span class="hljs-variable">@bg</span>: <span class="hljs-number">#f5f5f5</span>, <span class="hljs-variable">@color</span>: <span class="hljs-number">#900</span>) &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-variable">@bg</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">@color</span>;<br>&#125;<br><span class="hljs-selector-class">.unimportant</span> &#123;<br>  <span class="hljs-selector-class">.foo</span>();<br>&#125;<br><span class="hljs-selector-class">.important</span> &#123;<br>  <span class="hljs-selector-class">.foo</span>() !important;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.unimportant</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f5f5f5</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#900</span>;<br>&#125;<br><span class="hljs-selector-class">.important</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f5f5f5</span> <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#900</span> <span class="hljs-meta">!important</span>;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="带参数的mixin"><a href="#带参数的mixin" class="headerlink" title="带参数的mixin"></a>带参数的mixin</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.border-radius</span>(<span class="hljs-variable">@radius</span>) &#123;<br>  -webkit-<span class="hljs-attribute">border-radius</span>: <span class="hljs-variable">@radius</span>;<br>     -moz-<span class="hljs-attribute">border-radius</span>: <span class="hljs-variable">@radius</span>;<br>          <span class="hljs-attribute">border-radius</span>: <span class="hljs-variable">@radius</span>;<br>&#125;<br><span class="hljs-selector-id">#header</span> &#123;<br>  <span class="hljs-selector-class">.border-radius</span>(<span class="hljs-number">4px</span>);<br>&#125;<br><span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-selector-class">.border-radius</span>(<span class="hljs-number">6px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以设置默认值</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.border-radius</span>(<span class="hljs-variable">@radius</span>: <span class="hljs-number">5px</span>) &#123;<br>  -webkit-<span class="hljs-attribute">border-radius</span>: <span class="hljs-variable">@radius</span>;<br>     -moz-<span class="hljs-attribute">border-radius</span>: <span class="hljs-variable">@radius</span>;<br>          <span class="hljs-attribute">border-radius</span>: <span class="hljs-variable">@radius</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>多个参数用，或者；隔开，推荐；</p><p>使用逗号作为mixin分隔符使得不可能创建逗号分隔的css列表作为参数。</p><p>另一方面，如果编译器在mixin调用或声明中看到至少一个分号，则它假定参数由分号分隔，所有逗号都属于css列表</p><ul><li>两个参数，每个参数包含逗号分隔的列表 <code>.name(1, 2, 3; something, else)</code></li><li>三个参数，每个参数包含一个数字 <code>.name(1, 2, 3)</code></li><li>使用伪分号创建mixin调用，其参数包含逗号分隔的css列表 <code>.name(1, 2, 3;)</code></li><li>逗号分隔的默认值 <code>.name(@param1: red, blue;)</code></li></ul><p>可以定义具有相同名称和不同和参数数量的混合，会编译所有能编译成功的mixin</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.mixin</span>(<span class="hljs-variable">@color</span>) &#123;<br>  <span class="hljs-attribute">color-1</span>: <span class="hljs-variable">@color</span>;<br>&#125;<br><span class="hljs-selector-class">.mixin</span>(<span class="hljs-variable">@color</span>; <span class="hljs-variable">@padding</span>: <span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-attribute">color-2</span>: <span class="hljs-variable">@color</span>;<br>  <span class="hljs-attribute">padding-2</span>: <span class="hljs-variable">@padding</span>;<br>&#125;<br><span class="hljs-selector-class">.mixin</span>(<span class="hljs-variable">@color</span>; <span class="hljs-variable">@padding</span>; <span class="hljs-variable">@margin</span>: <span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-attribute">color-3</span>: <span class="hljs-variable">@color</span>;<br>  <span class="hljs-attribute">padding-3</span>: <span class="hljs-variable">@padding</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-variable">@margin</span> <span class="hljs-variable">@margin</span> <span class="hljs-variable">@margin</span> <span class="hljs-variable">@margin</span>;<br>&#125;<br><span class="hljs-selector-class">.some</span> <span class="hljs-selector-class">.selector</span> <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-selector-class">.mixin</span>(<span class="hljs-number">#008000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>第二个mixin padding 没有默认值，所以编译失败，此时编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.some</span> <span class="hljs-selector-class">.selector</span> <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">color</span>-<span class="hljs-number">1</span>: <span class="hljs-number">#008000</span>;<br>  <span class="hljs-attribute">color</span>-<span class="hljs-number">2</span>: <span class="hljs-number">#008000</span>;<br>  <span class="hljs-attribute">padding</span>-<span class="hljs-number">2</span>: <span class="hljs-number">2</span>;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="具名参数"><a href="#具名参数" class="headerlink" title="具名参数"></a>具名参数</h3><p>mixin引用可以通过它们的名称提供参数值，而不仅仅是位置。任何参数都可以通过其名称引用，并且它们不必以任何特殊的顺序出现</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.mixin</span>(<span class="hljs-variable">@color</span>: black; <span class="hljs-variable">@margin</span>: <span class="hljs-number">10px</span>; <span class="hljs-variable">@padding</span>: <span class="hljs-number">20px</span>) &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">@color</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-variable">@margin</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-variable">@padding</span>;<br>&#125;<br><span class="hljs-selector-class">.class1</span> &#123;<br>  <span class="hljs-selector-class">.mixin</span>(<span class="hljs-variable">@margin</span>: <span class="hljs-number">20px</span>; <span class="hljs-variable">@color</span>: <span class="hljs-number">#33acfe</span>);<br>&#125;<br><span class="hljs-selector-class">.class2</span> &#123;<br>  <span class="hljs-selector-class">.mixin</span>(<span class="hljs-number">#efca44</span>; <span class="hljs-variable">@padding</span>: <span class="hljs-number">40px</span>);<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.class1</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#33acfe</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.class2</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#efca44</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">40px</span>;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="arguments-变量"><a href="#arguments-变量" class="headerlink" title="@arguments 变量"></a><code>@arguments</code> 变量</h3><p>@arguments表示传进来的所有参数</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.box-shadow</span>(<span class="hljs-variable">@x</span>: <span class="hljs-number">0</span>; <span class="hljs-variable">@y</span>: <span class="hljs-number">0</span>; <span class="hljs-variable">@blur</span>: <span class="hljs-number">1px</span>; <span class="hljs-variable">@color</span>: <span class="hljs-number">#000</span>) &#123;<br>  -webkit-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-variable">@arguments</span>;<br>     -moz-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-variable">@arguments</span>;<br>          <span class="hljs-attribute">box-shadow</span>: <span class="hljs-variable">@arguments</span>;<br>&#125;<br><span class="hljs-selector-class">.big-block</span> &#123;<br>  <span class="hljs-selector-class">.box-shadow</span>(<span class="hljs-number">2px</span>; <span class="hljs-number">5px</span>);<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.big-block</span> &#123;<br>  -webkit-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">2px</span> <span class="hljs-number">5px</span> <span class="hljs-number">1px</span> <span class="hljs-number">#000</span>;<br>     -moz-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">2px</span> <span class="hljs-number">5px</span> <span class="hljs-number">1px</span> <span class="hljs-number">#000</span>;<br>          <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">2px</span> <span class="hljs-number">5px</span> <span class="hljs-number">1px</span> <span class="hljs-number">#000</span>;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><h3 id="高级参数和rest变量"><a href="#高级参数和rest变量" class="headerlink" title="高级参数和rest变量"></a>高级参数和rest变量</h3><p>如果您想要mixin接受可变数量的参数，使用…或者@rest</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.mixin</span>(...) &#123;        <span class="hljs-comment">// matches 0-N arguments</span><br><span class="hljs-selector-class">.mixin</span>() &#123;           <span class="hljs-comment">// matches exactly 0 arguments</span><br><span class="hljs-selector-class">.mixin</span>(<span class="hljs-variable">@a</span>: <span class="hljs-number">1</span>) &#123;      <span class="hljs-comment">// matches 0-1 arguments</span><br><span class="hljs-selector-class">.mixin</span>(<span class="hljs-variable">@a</span>: <span class="hljs-number">1</span>; ...) &#123; <span class="hljs-comment">// matches 0-N arguments</span><br><span class="hljs-selector-class">.mixin</span>(<span class="hljs-variable">@a</span>; ...) &#123;    <span class="hljs-comment">// matches 1-N arguments</span><br><span class="hljs-selector-class">.mixin</span>(<span class="hljs-variable">@a</span>; <span class="hljs-variable">@rest</span>...) &#123;<br>   <span class="hljs-comment">// @rest is bound to arguments after @a</span><br>   <span class="hljs-comment">// @arguments is bound to all arguments</span><br>&#125;<br></code></pre></td></tr></table></figure><p>作者：白夜追胸<br>链接：<a href="https://juejin.cn/post/6844904050987630605">https://juejin.cn/post/6844904050987630605</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h1 id="循环的使用"><a href="#循环的使用" class="headerlink" title="循环的使用"></a>循环的使用</h1><p>在 Less 中，混合可以调用它自身，当一个混合递归调用自身，再结合 guard 守卫表达式和模式匹配这两个特性，就可以写出循环结构。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.loop</span>(<span class="hljs-variable">@i</span>) <span class="hljs-keyword">when</span> (<span class="hljs-variable">@i</span> &gt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-selector-class">.loop</span>((<span class="hljs-variable">@i</span> - <span class="hljs-number">1</span>));    <span class="hljs-comment">// 递归调用自身</span><br>   <span class="hljs-attribute">padding</span>: (<span class="hljs-number">10px</span> + <span class="hljs-number">5</span> * <span class="hljs-variable">@i</span>); <br> &#125;<br> <br><span class="hljs-selector-class">.call</span>&#123;<br>   <span class="hljs-selector-class">.loop</span>(<span class="hljs-number">4</span>); <span class="hljs-comment">// 调用循环</span><br>&#125;<br></code></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.call</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">30px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>LESS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Echarts</title>
    <link href="/2022/10/12/05-Echarts/Echarts/"/>
    <url>/2022/10/12/05-Echarts/Echarts/</url>
    
    <content type="html"><![CDATA[<h1 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h1><ol><li><p>主题的使用init初始化的时候 第二个参数指定主题</p></li><li><p>当屏幕大小发生变化时，需要手动的调用图表对象的resize 才能产生效果</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">chartInstance</span>.<span class="hljs-title function_">resize</span>()<br></code></pre></td></tr></table></figure><ol start="3"><li><p>坐标轴大小设置使用grid</p></li><li><p>渐变色的实现</p></li></ol><p><code>new this.$echarts.graphic.LinearGradient(x1, y1, x2, y2, [])</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">color</span>: <span class="hljs-keyword">new</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$echarts</span>.<span class="hljs-property">graphic</span>.<span class="hljs-title class_">LinearGradient</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, [<br>    &#123;<br>        <span class="hljs-attr">offset</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 开始的颜色</span><br>        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#5052EE&#x27;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">offset</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 结束的颜色</span><br>        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#AB6EE5&#x27;</span><br>    &#125;<br>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>05-Echarts</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vuex</title>
    <link href="/2022/09/29/04-VUE/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E6%8F%92%E4%BB%B6/vuex/Vuex/"/>
    <url>/2022/09/29/04-VUE/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E6%8F%92%E4%BB%B6/vuex/Vuex/</url>
    
    <content type="html"><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="Vuex是什么"><a href="#Vuex是什么" class="headerlink" title="Vuex是什么"></a>Vuex是什么</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化</p><h3 id="使用Vuex统一管理数据的好处"><a href="#使用Vuex统一管理数据的好处" class="headerlink" title="使用Vuex统一管理数据的好处"></a>使用Vuex统一管理数据的好处</h3><ol><li>能够在vuex中<strong>集中管理</strong>共享的数据，易于开发和后期维护</li><li>能够高效地实现组件之间的<strong>数据共享</strong>，提高开发效率</li><li>存储在vuex中的数据都是<strong>响应式</strong>的，能够实时保持数据与页面的同步</li></ol><h3 id="什么数据适合存储到Vuex中"><a href="#什么数据适合存储到Vuex中" class="headerlink" title="什么数据适合存储到Vuex中"></a>什么数据适合存储到Vuex中</h3><blockquote><p>一般只有组件之间共享的数据才有必要存储到vuex中，对于组件中私有的数据，依旧存储在组件自身的data中即可</p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>1、安装vuex依赖包</p><blockquote><p>npm install vuex –save</p></blockquote><p>2、导入vuex包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> ‘vuex’<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<span class="hljs-comment">// 添加为vue的组件</span><br></code></pre></td></tr></table></figure><p>3、创建store对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-comment">// state中存放的就是全局共享的数据</span><br>    <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>4、将store对象挂载到vue实例中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span>=&gt;</span><span class="hljs-title function_">h</span>(app),<br>    router,<br>    <span class="hljs-comment">// 将创建的共享数据对象挂载到vue实例中</span><br>    <span class="hljs-comment">// 所有的组件，就可以直接从 store 中获取全局的数据了</span><br>    store<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li>State</li><li>Mutation</li><li>Action</li><li>Getter</li></ul><p>![vuex](G:/学习/前端/01 笔记与练习/01 笔记/07 VUE2基础/vuex.png)</p><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>提供唯一的公共数据源，所有共享的数据都要统一放到Store的State中进行存储、</p><h4 id="创建State数据"><a href="#创建State数据" class="headerlink" title="创建State数据"></a>创建State数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建store数据源，提供唯一公共资源</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="访问State数据"><a href="#访问State数据" class="headerlink" title="访问State数据"></a>访问State数据</h4><p>组件访问State中数据方式：</p><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><blockquote><p>this.$store.state.全局数据名称</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;add-container&quot;&gt;<br>    &lt;h2&gt;加法&lt;/h2&gt;<br>&lt;!-- 组件访问state中的数据 --&gt;<br>    &lt;p&gt;当前最新的count的值是: &#123;&#123; $store.state.count &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;printCount&quot;&gt;打印count&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  methods: &#123;<br>    printCount() &#123;<br>      // 组件访问state中的数据<br>      console.log(this.$store.state.count);<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><blockquote><p>import { mapState } from ‘vuex’</p><p>computed: {</p><p>​    // 将全局数据映射为当前组建的计算属性</p><p>​    . . .mapState([‘count’])</p><p>}</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;sub-container&quot;&gt;<br>    &lt;h2&gt;减法&lt;/h2&gt;<br>    &lt;p&gt;当前最新的count的值是: &#123;&#123; count &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; mapState &#125; from &#x27;vuex&#x27;;<br>export default &#123;<br>  computed: &#123;<br>    ...mapState([&#x27;count&#x27;])<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><p>用于变更Store中的数据</p><ul><li>只能通过mutation变更Store数据，不可以直接操作Store中的数据</li><li>通过这种方式虽然操作起来稍微繁琐，但是可以集中监控所有数据的变化</li></ul><h4 id="定义Mutation"><a href="#定义Mutation" class="headerlink" title="定义Mutation"></a>定义Mutation</h4><p>在store/index.js文件中定义mutations</p><p>注意：传递参数 &amp; 没传参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;&#125;,<br>    <br>  <span class="hljs-comment">// mutations 用于操作数据</span><br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">count</span>++;<br>    &#125;,<br>    <span class="hljs-comment">// 传递参数 step</span><br>    <span class="hljs-title function_">addN</span>(<span class="hljs-params">state, step</span>) &#123;<br>      state.<span class="hljs-property">count</span> += step;<br>    &#125;<br>    <span class="hljs-title function_">sub</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">count</span>--;<br>    &#125;<br>  &#125;,<br>    <br>  <span class="hljs-attr">actions</span>: &#123;&#125;,<br>  <span class="hljs-attr">modules</span>: &#123;&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="触发Mutation"><a href="#触发Mutation" class="headerlink" title="触发Mutation"></a>触发Mutation</h4><h5 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h5><blockquote><p>没有传参时：this.$store.commit(‘mutations里面的函数名’)</p><p>传递参数时：this.$store.commit(‘mutations里面的函数名’, 参数)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;add-container&quot;&gt;<br>    &lt;h2&gt;加法&lt;/h2&gt;<br>    &lt;button @click=&quot;handle1&quot;&gt;+1&lt;/button&gt;<br>    &lt;button @click=&quot;handleN(3)&quot;&gt;+N&lt;/button&gt;<br>    &lt;p&gt;count: &#123;&#123; $store.state.count &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  methods: &#123;<br>    handle1() &#123;<br>      // commit的作用 就是调用某个 mutation 函数<br>      this.$store.commit(&#x27;add&#x27;);<br>    &#125;,<br>    handleN(step) &#123;<br>      // commit的第二个参数就是函数传递的参数<br>      this.$store.commit(&#x27;addN&#x27;, step);<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h5><blockquote><p>// 1. 从vuex中导入 mapMutations 函数</p><p><strong>import { mapMutations } from ‘vuex’</strong></p><p>methods: {</p><p>​    // 2. 将指定的 mutations 函数映射为当前组建的 methods 方法</p><p>​    <strong>. . .mapMutations([‘add’])</strong></p><p>}</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;add-container&quot;&gt;<br>    &lt;h2&gt;加法&lt;/h2&gt;<br>    &lt;button @click=&quot;add&quot;&gt;+1&lt;/button&gt;<br>    &lt;button @click=&quot;addN(3)&quot;&gt;+N&lt;/button&gt;<br>    &lt;!-- 组件访问state中的数据 --&gt;<br>    &lt;p&gt;count: &#123;&#123; $store.state.count &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; mapMutations &#125; from &#x27;vuex&#x27;;<br>export default &#123;<br>  methods: &#123;<br>    ...mapMutations([&#x27;add&#x27;, &#x27;addN&#x27;])<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>不要在 mutations 函数种，执行异步操作</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">state</span>) &#123;<br>        <span class="hljs-comment">// 定时器为异步操作</span><br>        <span class="hljs-comment">// setTimeout(() =&gt; &#123;</span><br>        <span class="hljs-comment">//     state.count++</span><br>        <span class="hljs-comment">// &#125;, 1000 )</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>要处理异步操作，应该再actions中</p><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>用于处理异步操作</p><p>在 actions 中，不能直接修改state中的数据，要通过触发mutations的方式间接变更数据</p><h4 id="定义Action"><a href="#定义Action" class="headerlink" title="定义Action"></a>定义Action</h4><blockquote><p>actions: {<br>    addAsync(<strong>context</strong>) {    // 没有参数时<br>        // <em>context可以理解为一个mini版的Store，里面包含了可能会用到的方法等</em><br>        setTimeout(() =&gt; {<br>            // <em>必须通过 context.commit() 触发某个mutation才行</em><br>            <strong>context.commit(‘add’);</strong><br>        }, 1000);<br>    }<br>},</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;&#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">count</span>++;<br>    &#125;,<br>    <span class="hljs-title function_">addN</span>(<span class="hljs-params">state, step</span>) &#123;<br>      state.<span class="hljs-property">count</span> += step;<br>    &#125;<br>  &#125;,<br>    <br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">// 1.没有参数时</span><br>    <span class="hljs-title function_">addAsync</span>(<span class="hljs-params">context</span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;add&#x27;</span>);<br>      &#125;, <span class="hljs-number">1000</span>);<br>    &#125;,<br>    <span class="hljs-comment">// 2. 携带参数时</span><br>    <span class="hljs-title function_">addNAsync</span>(<span class="hljs-params">context, step</span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addN&#x27;</span>, step);<br>      &#125;, <span class="hljs-number">1000</span>);<br>    &#125;<br>  &#125;,<br>    <br>  <span class="hljs-attr">modules</span>: &#123;&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="触发Action"><a href="#触发Action" class="headerlink" title="触发Action"></a>触发Action</h4><h5 id="方式一-2"><a href="#方式一-2" class="headerlink" title="方式一"></a>方式一</h5><blockquote><p>这里的 <strong>dispatch</strong> 函数，专门用来触发 action<br>没传参数时：this.$store.dispatch(‘actions里面函数名’);</p><p>传递参数时：this.$store.dispatch(‘actions里面的函数名’, 参数);</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;add-container&quot;&gt;<br>    &lt;h2&gt;加法&lt;/h2&gt;<br>    &lt;button @click=&quot;handleAsync&quot;&gt;+1 Async&lt;/button&gt;<br>    &lt;p&gt;当前最新的count的值是: &#123;&#123; $store.state.count &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  methods: &#123;<br>    // 1. 没有参数时<br>    handleAsync() &#123;<br>      // 这里的dispatch 函数，专门用来触发 action<br>      this.$store.dispatch(&#x27;addAsync&#x27;);<br>    &#125;,<br>    // 2. 传递参数时<br>    handleNAsync(step) &#123;<br>      this.$store.dispatch(&#x27;addNAsync&#x27;, step);<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="方式二-2"><a href="#方式二-2" class="headerlink" title="方式二"></a>方式二</h5><blockquote><p>// 1. 从vuex中导入 mapActions 函数</p><p><strong>import { mapActions } from ‘vuex’</strong></p><p>methods: {</p><p>​    // 2. 将指定的 actions 函数映射为当前组建的 methods 方法</p><p>​    <strong>. . .mapActions([‘addAsync’, ‘addNAsync’])</strong></p><p>}</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;add-container&quot;&gt;<br>    &lt;h2&gt;加法&lt;/h2&gt;<br>    &lt;button @click=&quot;addAsync&quot;&gt;+1 Async&lt;/button&gt;<br>    &lt;button @click=&quot;addNAsync(3)&quot;&gt;+N Async&lt;/button&gt;<br>    &lt;p&gt;当前最新的count的值是: &#123;&#123; $store.state.count &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; mapMutations, mapActions &#125; from &#x27;vuex&#x27;;<br>export default &#123;<br>  methods: &#123;<br>    ...mapActions([&#x27;addAsync&#x27;, &#x27;addNAsync&#x27;])<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><p>Getter用于对Store中的数据进行加工处理形成的新的数据</p><ul><li>Getter可以对Store中<strong>已有的数据</strong>加工处理之后形成新的数据，<strong>类似 Vue 的计算属性</strong></li><li>Store中的数据发生变化，Getter里面的数据也会跟着变化</li></ul><h4 id="定义Getter"><a href="#定义Getter" class="headerlink" title="定义Getter"></a>定义Getter</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 定义Getter  </span><br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">showCount</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> + <span class="hljs-string">&#x27;~~~&#x27;</span>;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;&#125;,<br>  <span class="hljs-attr">actions</span>: &#123;&#125;,<br>  <span class="hljs-attr">modules</span>: &#123;&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="使用Getter"><a href="#使用Getter" class="headerlink" title="使用Getter"></a>使用Getter</h4><h5 id="方式一-3"><a href="#方式一-3" class="headerlink" title="方式一"></a>方式一</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;h1&gt;App&lt;/h1&gt;<br>    &lt;!-- 方式1 --&gt;<br>    &lt;p&gt;&#123;&#123; $store.getters.showCount &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h5 id="方式二-3"><a href="#方式二-3" class="headerlink" title="方式二"></a>方式二</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;h1&gt;App&lt;/h1&gt;<br>    &lt;!-- 方式2 --&gt;<br>    &lt;p&gt;&#123;&#123; showCount &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; mapGetters &#125; from &#x27;vuex&#x27;;<br>export default &#123;<br>  name: &#x27;App&#x27;,<br>  computed: &#123;<br>    // 方式2<br>    ...mapGetters([&#x27;showCount&#x27;])<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="模块化-amp-命名空间"><a href="#模块化-amp-命名空间" class="headerlink" title="模块化&amp;命名空间"></a>模块化&amp;命名空间</h2><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>将同种逻辑的处理单独抽取出来放到一个文件里面，可以增加其复用性。如上面的加减操作可以抽取为一个单独的js文件 handle.js 。这个文件里面也需要包括四个部分：</p><ul><li>state</li><li>mutations</li><li>actions</li><li>getters</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// store/handle.js 文件内容</span><br><span class="hljs-keyword">const</span> handle =  &#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-comment">// console.log(&#x27;触发了mutations中的add&#x27;);</span><br>      <span class="hljs-comment">// console.log(state);</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;+1&#x27;</span>);<br>      state.<span class="hljs-property">count</span>++;<br>    &#125;,<br>    <span class="hljs-comment">// 传递参数 step</span><br>    <span class="hljs-title function_">addN</span>(<span class="hljs-params">state, step</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`+<span class="hljs-subst">$&#123;step&#125;</span>`</span>);<br>      state.<span class="hljs-property">count</span> += step;<br>    &#125;,<br>    <span class="hljs-title function_">sub</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;-1&#x27;</span>);<br>      state.<span class="hljs-property">count</span>--;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">// 在 actions 中，不能直径二修改state中的数据</span><br>    <span class="hljs-comment">// 必须通过 context.commit() 触发某个mutation才行</span><br>    <span class="hljs-title function_">addAsync</span>(<span class="hljs-params">context</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;触发了actions中的addAsync&#x27;</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(context); <span class="hljs-comment">// context可以理解为一个mini版的Store，里面包含了可能会用到的方法等</span><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;add&#x27;</span>);<br>      &#125;, <span class="hljs-number">1000</span>);<br>    &#125;,<br>    <span class="hljs-title function_">addNAsync</span>(<span class="hljs-params">context, step</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;触发了actions中的addNAsync&#x27;</span>);<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addN&#x27;</span>, step);<br>      &#125;, <span class="hljs-number">1000</span>);<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">showCount</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> + <span class="hljs-string">&#x27;~~~&#x27;</span>;<br>    &#125;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 最后将其暴露出去</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> handle;<br></code></pre></td></tr></table></figure><p>也可以直接写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">state</span>: &#123;&#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;&#125;,<br>    <span class="hljs-comment">// 等等。。。此处省略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后在store/index.js文件中导入使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-comment">// 导入</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Handle</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./handle.js&#x27;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;&#125;,<br>  <span class="hljs-attr">getters</span>: &#123;&#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;&#125;,<br>  <span class="hljs-attr">actions</span>: &#123;&#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-comment">// 使用</span><br>    <span class="hljs-attr">dataHandle</span>: <span class="hljs-title class_">Handle</span><br>    <span class="hljs-comment">// 若前后名称一样，可以省略，如：</span><br>    <span class="hljs-comment">// Handle: Handle 可以简写为 Handle</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><h4 id="开启命名空间"><a href="#开启命名空间" class="headerlink" title="开启命名空间"></a>开启命名空间</h4><p>当有多个这样的js文件时，就可以引起数据冲突，因此需要开启命名空间，由此即使出现函数名重叠，也不会引起冲突</p><blockquote><p>namespaced: true    // 开启命名空间</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">state</span>: &#123;&#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;&#125;,<br>    <span class="hljs-comment">// 等等。。。此处省略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="如何在组件中使用store中的数据？"><a href="#如何在组件中使用store中的数据？" class="headerlink" title="如何在组件中使用store中的数据？"></a>如何在组件中使用store中的数据？</h4><p>(下面的 dataHandle 是模块名称)</p><ol><li><p>组件中读取 <code>state</code> 数据（两种方式）</p><ul><li><p>this.$store.state.dataHandle.count</p></li><li><p>~~~js<br>computed: {<br>  …mapState(‘dataHandle’, [‘count’]),<br>}</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><br><span class="hljs-number">2.</span> 组件中读取 <span class="hljs-string">`getters`</span> 数据（两种方式）<br><br>   * this.$store.getters[<span class="hljs-string">&#x27;dataHandle/showCount&#x27;</span>]<br><br>   * ~~~js<br>     computed: &#123;<br>       ...mapGetters(<span class="hljs-string">&#x27;dataHandle&#x27;</span>, [<span class="hljs-string">&#x27;showCount&#x27;</span>])<br>     &#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>组件中触发 <code>mutations</code>（两种方式）</p><ul><li><p>this.$store.commit(‘dataHandle/add’, 参数)</p></li><li><p>~~~js<br>methods: {<br>  …mapMutations(‘dataHandle’, [‘sub’])<br> }</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><br><span class="hljs-number">4.</span> 组件中触发 <span class="hljs-string">`mutations`</span>（两种方式）<br><br>   * this.$store.dispatch(<span class="hljs-string">&#x27;dataHandle/add&#x27;</span>, 参数)<br><br>   * ~~~js<br>     methods: &#123;<br>       <span class="hljs-params">...</span>mapActions(<span class="hljs-string">&#x27;dataHandle&#x27;</span>, <span class="hljs-meta">[</span><span class="hljs-string">&#x27;addAsync&#x27;</span>, <span class="hljs-string">&#x27;addNAsync&#x27;</span><span class="hljs-meta">]</span>)<br>     &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><p>注意</p><ul><li>模块内部的 state 是局部的，只属于模块本身所有。</li><li>模块内部的 action、mutation 和 getter <strong>默认</strong>是注册在全局命名空间的</li><li>如果我们只想让他们在当前的模块中生效，应该怎么办呢？– 通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。</li><li>在模块内通过 rootState 可以拿到根模块中的数据</li></ul><h1 id="Vue3中的Vuex"><a href="#Vue3中的Vuex" class="headerlink" title="Vue3中的Vuex"></a>Vue3中的Vuex</h1><h2 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h2><table><thead><tr><th>区别</th><th>Vue2</th><th>Vue3</th></tr></thead><tbody><tr><td>创建仓库</td><td>new Vuex.Store({})</td><td>createStore({})</td></tr></tbody></table><ol><li><p>创建仓库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// store/index.js</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>将store对象挂载到vue实例中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span>;<br><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">use</span>(store).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);<br><br></code></pre></td></tr></table></figure></li><li><p>Vuex核心</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// store/index.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">person</span>: <span class="hljs-string">&#x27;xm&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">updateName</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">username</span> = <span class="hljs-string">&#x27;ls&#x27;</span>;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">updateNameAsync</span>(<span class="hljs-params">context</span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;updateName&#x27;</span>);<br>      &#125;, <span class="hljs-number">1000</span>);<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">getName</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">username</span> + <span class="hljs-string">&#x27;~~~&#x27;</span>;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;&#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>在组件中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;h1&gt;App&lt;/h1&gt;<br>    &lt;p&gt;&#123;&#123; $store.state.username &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;updateName&quot;&gt;更新名字&lt;/button&gt;<br>    &lt;button @click=&quot;updateNameAsync&quot;&gt;updateNameAsync&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 导入<br>import &#123; useStore &#125; from &#x27;vuex&#x27;;<br>export default &#123;<br>  name: &#x27;App&#x27;,<br>  setup() &#123;<br>    // 使用Vuex仓库<br>    const store = useStore();<br>    // 1. 使用 state 的数据<br>    console.log(store.state.username);<br>    // 2. 使用 getters 的数据<br>    console.log(store.getters.getName);<br>    const updateName = () =&gt; &#123;<br>      // 3. 触发 mutations <br>      store.commit(&#x27;updateName&#x27;);<br>    &#125;;<br>    const updateNameAsync = () =&gt; &#123;<br>      // 4. 触发 actions<br>      store.dispatch(&#x27;updateNameAsync&#x27;);<br>    &#125;;<br>    return &#123; updateName, updateNameAsync &#125;;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="模块化-1"><a href="#模块化-1" class="headerlink" title="模块化"></a>模块化</h2><p>分为两种情况：</p><ol><li><p>默认模块</p><p>此时，state 区分模块，其它的 getters mutations actions 都在全局</p></li><li><p>带有命名空间的模块</p><p>此时，所有功能区分模块，封装性和复用性更高</p></li></ol><p>模块化后，state尽量写成一个函数（类似vue3中的data一样）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-comment">// xxx</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><blockquote><p>目的：让在vuex中管理的状态数据同时存储在本地。可免去自己存储的环节</p></blockquote><ol><li><p>安装vuex的插件 <code>vuex-persistedstate</code> 来支持vuex的状态持久化</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i vuex-persistedstate<br></code></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">// 导入包</span><br>+<span class="hljs-keyword">import</span> createPersistedstate <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex-persistedstate&#x27;</span><br><br><span class="hljs-keyword">import</span> user <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/user&#x27;</span><br><span class="hljs-keyword">import</span> cart <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/cart&#x27;</span><br><span class="hljs-keyword">import</span> cart <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/category&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    user,<br>    cart,<br>    category<br>  &#125;,<br>  <span class="hljs-comment">// 配置插件</span><br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// 默认存储在localStorage</span><br>    <span class="hljs-title function_">createPersistedState</span>(&#123;<br>      <span class="hljs-comment">// 本地存储的名字</span><br>      <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;erabbit-client-pc-108-store&#x27;</span>,<br>      <span class="hljs-comment">// 指定需要存储的模块</span><br>      <span class="hljs-attr">paths</span>: [<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;cart&#x27;</span>]<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>默认存储在localStorage中</li><li>key是存储数据的键名</li><li>paths是存储state中的那些数据，如果是模块下具体的数据需要加上模块名称，如<code>user.token</code></li><li>修改state后触发才可以看到本地存储数据的的变化</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>04-VUE</category>
      
      <category>常用插件</category>
      
      <category>状态管理插件</category>
      
      <category>vuex</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>布局技术选型</title>
    <link href="/2022/09/28/02-CSS/CSS/%E5%B8%83%E5%B1%80/%E5%B8%83%E5%B1%80%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/"/>
    <url>/2022/09/28/02-CSS/CSS/%E5%B8%83%E5%B1%80/%E5%B8%83%E5%B1%80%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="移动端常见布局"><a href="#移动端常见布局" class="headerlink" title="移动端常见布局"></a>移动端常见布局</h1><h2 id="移动端技术选型"><a href="#移动端技术选型" class="headerlink" title="移动端技术选型"></a>移动端技术选型</h2><ul><li>单独制作移动端页面（主流）<ul><li>流式布局（百分比布局）</li><li>flex布局（推荐使用）</li><li>less+rem+媒体查询</li><li>混合布局</li></ul></li><li>响应式页面兼容移动端（其次）<ul><li>媒体查询</li><li>bootstrap</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>02-CSS</category>
      
      <category>CSS</category>
      
      <category>布局</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面试题知识点</title>
    <link href="/2022/09/27/12-%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2022/09/27/12-%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>基础知识</p><h2 id="变量类型和计算"><a href="#变量类型和计算" class="headerlink" title="变量类型和计算"></a>变量类型和计算</h2><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol><li>typeof能判断哪些类型</li><li>何时使用 === 何时使用 ==</li><li>值类型和引用类型的区别</li><li>手写深拷贝</li></ol><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol><li>值类型 VS 引用类型，堆栈模型，深拷贝</li><li>typeof运算符</li><li>类型转换，truly和false变量</li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>JavaScript 中共有 6 种基本数据类型</p><blockquote><p>Undefined、Null、Boolean、Number、String、Symbol (new in ES 6) </p><p><strong>基本数据类型的值是按值访问的</strong></p></blockquote><ul><li><p>基本类型的值是不可变的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;123hello321&quot;</span>;<br>str.<span class="hljs-title function_">toUpperCase</span>();     <span class="hljs-comment">// 123HELLO321</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);      <span class="hljs-comment">// 123hello321</span><br></code></pre></td></tr></table></figure></li><li><p>基本类型的比较是它们的值的比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-literal">true</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a == b);    <span class="hljs-comment">// true 进行值的比较</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a === b);   <span class="hljs-comment">// false 不仅进行值的比较，还要进行数据类型的比较</span><br></code></pre></td></tr></table></figure></li><li><p>基本类型的变量是存放在栈内存（Stack）里的</p></li></ul><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>除了基本数据类型外，剩下的就是引用类型，统称为 Object 类型。具体有：</p><blockquote><p>Object 类型、Array 类型、Date 类型、RegExp 类型、Function 类型 等</p><p>null属于特殊引用类型</p><p><strong>引用类型的值是按引用访问的</strong></p></blockquote><ul><li><p>引用类型的值是可变的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zyj&quot;</span>&#125;;   <span class="hljs-comment">// 创建一个对象</span><br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;percy&quot;</span>;       <span class="hljs-comment">// 改变 name 属性的值</span><br>obj.<span class="hljs-property">age</span> = <span class="hljs-number">21</span>;             <span class="hljs-comment">// 添加 age 属性</span><br>obj.<span class="hljs-property">giveMeAll</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; : &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>;<br>&#125;;                        <span class="hljs-comment">// 添加 giveMeAll 方法</span><br>obj.<span class="hljs-title function_">giveMeAll</span>();<br></code></pre></td></tr></table></figure></li><li><p>引用类型的比较是引用的比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;&#125;;    <span class="hljs-comment">// 新建一个空对象 obj1</span><br><span class="hljs-keyword">var</span> obj2 = &#123;&#125;;    <span class="hljs-comment">// 新建一个空对象 obj2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1 == obj2);    <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1 === obj2);   <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>因为 obj1 和 obj2 分别引用的是存放在堆内存中的2个不同的对象，故变量 obj1 和 obj2 的值（引用地址）也是不一样的！</p></li><li><p>引用类型的值是保存在堆内存（Heap）中的对象（Object）<br>与其他编程语言不同，JavaScript 不能直接操作对象的内存空间（堆内存）</p><ul><li><p>栈内存中保存了变量标识符和指向堆内存中该对象的指针</p></li><li><p>堆内存中保存了对象的内容</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2022-09-15_16-57-06.jpg" alt="Snipaste_2022-09-15_16-57-06" style="zoom:50%;" /></li></ul></li></ul><h4 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h4><h5 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h5><blockquote><p>typeof：经常用来检测一个变量是不是最基本的数据类型</p><p>还可以检测是否为函数、是否为引用类型（具体哪种引用类型不能判断）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a;<br><span class="hljs-keyword">typeof</span> a;    <span class="hljs-comment">// undefined</span><br><br>a = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">typeof</span> a;    <span class="hljs-comment">// object (2)这是官方承认的 typeof 的错误。null 绝对不是一个 object。null 有自己的类型，它是一个特殊值。typeof 的行为在这里是错误的</span><br><br>a = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">typeof</span> a;    <span class="hljs-comment">// boolean</span><br><br>a = <span class="hljs-number">666</span>;<br><span class="hljs-keyword">typeof</span> a;    <span class="hljs-comment">// number </span><br><br>a = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">typeof</span> a;    <span class="hljs-comment">// string</span><br><br>a = <span class="hljs-title class_">Symbol</span>();<br><span class="hljs-keyword">typeof</span> a;    <span class="hljs-comment">// symbol</span><br><br>a = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br><span class="hljs-keyword">typeof</span> a;    <span class="hljs-comment">// function</span><br><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">10n</span> <span class="hljs-comment">// &quot;bigint&quot;   BigInt 用于任意长度的整数,尾部的 &quot;n&quot; 表示这是一个 BigInt 类型</span><br><span class="hljs-keyword">typeof</span> alert <span class="hljs-comment">// &quot;function&quot;  (3)</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Math</span> <span class="hljs-comment">// &quot;object&quot;  (1)Math 是一个提供数学运算的内建 object</span><br><br><span class="hljs-comment">/* 只能判断时 object 类型，具体哪种无法判断 */</span><br>a = [];<br><span class="hljs-keyword">typeof</span> a;    <span class="hljs-comment">// object</span><br>a = &#123;&#125;;<br><span class="hljs-keyword">typeof</span> a;    <span class="hljs-comment">// object</span><br>a = <span class="hljs-regexp">/aaa/g</span>;<br><span class="hljs-keyword">typeof</span> a;    <span class="hljs-comment">// object   </span><br></code></pre></td></tr></table></figure><p>补充：</p><ul><li><p>“symbol” 值表示唯一的标识符。</p><ul><li><p>可以使用 <code>Symbol()</code> 来创建这种类型的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> id = <span class="hljs-title class_">Symbol</span>();<br><br><span class="hljs-comment">// id 是描述为 &quot;id&quot; 的 symbol</span><br><span class="hljs-keyword">let</span> id = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;id&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>symbol 保证是唯一的。即使我们创建了许多具有相同描述的 symbol，它们的值也是不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> id1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;id&quot;</span>);<br><span class="hljs-keyword">let</span> id2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;id&quot;</span>);<br><br><span class="hljs-title function_">alert</span>(id1 == id2); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>(obj intanceof Array) 判断obj是否为数组</p><p>obj.hasOwnProperty(key)</p></li></ul><h5 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h5><blockquote><p>instanceof：用来判断某个构造函数的 prototype 属性所指向的对象<strong>是否存在</strong>于另外一个<strong>要检测对象的原型链</strong>上</p></blockquote><p>简单说就是判断一个引用类型的变量具体是不是某种类型的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">(&#123;&#125;) <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>              <span class="hljs-comment">// true</span><br>([]) <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>               <span class="hljs-comment">// true</span><br>(<span class="hljs-regexp">/aa/g</span>) <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">RegExp</span>           <span class="hljs-comment">// true</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;) <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h4><h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>浅拷贝：只拷贝一层，更深层次的对象级别只拷贝引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> oldObj = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kathy&#x27;</span>,<br>    <span class="hljs-attr">msg</span>: &#123;<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>        <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> newObj = &#123;&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> oldObj) &#123;<br>    newObj[k] = oldObj[k];<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;newObj1&#x27;</span>, newObj1);<br>newObj1.<span class="hljs-property">msg</span>.<span class="hljs-property">age</span> = <span class="hljs-number">20</span>;    <span class="hljs-comment">// 更改浅拷贝的对象里面复杂数据类型（引用类型）</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;oldObj&#x27;</span>, oldObj);<span class="hljs-comment">// 原来的对象也跟着改变</span><br></code></pre></td></tr></table></figure><h4 id="手写深拷贝"><a href="#手写深拷贝" class="headerlink" title="手写深拷贝"></a>手写深拷贝</h4><p>深拷贝后得到的对象发生变化不会影响原来的对象</p><ul><li>判断值类型和引用类型</li><li>判断时数组还是对象</li><li>递归</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepCopy</span>(<span class="hljs-params">newObj, oldObj</span>) &#123;<br>    <span class="hljs-keyword">for</span> (k <span class="hljs-keyword">in</span> oldObj) &#123;<br>        <span class="hljs-keyword">var</span> item = oldObj[k];<br>        <span class="hljs-keyword">if</span> (item <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>) &#123;<br>            <span class="hljs-comment">// item是数组类型，就需要继续遍历拷贝</span><br>            newObj[k] = [];<br>            <span class="hljs-title function_">deepCopy</span>(newObj[k], item);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>) &#123;<br>            <span class="hljs-comment">// item是对象类型，就需要继续遍历拷贝</span><br>            newObj[k] = &#123;&#125;;<br>            <span class="hljs-title function_">deepCopy</span>(newObj[k], item);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// item是值类型，直接赋值</span><br>            newObj[k] = item;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> oldObj = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kathy&#x27;</span>,<br>    <span class="hljs-attr">msg</span>: &#123;<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>        <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span><br>    &#125;，<br>    <span class="hljs-attr">arr</span>: [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>深拷贝除了使用上面的函数以外，还可以利用JSON</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> newObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(oldObj))<br></code></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="判断是否相等"><a href="#判断是否相等" class="headerlink" title="判断是否相等 =="></a>判断是否相等 ==</h4><ul><li><p>以下都是true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">100</span> == <span class="hljs-string">&#x27;100&#x27;</span><br><span class="hljs-number">0</span> == <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-number">0</span> == <span class="hljs-literal">false</span><br><span class="hljs-literal">false</span> == <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure></li><li><p>什么时候用 ==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 除了 == null 之外，其他都用 ===</span><br><span class="hljs-comment">// 例如：</span><br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span> &#125;<br><span class="hljs-keyword">if</span> (obj.<span class="hljs-property">a</span> == <span class="hljs-literal">null</span>) &#123;  &#125;<br><span class="hljs-comment">// obj.a == null相当于：</span><br><span class="hljs-comment">// obj.a === null || obj.a === undefined</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="与-truly变量与falsely变量"><a href="#与-truly变量与falsely变量" class="headerlink" title="!与!! truly变量与falsely变量"></a>!与!! truly变量与falsely变量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">!<span class="hljs-number">0</span><span class="hljs-comment">// true</span><br>!<span class="hljs-literal">null</span><span class="hljs-comment">// true</span><br>!<span class="hljs-literal">undefined</span><span class="hljs-comment">// true</span><br>!<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">// true</span><br>!<span class="hljs-title class_">NaN</span><span class="hljs-comment">// true</span><br>!<span class="hljs-literal">false</span><span class="hljs-comment">// true</span><br><br>!&#123;&#125;<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p><strong>falsely变量</strong>：即 !!a === false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 除了以下这些falsely变量，其他都是truly变量</span><br>!!<span class="hljs-number">0</span><span class="hljs-comment">// false</span><br>!!<span class="hljs-literal">null</span><span class="hljs-comment">// false</span><br>!!<span class="hljs-literal">undefined</span><span class="hljs-comment">// false</span><br>!!<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">// false</span><br>!!<span class="hljs-title class_">NaN</span><span class="hljs-comment">// false</span><br>!!<span class="hljs-literal">false</span><span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p><strong>truly变量</strong>：即 !!a === true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 例如：</span><br>!!&#123;&#125;<span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">const</span> num = <span class="hljs-number">100</span><br>num<span class="hljs-comment">// 100</span><br>!num<span class="hljs-comment">// false</span><br>!!num<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>if语句判断是否为truly变量、falsely变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (a) &#123;<br>    <span class="hljs-comment">// a为truly变量</span><br>    <span class="hljs-comment">// 执行...</span><br>&#125;<br><br><span class="hljs-keyword">const</span> b = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span> (b) &#123;<br>    <span class="hljs-comment">// b为falsely变量</span><br>    <span class="hljs-comment">// 不执行...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>逻辑判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-number">10</span> &amp;&amp; <span class="hljs-number">0</span>)<span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 10 为 truly变量，0为falsely变量</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-string">&#x27;abc&#x27;</span>)<span class="hljs-comment">// &#x27;abc&#x27;</span><br><span class="hljs-comment">// &#x27;&#x27; 为falsely变量，&#x27;abc&#x27;为truly变量</span><br></code></pre></td></tr></table></figure><h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><h3 id="内容概述"><a href="#内容概述" class="headerlink" title="内容概述"></a>内容概述</h3><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><ol><li><p>如何判断一个变量是否为数组？</p></li><li><p>手写一个jQuery，考虑插件和扩展性</p></li><li><p>class原型本质，怎么理解</p></li></ol><h4 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h4><ol><li>class和继承</li><li>类型判断instanceof</li><li>原型和原型链</li></ol><h3 id="class与继承"><a href="#class与继承" class="headerlink" title="class与继承"></a>class与继承</h3><p>继承 <code>extends</code> <code>super</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建类class，类名首字母大写</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125;<br>  <span class="hljs-title function_">eat</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> is eating`</span>);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 使用extends来继承。Student继承Person的属性和方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, gender, number</span>) &#123;<br>    <span class="hljs-comment">// 继承的属性，需要用super来继承</span><br>    <span class="hljs-variable language_">super</span>(name);<br>    <span class="hljs-comment">// gender和number是studen子类独有</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span> = number;<br>  &#125;<br>  <span class="hljs-comment">// 子类Student独有的方法</span><br>  <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`姓名：<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> 性别：<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.gender&#125;</span> 学号：<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.number&#125;</span> `</span>);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 使用extends来继承。Teacher继承Person的属性和方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, major</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(name);<br>    <span class="hljs-comment">// major属性是Teacher独有的属性</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">major</span> = major;<br>  &#125;<br>  <span class="hljs-comment">// 子类Teacher独有的方法</span><br>  <span class="hljs-title function_">teach</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>教授<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.major&#125;</span>`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-string">&#x27;02&#x27;</span>);<br>stu.<span class="hljs-title function_">eat</span>();<br>stu.<span class="hljs-title function_">sayHi</span>();<br><br><span class="hljs-keyword">const</span> wang = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&#x27;王老师&#x27;</span>, <span class="hljs-string">&#x27;语文&#x27;</span>);<br>wang.<span class="hljs-title function_">eat</span>();<br>wang.<span class="hljs-title function_">teach</span>();<br></code></pre></td></tr></table></figure><p>执行结果：</p><blockquote><p>小明 is eating<br>姓名：小明 性别：女 学号：02<br>王老师 is eating<br>王老师教授语文</p></blockquote><h3 id="类型判断instanceof"><a href="#类型判断instanceof" class="headerlink" title="类型判断instanceof"></a>类型判断instanceof</h3><p>检查<strong>一个对象</strong>是否属于某个特定的<strong>class</strong>。同时，它还<strong>考虑了继承</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// instanceof用于判断这个变量属于哪个类class</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Student</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>); <span class="hljs-comment">// true</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Student</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>); <span class="hljs-comment">// false</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>); <span class="hljs-comment">// true</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>显示原型（原型对象）—— prototype</p><p>隐式原型（对象原型）—— __proto__</p><ul><li><p>每个class都有显示原型prototype</p></li><li><p>每个实例都有隐式原型</p></li><li><p>实例的__proto__指向对应class的prototype</p><p>即 <code>Student.prototype === xiaoluo.__proto__</code>为true</p></li></ul><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/面试题知识点/image-20220803144026008.png" alt="image-20220803144026008" style="zoom:67%;" /><h4 id="基于原型的执行规则"><a href="#基于原型的执行规则" class="headerlink" title="基于原型的执行规则"></a>基于原型的执行规则</h4><p>获取属性 实例.属性名 或 执行 实例.方法() 时：</p><ul><li>先在自身属性和方法寻找</li><li>如果找不到自动去 __proto__ 中查找</li></ul><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><h4 id="原型链-1"><a href="#原型链-1" class="headerlink" title="原型链"></a>原型链</h4><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220803145801110.png" alt="image-20220803145801110"></p><ul><li><code>xiaoluo.__proto__ === Student.prototype </code> 为true</li><li><code>Student.prototype.__proto__ === People.prototype</code> 为true</li><li><code>People.prototype.__proto__ === Object.prototype</code> 为true</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 注意</span><br>xiaoming.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;name&#x27;</span>)<span class="hljs-comment">// true</span><br>xiaoming.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;sayHi&#x27;</span>)<span class="hljs-comment">// false</span><br>xiaoming.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;eat&#x27;</span>)<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="再看instanceof"><a href="#再看instanceof" class="headerlink" title="再看instanceof"></a>再看instanceof</h4><p>instanceof用于检查<strong>一个对象</strong>是否属于某个特定的<strong>class</strong>。同时，它还<strong>考虑了继承</strong></p><p>根据原型链来看，<code>实例 instanceof 原型链上的class</code> 都是true</p><h4 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h4><h5 id="1-判断是否为数组"><a href="#1-判断是否为数组" class="headerlink" title="1 判断是否为数组"></a>1 判断是否为数组</h5><p>如何判断一个变量是否为数组</p><blockquote><p>a instanceof Array</p></blockquote><h5 id="2-手写jQuery"><a href="#2-手写jQuery" class="headerlink" title="==2 手写jQuery=="></a>==2 手写jQuery==</h5><p>考虑插件和扩展性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">jQuery</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">selector</span>) &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(selector);<br>    <span class="hljs-keyword">const</span> length = result.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>      <span class="hljs-variable language_">this</span>[i] = result[i];<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> = length;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">selector</span> = selector;<br>  &#125;<br><br>  <span class="hljs-title function_">get</span>(<span class="hljs-params">index</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>[index];<br>  &#125;<br><br>  <span class="hljs-title function_">each</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">const</span> elem = <span class="hljs-variable language_">this</span>[i];<br>      <span class="hljs-title function_">fn</span>(elem);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">on</span>(<span class="hljs-params">type, fn</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">each</span>(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> &#123;<br>      elem.<span class="hljs-title function_">addEventListener</span>(type, fn, <span class="hljs-literal">false</span>);<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">// 扩展很多的 DOM API</span><br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-comment">// const $p = new jQuery(&#x27;p&#x27;);</span><br><span class="hljs-comment">// $p.get(1);</span><br><span class="hljs-comment">// $p.each(elem =&gt; console.log(elem.nodeName));</span><br><span class="hljs-comment">// $p.on(&#x27;click&#x27;, () =&gt; alert(&#x27;click&#x27;));</span><br><br></code></pre></td></tr></table></figure><h5 id="3-class原型本质"><a href="#3-class原型本质" class="headerlink" title="3 class原型本质"></a>3 class原型本质</h5><p>怎么理解class原型本质</p><ul><li>原型和原型链的图示</li><li>基于原型的执行规则</li></ul><h2 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h2><h3 id="内容概述-1"><a href="#内容概述-1" class="headerlink" title="内容概述"></a>内容概述</h3><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><ol><li>this的不同应用场景，如何取值？</li><li>手写bind函数</li><li>实际开发中闭包的应用场景，举例说明</li></ol><h4 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h4><ol><li>作用域和自由变量</li><li>闭包</li><li>this</li></ol><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>全局作用域</p><p>函数作用域</p><p>块级作用域（ES6新增）</p><h3 id="自由变量"><a href="#自由变量" class="headerlink" title="自由变量"></a>自由变量</h3><p>一个变量在当前作用域没有定义，但是被使用了；<strong>向上级作用域，一层一层依次寻找</strong>，直到找到为止；若到全局作用域都没有找到，则报错 xxx is not defined</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包：是作用域应用的特殊情况，闭包（closure) 指有权访问<u>另一个函数作用域</u>中的变量的<u>函数</u></p><p>简单理解：一个作用域可以访问另一个函数内部的局部变量</p><p>有两种表现：</p><h4 id="函数作为返回值被传递"><a href="#函数作为返回值被传递" class="headerlink" title="函数作为返回值被传递"></a><code>函数作为返回值</code>被传递</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数作为返回值</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> a = <span class="hljs-number">100</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> fn = <span class="hljs-title function_">create</span>()<br><span class="hljs-keyword">const</span> a = <span class="hljs-number">200</span><br><span class="hljs-title function_">fn</span>()  <span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure><ul><li><p>fn可以访问create内部的局部变量</p></li><li><p>应用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>green<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>white<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>black<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 闭包实现</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 没有闭包的时候，循环执行结束后，i就变为了3，此时无论点击哪个li输出的都是3</span></span><br><span class="language-javascript">            <span class="hljs-comment">// lis[i].onclick = function () &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     console.log(i);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">            (<span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 将实参 i 传入形参 index</span></span><br><span class="language-javascript">                lis[index].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 此处的函数是闭包，可以访问index</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;)(i);  <span class="hljs-comment">// 通过立即执行函数传入参数 i</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="函数作为参数被传递"><a href="#函数作为参数被传递" class="headerlink" title="函数作为参数被传递"></a><code>函数作为参数</code>被传递</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数作为参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-keyword">const</span> a = <span class="hljs-number">200</span>;<br>  <span class="hljs-title function_">fn</span>();<br>&#125;<br><span class="hljs-keyword">const</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 此处的a在函数作用域没有被定义</span><br>  <span class="hljs-comment">// 会在【定义的地方】，向上级一层一层寻找；不是在执行的地方</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><br><span class="hljs-comment">// 次数打印出来是100 是因为函数定义上一级定义了全局作用域的a</span><br><span class="hljs-title function_">print</span>(fn);  <span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure><h4 id="注意-自由变量的查找"><a href="#注意-自由变量的查找" class="headerlink" title="注意:自由变量的查找"></a><code>注意:</code>自由变量的查找</h4><blockquote><p>注意自由变量的查找，是在函数定义的地方，向上级作用域查找，不是在执行的地方！！！</p></blockquote><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ol><li><p>作为普通函数</p><p>this指向：window</p></li><li><p>使用call apply bind</p><p>this指向：谁调用指向谁</p></li><li><p>作为对象方法被调用</p><p>this指向：对象本身</p></li><li><p>在class方法中调用</p><p>this指向：实例对象</p></li></ol><h4 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h4><table><thead><tr><th>调用方式</th><th>this指向</th></tr></thead><tbody><tr><td>普通函数</td><td>window</td></tr><tr><td>构造函数</td><td>实例对象 原型对象中的方法也指向实例对象</td></tr><tr><td>对象方法</td><td>该方法所属对象</td></tr><tr><td>事件绑定</td><td>绑定事件对象</td></tr><tr><td>定时器函数</td><td>window</td></tr><tr><td>立即执行函数</td><td>window</td></tr><tr><td>箭头函数</td><td>上一级作用域的this指向（不改变this指向）</td></tr></tbody></table><h4 id="this指向的确定"><a href="#this指向的确定" class="headerlink" title="this指向的确定"></a><code>this指向的确定</code></h4><blockquote><p> <strong>牢记</strong>：this指向是在函数执行的时候确定的，不是在函数定义的时候确定的！！</p></blockquote><p>案例1-对象中的this指向：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;the window&quot;</span>, age = <span class="hljs-number">17</span>;<br><span class="hljs-keyword">var</span> object = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;my object&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>,  <span class="hljs-comment">// this指向window</span><br>    <span class="hljs-attr">getName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>); <span class="hljs-comment">// this指向object</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;   <span class="hljs-comment">// this指向window</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object.<span class="hljs-title function_">getName</span>()());    <span class="hljs-comment">// the window</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object.<span class="hljs-property">age</span>);<span class="hljs-comment">// 17</span><br></code></pre></td></tr></table></figure><p>案例2-类里面的this指向问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>唱歌<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Star</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">constructor</span>(<span class="hljs-params">uname, age</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 类的共有属性和方法一定要加this</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = uname;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">btn</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">btn</span>.<span class="hljs-property">onclick</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">sing</span>; <span class="hljs-comment">// 调用sing方法的是btn，注意sing不加小括号，若写成sing()就会立即执行</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);  <span class="hljs-comment">// this指向实例对象</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">sing</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);  <span class="hljs-comment">// this指向btn（btn调用这个函数）</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">dance</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// this指向实例对象ldh（因ldh调用了这个函数）</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;刘德华&#x27;</span>);</span><br><span class="language-javascript">    ldh.<span class="hljs-title function_">dance</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例3-箭头函数中的this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attr">say</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>    &#125;,<br>    <span class="hljs-attr">sing</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-comment">// 箭头函数的this指向的是上一级作用域，即person的上一级window</span><br>    &#125;<br>&#125;<br><br>person.<span class="hljs-title function_">say</span>();   <span class="hljs-comment">// this指向person</span><br>person.<span class="hljs-title function_">sing</span>();  <span class="hljs-comment">// this指向window</span><br></code></pre></td></tr></table></figure><h4 id="改变this指向"><a href="#改变this指向" class="headerlink" title="改变this指向"></a>改变this指向</h4><p>处理this指向，常用的方法有：bind() call() apply()</p><h5 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h5><p>作用：</p><ol><li>call()调用函数</li><li>可以改变函数内的this指向，主要作用是可以实现继承</li></ol><blockquote><p>语法</p><p>fn.call()</p><p>fn.call(obj, arg1,arg2, …)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是fn&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;andy&quot;</span><br>&#125;<br><span class="hljs-comment">// 1. 调用fn函数</span><br>fn.<span class="hljs-title function_">call</span>();<br><span class="hljs-comment">// 2. 将fn的this指向改为obj这个对象</span><br>fn.<span class="hljs-title function_">call</span>(obj);<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">我是fn<br>Window<br>我是fn<br>Object<br></code></pre></td></tr></table></figure><h5 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h5><p>作用：bind()方法不会调用函数，但是可以改变this指向</p><blockquote><p>语法</p><p>fun.bind(thisArg, arg1, arg2, . . . );</p></blockquote><ul><li>thisArg: 在func函数运行时指定的this值</li><li>arg1, arg2: 传递的其他参数</li><li>返回由指定的this值和初始化参数改造的<strong>原函数拷贝</strong></li></ul><p><strong>典型案例</strong>: 利用 bind 更改定时器中的this指向</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(btn);</span><br><span class="language-javascript">    btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;       <span class="hljs-comment">// this指向btn</span></span><br><span class="language-javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// this指向window，需要禁用的时btn，因此需要更改this指向</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);</span><br><span class="language-javascript">        &#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-number">3000</span>);        <span class="hljs-comment">// 利用bind改变定时器内部函数的this指向</span></span><br><span class="language-javascript">        <span class="hljs-comment">// bind括号里面本可以写btn,但此处是在定时器函数外部，</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 此处的this指向的就是事件调用者btn，因此可以直接写this</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此处不能将 bind 改为 call或apply，因为这两者都会立即调用函数，定时器不生效</p><h5 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h5><p>作用：调用一个函数。</p><blockquote><p>语法</p><p>func.apply(thisArg, [argsArray]);</p></blockquote><ul><li>thisArg: 在func函数运行时指定的this值</li><li>argsArray: 传递的值，必须包含在<span style="color:red">数组</span>里面</li><li>由于apply就是调用函数，因此返回值就是函数的返回值</li></ul><p><strong>典型案例</strong>：利用 apply 借助数学内置对象计算最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1 2 3 中的最大值：&#x27;</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));   <span class="hljs-comment">// Math.max中不能直接传入数组</span><br><br><span class="hljs-comment">// 方式1：通过扩展运算符，将数组拆开</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(...arr));  <br><br><span class="hljs-comment">// 方式2：利用apply参数需要数组形式，通过apply就将数组作为参数传入</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">23</span>, <span class="hljs-number">567</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">456</span>];<br><span class="hljs-keyword">var</span> max = <span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">Math</span>, arr);    <span class="hljs-comment">// 因this指向不需要改变，因此还是Math</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(max)<br></code></pre></td></tr></table></figure><h5 id="call-amp-bind-amp-apply区别"><a href="#call-amp-bind-amp-apply区别" class="headerlink" title="call&amp;bind&amp;apply区别"></a>call&amp;bind&amp;apply区别</h5><ol><li><p>相同点</p><p>都可以修改this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 将fn中的this指向都改为obj</span><br>fn.<span class="hljs-title function_">call</span>(obj)<br>fn.<span class="hljs-title function_">bind</span>(obj)()<br>fn.<span class="hljs-title function_">apply</span>(obj)<br></code></pre></td></tr></table></figure></li><li><p>不同点</p><p>当向里面传参时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">fn.<span class="hljs-title function_">call</span>(obj, arg1, arg2, ...)<br>fn.<span class="hljs-title function_">bind</span>(obj, arg1, arg2, ...)()<br>fn.<span class="hljs-title function_">apply</span>(obj, [arg1, arg2, ...])<br></code></pre></td></tr></table></figure><ul><li>call()和bind()传参方式相同，直接传入</li><li>apply() 传参时，需要以数组的形式传入</li><li>bind()只会更改fn的this指向，但不会调用函数，因此要调用函数，需要再加一个括号</li></ul></li></ol><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>setTimeout中this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. setTimeout中普通函数this指向</span><br><span class="hljs-keyword">const</span> zhangsan = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sayHi&#x27;</span>, <span class="hljs-variable language_">this</span>); <span class="hljs-comment">// this指向当前对象</span><br>  &#125;,<br>  <span class="hljs-title function_">wait</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setTimeout&#x27;</span>, <span class="hljs-variable language_">this</span>); <span class="hljs-comment">// this指向window</span><br>    &#125;);<br>  &#125;<br>&#125;;<br><br>zhangsan.<span class="hljs-title function_">sayHi</span>();<br>zhangsan.<span class="hljs-title function_">wait</span>();<br></code></pre></td></tr></table></figure><blockquote><p>setTimeout函数里面的this指向是window（注意箭头函数，看下例）</p></blockquote><p>箭头函数this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2. setTimeout中箭头函数this指向</span><br><span class="hljs-keyword">const</span> zhangsan = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sayHi&#x27;</span>, <span class="hljs-variable language_">this</span>); <span class="hljs-comment">// this指向当前对象</span><br>  &#125;,<br>  <span class="hljs-title function_">wait</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// this指向当前对象</span><br>    <span class="hljs-comment">// setTimeout里面是一个箭头函数，箭头函数不改变this指向</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setTimeout&#x27;</span>, <span class="hljs-variable language_">this</span>); <span class="hljs-comment">// this指向当前对象</span><br>    &#125;);<br>  &#125;<br>&#125;;<br><br>zhangsan.<span class="hljs-title function_">sayHi</span>();<br>zhangsan.<span class="hljs-title function_">wait</span>();<br></code></pre></td></tr></table></figure><blockquote><p>箭头函数不改变this指向,因此里面的this指向和它的上一级相同</p></blockquote><p>class类里面的this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 3. class里面this指向</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>    (<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name), (<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age);<br>  &#125;<br>  <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> ls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">20</span>);<br>ls.<span class="hljs-title function_">sayHi</span>();   <span class="hljs-comment">// this指向ls实例对象</span><br></code></pre></td></tr></table></figure><h4 id="补充-原型中的this"><a href="#补充-原型中的this" class="headerlink" title="补充-原型中的this"></a>补充-原型中的this</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>  &#125;<br>  <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`姓名：<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> ls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">ls.<span class="hljs-property">sayHi</span><br><span class="hljs-comment">/* 执行结果：</span><br><span class="hljs-comment">   ƒ sayHi() &#123;</span><br><span class="hljs-comment">    console.log(`姓名：$&#123;this.name&#125;`);</span><br><span class="hljs-comment">   &#125;</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">   此时的this就是ls本身</span><br><span class="hljs-comment">*/</span><br><br>ls.<span class="hljs-title function_">sayHi</span>()<br><span class="hljs-comment">/* 执行结果：</span><br><span class="hljs-comment">   姓名：李四</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">   因为this指向本身，因此，可以打印出‘李四’</span><br><span class="hljs-comment">*/</span><br><br>ls.<span class="hljs-property">__proto__</span>.<span class="hljs-property">sayHi</span><br><span class="hljs-comment">/* 执行结果：</span><br><span class="hljs-comment">   ƒ sayHi() &#123;</span><br><span class="hljs-comment">    console.log(`姓名：$&#123;this.name&#125;`);</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  此时的this指向是 ls.__proto__，而不是ls</span><br><span class="hljs-comment">*/</span><br><br>ls.<span class="hljs-property">__proto__</span>.<span class="hljs-title function_">sayHi</span>()<br><span class="hljs-comment">/* 执行结果：</span><br><span class="hljs-comment">   姓名：undefined</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">   因为this指向不是ls，所以打印出‘undefined’</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><blockquote><p>在执行 <code>ls.sayHi()</code> 时，类似于执行 ls.__proto__.sayHi().<code>call(ls)</code></p><p>即: 相当于改变了 <code>ls.__proto__</code>的this指向</p></blockquote><h3 id="手写bind函数"><a href="#手写bind函数" class="headerlink" title="手写bind函数"></a>手写bind函数</h3><p>bind会改变函数的this指向，且返回一个新的函数，返回函数时不会直接调用</p><h4 id="自带的bind"><a href="#自带的bind" class="headerlink" title="自带的bind"></a>自带的bind</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this&#x27;</span>, <span class="hljs-variable language_">this</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, c);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;this is fn1&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> fn2 = fn1.<span class="hljs-title function_">bind</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span> &#125;, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">const</span> res = <span class="hljs-title function_">fn2</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br></code></pre></td></tr></table></figure><p>在fn1的属性中并没有bind方法，而是通过原型链调用了bind方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">fn1.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><span class="hljs-comment">// true</span><br>fn1.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;bind&#x27;</span>)<span class="hljs-comment">// false</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;bind&#x27;</span>)<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="手写bind函数-1"><a href="#手写bind函数-1" class="headerlink" title="手写bind函数"></a>手写bind函数</h4><p>需求：</p><ol><li>需要接收不定长的参数列表<ul><li>包含需要改成的目标this指向 以及 其他参数</li></ul></li><li>需要获取this(指向将来的实例化对象)</li><li>将指向实例对象的this 改为 目标this指向</li><li>返回值是一个函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 模拟 bind：为Function原型对象添加手写的bind1方法</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">bind1</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// bind可以接收很多参数，数目不定，因此</span><br>  <span class="hljs-comment">// 1. 需要拆解参数为数组</span><br>  <span class="hljs-keyword">const</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args);<br><br>  <span class="hljs-comment">// 2. 获取this（数组第一项就是要改变的this指向）</span><br>  <span class="hljs-keyword">const</span> t = args.<span class="hljs-title function_">shift</span>(); <span class="hljs-comment">// shift会从数组头部删除元素，并返回删除的元素；此处相当于将this从数组中取出</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(t);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args);<br><br>  <span class="hljs-comment">// 3. this就是实例对象，即fn1.bind(...)中的fn1</span><br>  <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span>;<br><br>  <span class="hljs-comment">// 4. 返回一个函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> self.<span class="hljs-title function_">apply</span>(t, args);<br>  &#125;;<br>&#125;;<br><br><span class="hljs-keyword">const</span> fn3 = fn1.<span class="hljs-title function_">bind1</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span> &#125;, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn3</span>());<br></code></pre></td></tr></table></figure><h4 id="作业TODO"><a href="#作业TODO" class="headerlink" title="==作业TODO=="></a>==作业TODO==</h4><p>手写call、apply</p><h5 id="手写apply"><a href="#手写apply" class="headerlink" title="手写apply"></a>手写apply</h5><ol><li>修改this指向</li><li>调用函数</li><li>返回函数的值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context, args</span>) &#123;<br>    <span class="hljs-comment">// 1     </span><br>    <span class="hljs-keyword">if</span> (context) &#123;<br>        <span class="hljs-comment">// 将返回一个与给定值相对应的类型的对象</span><br>        context = <span class="hljs-title class_">Object</span>(context);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        context = <span class="hljs-variable language_">window</span>;<br>      &#125;<br>    <br>    <span class="hljs-comment">// 2 新建临时属性将this保留</span><br>    <span class="hljs-keyword">const</span> fn = <span class="hljs-title class_">Symbol</span>();<br>    context[fn] = <span class="hljs-variable language_">this</span>;<br>    <br>    <span class="hljs-comment">// 3 执行函数 并返回</span><br>    <span class="hljs-keyword">const</span> result = args ? context[symbolFn](...args) : context[symbolFn]();<br>    <br>    <span class="hljs-comment">// 4 删除临时属性</span><br>    <span class="hljs-keyword">delete</span> context[fn];<br>    <br>    <span class="hljs-comment">// 5 返回结果</span><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="闭包在实际中的应用"><a href="#闭包在实际中的应用" class="headerlink" title="闭包在实际中的应用"></a>闭包在实际中的应用</h3><ol><li>闭包隐藏数据，只提供API</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 闭包隐藏数据，只提供 API</span><br><span class="hljs-comment">// 一个简单的cache工具</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createCache</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> data = &#123;&#125;;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key, val</span>) &#123;<br>      data[key] = val;<br>    &#125;,<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) &#123;<br>      <span class="hljs-keyword">return</span> data[key];<br>    &#125;<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">// 只能通过API访问数据，而不能直接访问数据</span><br><span class="hljs-keyword">const</span> tmp = <span class="hljs-title function_">createCache</span>();<br>tmp.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;num&#x27;</span>, <span class="hljs-number">100</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tmp.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;num&#x27;</span>)); <span class="hljs-comment">// 100</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tmp.<span class="hljs-property">num</span>); <span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// tmp.num 是无法访问到对应的数据的</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>循环创建多个标签，并注册点击事件，要求触发点击事件时，会弹出相应的索引</p><ul><li><p>当i声明为<strong>全局变量</strong>时，作用域为<strong>全局作用域</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br><span class="hljs-keyword">let</span> li, i;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>  li.<span class="hljs-property">innerHTML</span> = i;<br>  li.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;index&#x27;</span>, i);<br>  &#125;);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(li);<br>  ul.<span class="hljs-title function_">appendChild</span>(li);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于i时全局变量，等待所有的li创建完毕后，i的值已经增加到10，因此，这种情况下，点击li时每次打印出来的都是10</p></blockquote></li><li><p>当i声明到for循环处，作用域为<strong>块级作用域</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br><span class="hljs-keyword">let</span> li;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>  li.<span class="hljs-property">innerHTML</span> = i;<br>  li.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;index&#x27;</span>, i);<br>  &#125;);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(li);<br>  ul.<span class="hljs-title function_">appendChild</span>(li);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>i的作用域为块级作用域，每次循环都会产生一个新的变量i，作用域都是块级作用域，因此，这种情况下，点击li时打印出的就是当前索引</p></blockquote></li></ul></li></ol><h2 id="异步和单线程"><a href="#异步和单线程" class="headerlink" title="异步和单线程"></a>异步和单线程</h2><h3 id="内容概述-2"><a href="#内容概述-2" class="headerlink" title="内容概述"></a>内容概述</h3><h4 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h4><ol><li>同步和异步的区别是什么</li><li>手写Promise加载一张图片</li><li>前端使用异步的场景有哪些</li><li>情景题</li></ol><h4 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h4><ol><li>单线程和异步</li><li>应用场景</li><li>callback hell 和Promise</li></ol><h3 id="单线程和异步"><a href="#单线程和异步" class="headerlink" title="单线程和异步"></a>单线程和异步</h3><p>异步是以单线程背景而产生</p><ul><li>JS是单线程语言，只能同时做一件事</li><li>浏览器和nodejs已支持JS启动进程，如： web Worker</li><li>JS和DOM渲染公用同一个线程，因为JS可以修改DOM结构</li><li>遇到等到不能卡住，就需要异步</li><li>回调函数callback</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>网络请求，如 Ajax请求图片</li><li>定时任务，如 setTimeout </li></ol><h3 id="callback-hell"><a href="#callback-hell" class="headerlink" title="callback hell"></a>callback hell</h3><p>不断地在请求里面发请求，形成回调地狱</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取第一份数据</span><br>$.<span class="hljs-title function_">get</span>(url1, <span class="hljs-function"><span class="hljs-params">data1</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data1);<br><br>  <span class="hljs-comment">// 获取第二份数据</span><br>  $.<span class="hljs-title function_">get</span>(url2, <span class="hljs-function"><span class="hljs-params">data2</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data2);<br><br>    <span class="hljs-comment">// 获取第三份数据</span><br>    $.<span class="hljs-title function_">get</span>(url3, <span class="hljs-function"><span class="hljs-params">data3</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data3);<br><br>      <span class="hljs-comment">// 获取更多的数据...</span><br>    &#125;);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>解决：将发请求封装成一个函数，该函数返回的是Promise对象的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params">url</span>) &#123;<br>  <span class="hljs-comment">// 返回一个Promise对象的数据</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>      <span class="hljs-comment">// 请求的url地址</span><br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;url地址&#x27;</span>,<br>      <span class="hljs-comment">// 请求成功</span><br>      <span class="hljs-title function_">success</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-title function_">resolve</span>(data);<br>      &#125;,<br>      <span class="hljs-comment">// 请求失败</span><br>      <span class="hljs-title function_">error</span>(<span class="hljs-params">err</span>) &#123;<br>        <span class="hljs-title function_">reject</span>(err);<br>      &#125;<br>    &#125;);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>再使用getData请求数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Promise对象有.then方法</span><br><span class="hljs-title function_">getData</span>(url1)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data1</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getData</span>(url2);<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data2</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getData</span>(url3);<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data3</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data3);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err));<br></code></pre></td></tr></table></figure><p>// 通过 .then 可以把 callback hell 转换为这种管道形式的写法</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>手写promise加载图片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf&#x27;</span>;<br><span class="hljs-keyword">var</span> pic = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.pic&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loadImg</span>(<span class="hljs-params">src</span>) &#123;<br>  <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<br>    <span class="hljs-comment">// resolve和reject是两个函数</span><br>    <span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<br>      img.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 将加载成功的img传入resolve</span><br>        <span class="hljs-title function_">resolve</span>(img);<br>      &#125;;<br>      img.<span class="hljs-property">onerror</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> err = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`图片加载失败 <span class="hljs-subst">$&#123;src&#125;</span>`</span>);<br>        <span class="hljs-comment">// 将加载失败的错误传入reject</span><br>        <span class="hljs-title function_">reject</span>(err);<br>      &#125;;<br>      <span class="hljs-comment">// 为img.src赋值</span><br>      img.<span class="hljs-property">src</span> = src;<br>    &#125;<br>  );<br>  <span class="hljs-comment">// 不要忘记返回值</span><br>  <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-title function_">loadImg</span>(url)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">img</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 成功时，打印图片宽度，并将图片添加到页面pic中</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(img.<span class="hljs-property">width</span>);<br>    pic.<span class="hljs-title function_">appendChild</span>(img);<br>    <span class="hljs-keyword">return</span> img;<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">img</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 成功时</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(img.<span class="hljs-property">height</span>);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 捕获错误</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>其他可参考文件 【07 VUE3基础.md】</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="DOM和BOM"><a href="#DOM和BOM" class="headerlink" title="DOM和BOM"></a>DOM和BOM</h2><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h4 id="内容概述-3"><a href="#内容概述-3" class="headerlink" title="内容概述"></a>内容概述</h4><ol><li>DOM本质：从HTML语言解析出来的一棵树</li><li>DOM常见操作</li></ol><ul><li>DOM节点操作</li><li>DOM结构操作</li><li>attribute和property</li></ul><ol start="3"><li>DOM性能</li></ol><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220806102901946.png" alt="image-20220806102901946"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220806102915425.png" alt="image-20220806102915425"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220806103236835.png" alt="image-20220806103236835"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220806104003721.png" alt="image-20220806104003721"></p><p>DOM性能</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/面试题知识点/image-20220806104256111.png" alt="image-20220806104256111" style="zoom:67%;" /><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220806104321385.png" alt="image-20220806104321385"></p><p>将频繁操作改为一次性操作</p><p>原本的做法：频繁地插入DOM</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220806104730137.png" alt="image-20220806104730137"></p><p>改进：创建了一个临时区域，先插入到文档片段，最后只进行了一次DOM操作</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220806104639691.png" alt="image-20220806104639691"></p><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><h4 id="内容概述-4"><a href="#内容概述-4" class="headerlink" title="内容概述"></a>内容概述</h4><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><ol><li><p>如何识别浏览器类型</p><p>navigator.userAgent</p></li><li><p>分析拆解url各个部分</p><p>通过location来拆解</p></li></ol><h5 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h5><ul><li>navigator</li><li>screen</li><li>location</li><li>history</li></ul><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220806105937642.png" alt="image-20220806105937642"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220806110050698.png" alt="image-20220806110050698"></p><p>location.host 域名</p><p>location.hash 一般是#后面的（链接）</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="内容概述-5"><a href="#内容概述-5" class="headerlink" title="内容概述"></a>内容概述</h4><p>题目</p><ol><li>编写一个通用的事件监听函数</li><li>描述事件冒泡的流程</li><li>无限下拉的图片列表，如何监听每个图片的点击</li></ol><p>知识点</p><ol><li>事件绑定</li><li>事件冒泡</li><li>事件代理</li></ol><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220806110909683.png" alt="image-20220806110909683"></p><h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><p>e.preventDefault() 阻止默认行为</p><p>e.stopPropagation() 阻止冒泡</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220806112108661.png" alt="image-20220806112108661"></p><p>利用bindEvent来绑定的事件</p><h4 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h4><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220806112143943.png" alt="image-20220806112143943"></p><ul><li>若希望触发目标事件的标签过多，可以通过事件代理，对其父级进行事件绑定，点击子标签的时候，可以通过冒泡来触发父级节点绑定的事件</li><li>在为父级绑定事件时，可以通过判断条件来筛选希望触发事件的标签</li></ul><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220806113310494.png" alt="image-20220806113310494"></p><p>改进-通用的事件监听函数</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220806113819435.png" alt="image-20220806113819435"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220807081554227.png" alt="image-20220807081554227"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220807081610243.png" alt="image-20220807081610243"></p><h2 id="Ajax跨域"><a href="#Ajax跨域" class="headerlink" title="Ajax跨域"></a>Ajax跨域</h2><h3 id="内容概述-6"><a href="#内容概述-6" class="headerlink" title="内容概述"></a>内容概述</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><ol><li>手写一个建议的ajax</li><li>跨域的常用方式</li></ol><h4 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h4><ol><li>XMLHttpRequest</li><li>状态码</li><li>跨域：同源策略，跨域解决方案</li></ol><h3 id="XMLHTtpReaquest"><a href="#XMLHTtpReaquest" class="headerlink" title="XMLHTtpReaquest"></a>XMLHTtpReaquest</h3><h5 id="xhr发起get请求"><a href="#xhr发起get请求" class="headerlink" title="xhr发起get请求"></a>xhr发起get请求</h5><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220807082229741.png" alt="image-20220807082229741"></p><p>上面的 == 应为 === false（同步）应为true（异步）</p><h5 id="xhr发起post请求"><a href="#xhr发起post请求" class="headerlink" title="xhr发起post请求"></a>xhr发起post请求</h5><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220807082917238.png" alt="image-20220807082917238"></p><p>上面open()里面的false时true， 代表异步，false表示同步的请求</p><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220807083120192.png" alt="image-20220807083120192"></p><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><ol><li><p>什么是跨域</p></li><li><p>JSONP</p></li></ol><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h4><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220807093623139.png" alt="image-20220807093623139"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220807093824667.png" alt="image-20220807093824667"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220807093954100.png" alt="image-20220807093954100"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220807094022814.png" alt="image-20220807094022814"></p><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220807095531231.png" alt="image-20220807095531231"></p><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>是纯服务端的</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220807101351125.png" alt="image-20220807101351125"></p><h3 id="问题解答-1"><a href="#问题解答-1" class="headerlink" title="问题解答"></a>问题解答</h3><ol><li>手写简易的ajax </li></ol><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220808090201138.png" alt="image-20220808090201138"></p><p>上面没有写 new 和 xhr.send()<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220808090705249.png" alt="image-20220808090705249"></p><p>使用上面定义的ajax：<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220808090302205.png" alt="image-20220808090302205"></p><p>常用的ajax插件</p><ul><li><p>$.ajax()</p></li><li><p>fetch (可以了解一下)</p></li><li><p>axios</p></li></ul><h2 id="事件存储"><a href="#事件存储" class="headerlink" title="事件存储"></a>事件存储</h2><h3 id="内容概述-7"><a href="#内容概述-7" class="headerlink" title="内容概述"></a>内容概述</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><ol><li>描述 cookie localStorage sessionStorage 区别</li></ol><h4 id="知识点-6"><a href="#知识点-6" class="headerlink" title="知识点"></a>知识点</h4><ul><li>cookie</li><li>localStorage 和 sessionStorage</li></ul><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p>cookie之前目的是为了浏览器与服务端能够通信，也能做本地存储</p><p>缺点：</p><ul><li>最大能存储4KB</li><li>http请求时需要发送到服务端，增加请求的数据量</li><li>只能通过 document.cookie=‘…’ 来修改，可读性差</li></ul><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220808102056176.png" alt="image-20220808102056176"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220808102159166.png" alt="image-20220808102159166"></p><h4 id="localStorage与sessionStorage"><a href="#localStorage与sessionStorage" class="headerlink" title="localStorage与sessionStorage"></a>localStorage与sessionStorage</h4><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220808100047287.png" alt="image-20220808100047287"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220808100209867.png" alt="image-20220808100209867"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220808101736006.png" alt="image-20220808101736006"></p><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>git</p><p>调式工具</p><p>抓包</p><p>webpack babel</p><p>linux常用命令</p><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><h4 id="1-git-init"><a href="#1-git-init" class="headerlink" title="1 git init"></a>1 git init</h4><blockquote><p>作用：初始化仓库</p></blockquote><h4 id="2-git-status"><a href="#2-git-status" class="headerlink" title="2 git status"></a>2 git status</h4><blockquote><p>作用：检查文件的状态</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 详细的方式显示文件状态<br>git status<br><br># 以精简的方式显示文件状态（-s 是 --short 的缩写）<br>git status -s<br>git status --short<br></code></pre></td></tr></table></figure><h4 id="3-git-add"><a href="#3-git-add" class="headerlink" title="3 git add"></a>3 git add</h4><blockquote><p>作用：</p><ul><li>跟踪新文件</li><li>把 已跟踪、且已修改 的文件放到暂存区</li><li>把有冲突的文件标记为 已解决状态</li></ul></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 开始跟踪一个文件<br>git add index.html<br><br># 向暂存区一次性添加多个文件-一次性将所有的新增和修改过的文件加入暂存区<br>git add .<br></code></pre></td></tr></table></figure><h4 id="4-git-commit"><a href="#4-git-commit" class="headerlink" title="4 git commit"></a>4 git commit</h4><blockquote><p>作用：将暂存区的文件提交到Git仓库中更新并保存</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># -m选项后面是本次提交消息，用来对提交内容做进一步的描述<br>git commit -m &quot;新建了index.html文件&quot;<br><br># 跳过使用暂存区域：直接将工作区中修改的提交到Git仓库，跳过了 git add 步骤<br>git commit -a -m &quot;提交消息&quot;<br></code></pre></td></tr></table></figure><p>对已提交的文件进行修改：</p><ol><li>目前index.html文件已经被Git跟踪，并且工作区和Git仓库中的index.html文件内容保持一致。当我们修改工作区的中的index.html的内容后，会出现<code>changes not staged for commit </code>这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区</li><li>若要暂存这次修改，需再次运行 git add 命令：<code>git add index.html</code></li><li>若要提交已暂存的文件，需再次运行 git commit -m “提交消息” 命令：<code>git commit -m &quot;修改了index.html的内容&quot;</code></li></ol><p>撤销对文件的修改：</p><ul><li>即 将工作区中对应文件的修改 还原为 Git仓库中所保存的版本</li><li>操作的结果：所有的修改会丢失，且无法恢复，危险性比较高</li><li>撤销操作的本质：用Git仓库中保存的文件，覆盖工作区中指定的文件</li></ul><h4 id="5-git-reset"><a href="#5-git-reset" class="headerlink" title="5 git reset"></a>5 git reset</h4><h5 id="5-1-git-reset-mixed-lt-commit-ID-gt-（默认）"><a href="#5-1-git-reset-mixed-lt-commit-ID-gt-（默认）" class="headerlink" title="5.1 git reset --mixed &lt;commit ID&gt;（默认）"></a>5.1 git reset --mixed &lt;commit ID&gt;（默认）</h5><blockquote><p>作用：把 HEAD 指针移动到 commit ID 上，暂存区被清空，工作区的修改保留（安全）</p><p>git reset &lt;commit ID&gt; 默认参数就是 --mixed</p></blockquote><p>commit ID 的获取</p><ul><li>若当前在最新版本，则根据<code>git log</code>查看提交历史,可以查看到版本的ID,再利用上面的命令即可回退到指定版本</li><li>若现在不在最新版本，当前在旧版本中，有些操作记录看不到，则需要根据 <code>git reflog –pretty=oneline</code> 查看所有的操作历史，才能根据最新的提交 ID，跳转到指定版本</li></ul><h5 id="5-2-git-reset-soft-lt-commit-ID-gt"><a href="#5-2-git-reset-soft-lt-commit-ID-gt" class="headerlink" title="5.2 git reset --soft &lt;commit ID&gt;"></a>5.2 git reset --soft &lt;commit ID&gt;</h5><blockquote><p>作用：它是把 HEAD 指针移动到 commit ID 上，暂存区和工作区不变（安全）</p></blockquote><h5 id="5-3-git-reset-hard-lt-commit-ID-gt"><a href="#5-3-git-reset-hard-lt-commit-ID-gt" class="headerlink" title="5.3 git reset --hard &lt;commit ID&gt;"></a>5.3 git reset --hard &lt;commit ID&gt;</h5><blockquote><p>作用：把 HEAD 指针移动到 commit ID 上，无论修改是否被 add 、 commit ，都直接重置（此时暂存区被清空，工作区的修改被清空），所做的修改将全部丢失（危险）</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 根据指定的提交 ID 回退到指定版本<br>git reset --hard &lt;CommitID&gt;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>若修改之后进行了 commit 操作，那非常好办，可以用 reflog 查询相应的 hash 值，进行恢复；</li><li>若修改之后，进行了 add 操作，也可以恢复，但是比较麻烦，用 <code>git fsck --lost-found</code></li><li>若修改之后既没有进行 commit 操作也没有进行 add 操作，暂时没有恢复方法</li></ul><h5 id="5-4-git-reset-HEAD-文件名"><a href="#5-4-git-reset-HEAD-文件名" class="headerlink" title="5.4 git reset HEAD 文件名"></a>5.4 git reset HEAD 文件名</h5><blockquote><p>作用：取消暂存文件</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 从暂存区中移除对应的文件<br>git reset HEAD 要移除的文件<br></code></pre></td></tr></table></figure><h4 id="6-git-rm"><a href="#6-git-rm" class="headerlink" title="6 git rm"></a>6 git rm</h4><blockquote><p>作用：从Git中移除文件（有以下两种）</p></blockquote><h5 id="6-1-git-rm-f-文件名"><a href="#6-1-git-rm-f-文件名" class="headerlink" title="6.1 git rm -f 文件名"></a>6.1 git rm -f 文件名</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 从Git仓库和工作区中同时移除对应的文件<br>git rm -f index.js<br></code></pre></td></tr></table></figure><h5 id="6-2-git-rm-–cached-文件名"><a href="#6-2-git-rm-–cached-文件名" class="headerlink" title="6.2 git rm –cached 文件名"></a>6.2 git rm –cached 文件名</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 只从Git仓库中移除指定的文件，但保留工作区中对应的文件 <br>git rm –cached index.css<br></code></pre></td></tr></table></figure><h4 id="7-git-log"><a href="#7-git-log" class="headerlink" title="7 git log"></a>7 git log</h4><blockquote><p>作用：查看提交历史</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 按时间先后顺序列出所有提交历史,最近提交排在最上面<br>git log<br><br># 只展示最新的两条提交历史,数字可以按需进行填写<br>git log -<span class="hljs-number">2</span><br><br># 在一行上展示最近提交历史的信息<br>git log -<span class="hljs-number">2</span> --pretty=online<br><br># 在一行上展示最近两条提交历史的信息,并自定义输出的格式<br>git log -<span class="hljs-number">2</span> --pretty=<span class="hljs-built_in">format</span>:&quot;%h | %an | %ar | %s&quot;<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>%h 提交的简写哈希值,%an作者名字, %ar作者修订日期,按多久以前的方式显示, %s提交说明</li><li>其中 | 为自定义的分隔符,可以换成别的字符</li></ul><h4 id="8-git-reflog"><a href="#8-git-reflog" class="headerlink" title="8 git reflog"></a>8 git reflog</h4><blockquote><p>作用：在旧版本中,查看命令操作的历史</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git reflog –pretty=oneline<br></code></pre></td></tr></table></figure><h4 id="—————分割线—————"><a href="#—————分割线—————" class="headerlink" title="==—————分割线—————=="></a>==—————分割线—————==</h4><p>以下 9-11 是本地分支操作</p><h4 id="9-git-branch"><a href="#9-git-branch" class="headerlink" title="9 git branch"></a>9 git branch</h4><blockquote><p>作用：创建或删除本地分支</p></blockquote><h5 id="9-1-git-branch"><a href="#9-1-git-branch" class="headerlink" title="9.1 git branch"></a>9.1 git branch</h5><blockquote><p>作用：查看分支列表，分支前面有 * 号 ，表示当前所处的分支</p></blockquote><h5 id="9-2-git-branch-分支名称"><a href="#9-2-git-branch-分支名称" class="headerlink" title="9.2 git branch 分支名称"></a>9.2 git branch 分支名称</h5><blockquote><p>作用：基于当前分支，创建一个新的分支</p></blockquote><h5 id="9-3-git-branch-d-分支名称"><a href="#9-3-git-branch-d-分支名称" class="headerlink" title="9.3 git branch -d 分支名称"></a>9.3 git branch -d 分支名称</h5><blockquote><p>作用：删除分支</p><p>注意：待删除分支不能是当前所处分支</p></blockquote><h5 id="9-4-git-branch-D-分支名称"><a href="#9-4-git-branch-D-分支名称" class="headerlink" title="9.4 git branch -D 分支名称"></a>9.4 git branch -D 分支名称</h5><blockquote><p>作用：当遇到无法删除时，可以强制删除</p><p>注意：待删除分支不能是当前所处分支</p></blockquote><h4 id="10-git-checkout"><a href="#10-git-checkout" class="headerlink" title="10 git checkout"></a>10 git checkout</h4><blockquote><p>作用：切换分支</p></blockquote><h5 id="10-1-git-checkout-本地分支名称"><a href="#10-1-git-checkout-本地分支名称" class="headerlink" title="10.1 git checkout 本地分支名称"></a>10.1 git checkout 本地分支名称</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 切换到指定的分支上进行开发<br>git checkout 分支名称<br></code></pre></td></tr></table></figure><h5 id="10-2-git-checkout-b-本地分支名称"><a href="#10-2-git-checkout-b-本地分支名称" class="headerlink" title="10.2 git checkout -b 本地分支名称"></a>10.2 git checkout -b 本地分支名称</h5><blockquote><p>作用：分支的快捷创建和切换（创建分支和切换分支两条命令的简写形式）</p><ul><li>-b 代表创建一个新的分支</li><li>checkout表示切换到刚才新建的分支上</li></ul></blockquote><h5 id="10-3-git-checkout-远程分支名称"><a href="#10-3-git-checkout-远程分支名称" class="headerlink" title="10.3 git checkout 远程分支名称"></a>10.3 git checkout 远程分支名称</h5><blockquote><p>作用：从远程仓库中，把远程分支下载到本地仓库中</p></blockquote><h5 id="10-4-git-checkout-b-本地分支名称-远程仓库名称-远程分支名称"><a href="#10-4-git-checkout-b-本地分支名称-远程仓库名称-远程分支名称" class="headerlink" title="10.4 git checkout -b 本地分支名称 远程仓库名称/远程分支名称"></a>10.4 git checkout -b 本地分支名称 远程仓库名称/远程分支名称</h5><blockquote><p>作用： 从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地仓库分支进行重命名</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git checkout -b payment origin/pay<br></code></pre></td></tr></table></figure><h4 id="11-git-merge"><a href="#11-git-merge" class="headerlink" title="11 git merge"></a>11 git merge</h4><blockquote><p>作用：合并分支</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># <span class="hljs-number">1</span> 先切换到主分支master上<br>git checkout master<br># <span class="hljs-number">2</span> 在master分支上运行 git merge 命令，将 分支的代码合并到 master 分支<br>git merge 分支名称<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：合并分支时，一定要先切换到主分支上 才能合并</p><h4 id="—————分割线—————-1"><a href="#—————分割线—————-1" class="headerlink" title="==—————分割线—————=="></a>==—————分割线—————==</h4><p>以下  是远程分支操作</p><h4 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h4><ol><li><p>在Github新建空白远程仓库</p></li><li><p>将本地仓库和远程仓库进行关联</p><ul><li>情况1：没有本地仓库<ul><li>先初始化本地Git仓库 <code>git init</code>，这样本地就有仓库了</li></ul></li><li>情况2：已有本地仓库<ul><li>直接进入第3步</li></ul></li></ul></li><li><p>将本地仓库中的内容推送到远程origin仓库中</p><ul><li><p>情况1：基于HTTPs将本地仓库上传到GitHub</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git remote add origin &quot;url地址&quot;<br></code></pre></td></tr></table></figure></li><li><p>情况2：基于SSH将本地仓库上传到Github</p></li></ul></li></ol><h4 id="—————分割线—————-2"><a href="#—————分割线—————-2" class="headerlink" title="==—————分割线—————=="></a>==—————分割线—————==</h4><h4 id="12-git-push"><a href="#12-git-push" class="headerlink" title="12 git push"></a>12 git push</h4><blockquote><p>作用：添加 或 删除 远程分支</p></blockquote><h5 id="12-1-推送到远程仓库"><a href="#12-1-推送到远程仓库" class="headerlink" title="12.1 推送到远程仓库"></a>12.1 推送到远程仓库</h5><blockquote><p>作用：将本地分支推送到远程仓库</p></blockquote><ol><li><p>第一次将本地分支推送到远程需要带 -u 参数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 第一次将本地分支推送到远程分支<br>git push -u 远程仓库的别名 本地分支名称:远程分支名称<br># 如下所示<br>git push -u origin payment:pay<br># 远程分支名称和本地分支名称保持一致，可以不写冒号后面的重命名<br>git push -u origin payment<br></code></pre></td></tr></table></figure></li><li><p>此后可以直接使用</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git push 远程仓库的别名 本地分支名称:远程分支名称<br># 或<br>git push 远程仓库的别名 本地分支名称<br></code></pre></td></tr></table></figure></li></ol><h5 id="12-2-删除远程分支"><a href="#12-2-删除远程分支" class="headerlink" title="12.2 删除远程分支"></a>12.2 删除远程分支</h5><blockquote><p>作用：删除远程仓库里面指定的远程分支</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git push 远程仓库名称 --delete 远程分支名称<br># 如下所示<br>git push origin --delete pay<br></code></pre></td></tr></table></figure><h4 id="13-git-checkout-见10-3-10-4"><a href="#13-git-checkout-见10-3-10-4" class="headerlink" title="13 git checkout(见10.3-10.4)"></a>13 git checkout(见10.3-10.4)</h4><h4 id="14-git-pull"><a href="#14-git-pull" class="headerlink" title="14 git pull"></a>14 git pull</h4><blockquote><p>作用：拉取远程分支的最新代码</p><p>即 在远程分支编辑的代码，可以下载到本地对应的分支中</p></blockquote><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220808103644133.png" alt="image-20220808103644133"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220808103742778.png" alt="image-20220808103742778"></p><h2 id="调试和抓包"><a href="#调试和抓包" class="headerlink" title="调试和抓包"></a>调试和抓包</h2><h3 id="chrome调试工具"><a href="#chrome调试工具" class="headerlink" title="chrome调试工具"></a>chrome调试工具</h3><ul><li><p>Elements</p></li><li><p>Console</p></li><li><p>source</p><ul><li>可以在source进行调试</li><li>在需要的地方输入debugger来设置断点</li><li>或者直接在调试的设置断点</li></ul></li><li><p>Network</p><p>用于查看发送的请求，以及请求回来的数据等</p></li><li><p>Application</p><p>一般用于查看本地存储等 LocalStorage、session storage、cookies</p></li></ul><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><h2 id="打包构建"><a href="#打包构建" class="headerlink" title="打包构建"></a>打包构建</h2><ul><li><p>webpack</p><p>打包工具</p></li><li><p>babel</p><p>将ES6高级语法转向低级语法的工具（有些浏览器不支持ES6高级语法）</p></li></ul><p>webpack 和 babel 之间没什么关系</p><h3 id="webpack初始化"><a href="#webpack初始化" class="headerlink" title="webpack初始化"></a>webpack初始化</h3><ol><li><p>新建文件夹 webpack-demo</p></li><li><p>在webpack-demo目录下打开终端，执行如下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">node -v<br><br># 执行完这条命令，文件夹中会出现 package.json 文件<br>npm init -y<br># 执行完这条命令，文件夹中会出现 package-lock.json文件 和 node-modules文件夹<br>npm install webpack webpack-cli -D<br></code></pre></td></tr></table></figure><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912154702420.png" alt="image-20220912154702420"></p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/面试题知识点/image-20220912103454713.png" alt="image-20220912103454713" style="zoom:70%;" /></li></ol><ol start="3"><li><p>新建src文件夹，并在src文件夹下新建 index.js ,作为将来的入口文件</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/面试题知识点/image-20220912153803533.png" alt="image-20220912153803533" style="zoom:70%;" /></li><li><p>新建webpack.config.js 是webpack的默认配置文件，内容为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">export</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<span class="hljs-comment">// 开发模式，production上线模式</span><br>    <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;src&#x27;</span>, <span class="hljs-string">&#x27;index.js&#x27;</span>),<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>mode模式<ul><li>development，即开发模式，那么webpack在打包时，就不会压缩代码，方便调试；</li><li>production，上线模式，webpack打包时，会压缩代码</li></ul></li></ul></li><li><p>在 package.json 文件中的script添加内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack --config webpack.config.js&quot;</span><br></code></pre></td></tr></table></figure><p>由于 webpack.config.js 是webpack默认的配置文件，因此，可以简写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912154241910.png" alt="image-20220912154241910"></p></li><li><p>在命令行中运行 <code>npm run build</code> build就是上面在package中添加的build</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912154924552.png" alt="image-20220912154924552"></p><p>文件夹中会自动新建一个dist文件夹以及bundle.js文件</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912155006831.png" alt="image-20220912155006831"></p><p>在bundle.js文件中就有src/index.js中的内容</p></li><li><p>新建文件 src/index.html</p></li><li><p>安装插件 html-webpack-plugin 用于解析 html 文件的插件</p><p><code>npm i html-webpack-plugin -D</code></p></li><li><p>安装插件 webpack-dev-server 用于启动服务的插件</p><p><code>npm i webpack-dev-server -D</code></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912161732639.png" alt="image-20220912161732639"></p></li><li><p>安装完后，再去webpack配置文件中添加配置</p><ul><li>配置插件，在plugin选项中配置<ul><li>template是要解析的html文件</li><li>filename是要产出的html文件</li></ul></li></ul><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912162503639.png" alt="image-20220912162503639"></p><ul><li><p>配置devServer，用于启动本地服务</p><ul><li>port：本地服务的端口号</li><li>directory：当前的目录（就是出口dist）</li></ul><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912164549360.png" alt="image-20220912164549360"></p></li></ul></li><li><p>配置完webpack，还需要再package.json中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server --config webpack.config.js&quot;</span><br><span class="hljs-comment">// 同样可以简写为</span><br><span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>在命令行运行 <code>npm run dev</code></p><p>在浏览器中输入： <a href="http://localhost:3000/">http://localhost:3000</a> 或 <a href="http://localhost:3000/index.html">http://localhost:3000/index.html</a> 即可访问 index.html中的内容</p></li></ol><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><p>用于将一些高级语法转换为低级语法，适应更多的浏览器</p><p>Babel 是一个工具链，主要用于在旧的浏览器或环境中将 ECMAScript 2015+ 代码转换为向后兼容版本的 JavaScript 代码</p><p>步骤如下</p><ol><li><p>安装 @babel/core @babel/preset-env  babel-loader(给webpack使用的插件) </p><p><code>npm i @babel/core @babel/preset-env babel-loader -D</code></p><ul><li><p><strong>@babel/core</strong></p><p>是babel的核心库，所有的核心Api都在这个库里，这些Api供babel-loader调用</p></li><li><p><strong>@babel/preset-env</strong></p><p>这是一个预设的插件集合，包含了一组相关的插件，Bable中是通过各种插件来指导如何进行代码转换。该插件包含所有es6转化为es5的翻译规则。我们往往需要根据兼容的浏览器的不同版本来确定需要引入哪些插件，为了解决这个问题，babel给我们提供了一个预设插件组，即@babel/preset-env，可以根据选项参数来灵活地决定提供哪些插件</p></li><li><p><strong>babel-loader</strong></p><p>前面插件都是在做es6的语法转换和弥补缺失的功能，但是当我们在使用webpack打包js时，webpack并不知道应该怎么去调用这些规则去编译js。这时就需要babel-loader了，它作为一个中间桥梁，通过调用babel/core中的api来告诉webpack要如何处理js。</p></li></ul></li><li><p>新建 <code>.babelrc</code> 的配置文件，内容为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加webpack配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>        &#123;<br>            <span class="hljs-comment">// 正则匹配所有.js的文件</span><br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>            <span class="hljs-comment">// loader: [&#x27;babel-loader&#x27;], // 用loader会报错，改为了use</span><br>            <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;babel-loader&#x27;</span>],<br>        <span class="hljs-comment">// 哪些文件需要经过loader</span><br>        <span class="hljs-attr">include</span>: path.<span class="hljs-title function_">join</span>(_dirname, <span class="hljs-string">&#x27;src&#x27;</span>),<br>            <span class="hljs-comment">// 哪些文件需要经过loder</span><br>            <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912182721085.png" alt="image-20220912182721085"></p></li><li><p>向index.js中写入一些ES6的语法，进行测试</p><p>箭头函数是ES6中的语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">a, b</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><br><span class="hljs-keyword">const</span> res = <span class="hljs-title function_">sum</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br></code></pre></td></tr></table></figure></li><li><p>在命令行运行 <code>npm run dev</code></p><ul><li><p>在网页中查看 bundle.js</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912182904278.png" alt="image-20220912182904278"></p><p>发现 index.js 中的箭头函数，已经转换成了普通的函数</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912183033206.png" alt="image-20220912183033206"></p></li></ul></li></ol><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h4 id="export与export-default"><a href="#export与export-default" class="headerlink" title="export与export default"></a>export与export default</h4><p>文件 a.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fnA</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fn&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> valA = <span class="hljs-string">&#x27;a&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> objA = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zhansan&#x27;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>文件 b.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fnB</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fn&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> valB = <span class="hljs-string">&#x27;b&#x27;</span>;<br><br><span class="hljs-keyword">const</span> objB = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lisi&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> &#123; fnB, valB, objB &#125;;<br><br></code></pre></td></tr></table></figure><p>文件 c.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fn&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> val = <span class="hljs-string">&#x27;c&#x27;</span>;<br><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;wangwu&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123; fn, val, obj &#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意 export 和 export default 的区别</p><p>使用 export 导出的文件，在导入时可以用 解构</p><p>使用 export default 导出的文件，在导入时不能用 解构</p></blockquote><p>如下所示</p><p>文件index.js 在导入时的不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;fnA, valA, objA&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./a&#x27;</span><br><span class="hljs-keyword">import</span> &#123; fnB, valB, objB &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./b&#x27;</span><br><span class="hljs-keyword">import</span> c <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./c&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>解构出来的变量或函数，可以直接使用</li><li>直接导入的文件，需要通过 .fn()</li></ul><h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><p>运行环境即浏览器（server端有 nodejs）</p><h2 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h2><h3 id="内容概括"><a href="#内容概括" class="headerlink" title="内容概括"></a>内容概括</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><ol><li>从输入url到渲染出页面的整个过程<ul><li>现在下载资源</li><li>再渲染页面</li></ul></li><li>window.onload 和 DOMContentLoaded 的区别</li></ol><h4 id="知识点-7"><a href="#知识点-7" class="headerlink" title="知识点"></a>知识点</h4><ol><li>加载资源的形式</li><li>加载资源的过程</li><li>渲染页面的过程</li></ol><h5 id="资源的形式"><a href="#资源的形式" class="headerlink" title="资源的形式"></a>资源的形式</h5><ul><li>html代码</li><li>媒体文件，如图片、视频等、</li><li>JavaScript css</li></ul><h5 id="加载过程"><a href="#加载过程" class="headerlink" title="加载过程"></a>加载过程</h5><ul><li>DNS解析: 域名 =》 IP地址</li><li>浏览器根据IP地址向服务器发起http请求</li><li>服务器处理http请求，并返回浏览器</li></ul><h5 id="渲染过程"><a href="#渲染过程" class="headerlink" title="渲染过程"></a>渲染过程</h5><ul><li><p>根据 HTML 代码生成 DOM Tree</p></li><li><p>根据 CSS 代码生成 CSSDOM</p></li><li><p>将 DOM Tree 和 CSSDOM 整合形成 Render Tree</p></li><li><p>根据 Render Tree 渲染页面</p></li><li><p>遇到 &lt;script&gt; 则停止渲染，优先加载并执行Js代码，完成再继续</p><p>原因：因为 Js线程 和渲染线程共用一个线程，而Js里面数据可能会改变结构，因此需要先执行JS</p></li><li><p>直至把Render Tree渲染完成</p></li></ul><h5 id="window-onload-和-DOMContentLoaded"><a href="#window-onload-和-DOMContentLoaded" class="headerlink" title="window.onload 和 DOMContentLoaded"></a>window.onload 和 DOMContentLoaded</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 页面的全部资源加载完才会执行，包括图片和视频等</span><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// DOM渲染完即可执行，此时图片、视频可能还没加载完</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>更加倾向于选择DOMContentLoaded区监听加载，因此图片、视频等是否加载完毕，一般不会影响后续的操作，使用 DOMContentLoaded 会更快</p><p>执行顺序就是：<strong>DOMContentLoaded &gt; 图片加载完毕 &gt; window.onload</strong></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="为何建议将CSS放在head中？"><a href="#为何建议将CSS放在head中？" class="headerlink" title="==为何建议将CSS放在head中？=="></a>==为何建议将CSS放在head中？==</h4><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912184936821.png" alt="image-20220912184936821"></p><p>原因：</p><p>若css文件放在body最后，那么html会先渲染，若css里面的修改了结构的样式，在一些旧的浏览器中可能会有闪现的问题，就是会先出现没有css样式的页面，然后再出现添加了样式的页面，用户体验很不好</p><h4 id="为何建议将JS放在body的最后？"><a href="#为何建议将JS放在body的最后？" class="headerlink" title="==为何建议将JS放在body的最后？=="></a>==为何建议将JS放在body的最后？==</h4><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912190121310.png" alt="image-20220912190121310"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912190152454.png" alt="image-20220912190152454"></p><p>原因：若放在中间，那么页面渲染一部分后，就会停止渲染，转而执行js文件，等js文件执行完毕后，才会继续渲染，用户看不到完整的页面。</p><p>而需要达到的效果是，用户开始可以看到完整页面，等到最后执行js文件时，一并更新到页面上</p><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="性能优化原则"><a href="#性能优化原则" class="headerlink" title="性能优化原则"></a>性能优化原则</h3><ol><li>多使用内存、缓存或其他方法</li><li>减少CPU计算量，减少网络加载耗时</li><li>空间换时间</li></ol><h4 id="让加载更快"><a href="#让加载更快" class="headerlink" title="让加载更快"></a>让加载更快</h4><ol><li><p>减少资源体积：<strong>压缩代码</strong></p></li><li><p>减少访问次数，<strong>合并代码</strong>，SSR服务器端渲染，缓存</p><p>如： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;a.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;b.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;c.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将三个js文件合并为同一个文件 abc.js, 减少请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;abc.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912201938604.png" alt="image-20220912201938604"></p></li><li><p>使用更快的网络：CDN</p></li></ol><h4 id="让渲染更快"><a href="#让渲染更快" class="headerlink" title="让渲染更快"></a>让渲染更快</h4><ol><li><p>CSS放在head，js放在body最下面</p></li><li><p>尽早开始执行js，用DOMContentLoaded触发</p></li><li><p>懒加载（图片懒加载，上滑加载更多）</p></li><li><p>对DOM查询进行缓存</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912201857687.png" alt="image-20220912201857687"></p></li><li><p>频繁DOM操作，合并到一起插入DOM结构</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912201834235.png" alt="image-20220912201834235"></p></li><li><p>节流 throttle 防抖debounce</p></li></ol><h3 id="防抖debounce"><a href="#防抖debounce" class="headerlink" title="防抖debounce"></a>防抖debounce</h3><p>用户输入结束或暂停时，才会触发change事件</p><h4 id="防抖的应用"><a href="#防抖的应用" class="headerlink" title="防抖的应用"></a>防抖的应用</h4><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912204652968.png" alt="image-20220912204652968"></p><h4 id="封装为函数"><a href="#封装为函数" class="headerlink" title="封装为函数"></a>封装为函数</h4><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912203750662.png" alt="image-20220912203750662"></p><p><strong>注意：</strong></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912204354590.png" alt="image-20220912204354590"></p><p><strong>注意：</strong></p><blockquote><ol><li>实际 fn.apply(this.arguments) 可以直接写 fn() 但为了更严谨 用了apply</li><li><code>debounce(function() &#123;&#125;)</code>会将事件对象e传递给里面的函数，若<code>fn.apply(this,arguments)</code>没有写arguments 那么 fn 就不能接收到 debounce 传递过来的事件对象</li></ol></blockquote><h3 id="节流throttle"><a href="#节流throttle" class="headerlink" title="节流throttle"></a>节流throttle</h3><h4 id="节流的应用"><a href="#节流的应用" class="headerlink" title="节流的应用"></a>节流的应用</h4><p>拖拽一个元素，需要随时拿到改元素被拖拽的位置</p><p>节流：无论拖拽速度有多快，都会每隔100ms触发一次</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912205146474.png" alt="image-20220912205146474"></p><h4 id="封装为函数-1"><a href="#封装为函数-1" class="headerlink" title="封装为函数"></a>封装为函数</h4><p>注意：使用时下面的function里面要写参数e</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912205454105.png" alt="image-20220912205454105"></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220912210352015.png" alt="image-20220912210352015"></p><blockquote><p>为何要使用apply？</p></blockquote><p>如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;&#125;)<br></code></pre></td></tr></table></figure><p>一般会用event来接收监听到的事件对象，而在上面的例子中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">div1.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;drag&#x27;</span>, <span class="hljs-title function_">throttle</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">offsetX</span>, event.<span class="hljs-property">offsetY</span>)<br>&#125;))<br></code></pre></td></tr></table></figure><p>throttle也是一个函数，因此事件对象就传递给了里面参数function，function需要接收，因此使用了apply</p><h2 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h2><p>常见的web前端攻击方式有些？</p><ul><li><p>XSS</p></li><li><p>XSRF-跨站请求伪造 </p></li></ul><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>某用户A逛网站时发现某可以分享文章的论坛，非常感兴趣，写下以下文章<br>用户A：你好，我是用户A，<code>&lt;script&gt;alert(3)&lt;/script&gt;</code><br>然后用户A将此文章提交至论坛上，假设论坛没有做任何安全防护。<br>用户B看见了此文章，点进去时会出现以下情景，网站蹦出了一个alert事件。<br>这种就是用户B被脚本进行了攻击。</p><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>跨站脚本攻击（也称为XSS）指利用网站漏洞从用户那里恶意盗取信息</p><h5 id="xss防御"><a href="#xss防御" class="headerlink" title="xss防御"></a>xss防御</h5><p>由于xss往往会利用js脚本进行攻击，所以我们可以利用以下方式进行防御</p><p>1、输入过滤<br>对用户的输入进行过滤，包括text、post等等所有输入进行可靠性检测。<br>也可以制作一个白名单，一但输入中的字符不在白名单内，自动过滤掉。<br>2、转义<br>与正则的思想类似，对比如&lt;、&gt;等等特殊字符进行转义处理。</p><p>如：</p><blockquote><p>&lt; 变为 <code>&amp;lt;</code> </p><p>&gt; 变为 <code>&amp;gt;</code></p><p>由此，&lt;script&gt; 就变为 <code>&amp;lt;script&amp;gt;</code> 直接显示，而不是作为脚本执行</p></blockquote><h5 id="防御工具"><a href="#防御工具" class="headerlink" title="防御工具"></a>防御工具</h5><p>安装xss模块，参考：<a href="https://github.com/leizongmin/js-xss/blob/master/README.zh.md">https://github.com/leizongmin/js-xss/blob/master/README.zh.md</a></p><ol><li><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install xss<br></code></pre></td></tr></table></figure></li><li><p>使用</p><ul><li><p>在Node.js中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xss = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;xss&quot;</span>);<br><span class="hljs-keyword">var</span> html = <span class="hljs-title function_">xss</span>(<span class="hljs-string">&#x27;&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(html);<br></code></pre></td></tr></table></figure></li><li><p>在浏览器中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://rawgit.com/leizongmin/js-xss/master/dist/xss.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 使用函数名 filterXSS，用法一样</span></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> html = <span class="hljs-title function_">filterXSS</span>(<span class="hljs-string">&#x27;&lt;script&gt;alert(&quot;xss&quot;);&lt;/scr&#x27;</span> + <span class="hljs-string">&quot;ipt&gt;&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-title function_">alert</span>(html);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>说明：请勿将 URL <a href="https://rawgit.com/leizongmin/js-xss/master/dist/xss.js">https://rawgit.com/leizongmin/js-xss/master/dist/xss.js</a> 用于生产环境。</strong></p></li></ul></li><li><p>自定义过滤规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">options = &#123;&#125;; <span class="hljs-comment">// 自定义规则</span><br>html = <span class="hljs-title function_">xss</span>(<span class="hljs-string">&#x27;&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;&#x27;</span>, options);<br></code></pre></td></tr></table></figure></li></ol><h3 id="XSRF"><a href="#XSRF" class="headerlink" title="XSRF"></a>XSRF</h3><h5 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h5><p>1、用户A登陆了某银行网站取钱，此时会保留cookie；<br>(大家有没有遇见过，如果在短时间内登陆某APP，关闭APP后(不是退出账号密码)，快速再次登陆此App，此时会不用再次登陆app)<br>2、用户B在知道A在某银行取钱后，利用各种信息诱导进入某另一网站***.***xxx.com<br>3、此时网站xx.xxx.com存在一张图片，图片指向一个取钱的http请求<br><img src=http://www.xxx.com/xxxx><br>4、此时如果用户A点击了该图片，他就会丢失1000元。因为该请求是从A用户的网站发出去的，而不巧的是用户A刚不久之前访问某银行网站，此时请求会携带有效cookie，并且服务器的session还有效。<br>5、A的钱被偷了。</p><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><p>xsrf 的全称是“跨站请求伪造”，它利用的是服务器对客户端浏览器的信任，从而伪造用户向服务器发送请求，从而欺骗服务器达到一些目的</p><h5 id="XSRF防御"><a href="#XSRF防御" class="headerlink" title="XSRF防御"></a>XSRF防御</h5><p>1、token验证<br>由于恶意用户无法窃取cookie，只能利用用户cookie模拟未携带token的http请求，那只要在服务器端进行token验证就可以防御xsrf的攻击。比如我们可以将token存储在localStorage中。<br>2、验证码<br>需要用户自己来填写验证码从而识别是否是用户主动发起的该请求。<br>其优点：简单粗暴、低成本<br>缺点：用户体验不好，需要多次验证。<br>3、Referer 字段<br>利用 HTTP 头中的 Referer 判断请求来源是否合法，Referer记录了该 HTTP 请求的来源地址。</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ul><li>JSON 是用于<strong>存储和传输数据</strong>的格式。</li><li>JSON 通常用于服务端向网页<strong>传递数据</strong></li><li>JSON 使用 JavaScript 语法，但是 JSON 格式仅仅是一个文本。<br>文本可以被任何编程语言读取及作为<strong>数据格式传递</strong></li></ul><h3 id="JSON-语法规则"><a href="#JSON-语法规则" class="headerlink" title="JSON 语法规则"></a>JSON 语法规则</h3><ul><li>数据为 键/值 对，都以 双引号 包裹</li><li>数据由逗号分隔。</li><li>大括号保存对象</li><li>方括号保存数组</li></ul><h3 id="JSON数据"><a href="#JSON数据" class="headerlink" title="JSON数据"></a>JSON数据</h3><p>JSON 数据格式为 键/值 对，就像 JavaScript 对象属性。</p><p>键/值对包括字段名称（在双引号中），后面一个冒号，然后是值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Runoob&quot;</span><br></code></pre></td></tr></table></figure><h3 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h3><p>SON 对象保存在大括号内。</p><p>就像在 JavaScript 中, 对象可以保存多个 键/值 对：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Runoob&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;www.runoob.com&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="JSON数组"><a href="#JSON数组" class="headerlink" title="JSON数组"></a>JSON数组</h3><p>JSON 数组保存在中括号内。</p><p>就像在 JavaScript 中, 数组可以包含对象：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;sites&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Runoob&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;www.runoob.com&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Google&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;www.google.com&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Taobao&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;www.taobao.com&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h3 id="JSON与JavaScript"><a href="#JSON与JavaScript" class="headerlink" title="JSON与JavaScript"></a>JSON与JavaScript</h3><h4 id="两者之间的转换"><a href="#两者之间的转换" class="headerlink" title="两者之间的转换"></a>两者之间的转换</h4><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">JSON.parse()</td><td align="left">用于将一个 JSON 字符串转换为 JavaScript 对象。</td></tr><tr><td align="left">JSON.stringify()</td><td align="left">用于将 JavaScript 值转换为 JSON 字符串。</td></tr></tbody></table><h4 id="两者之间的关系"><a href="#两者之间的关系" class="headerlink" title="两者之间的关系"></a>两者之间的关系</h4><p>JSON 是 JS 对象的字符串表示法。它使用文本表示一个 JS 对象的信息，（JSON）本质是一个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//这是一个js对象，注意js对象的键名也是可以使用引号包裹的,这里的键名就不用引号包含</span><br><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;World&#x27;</span>&#125;; <br><br><span class="hljs-comment">//这是一个 JSON 字符串，本质是一个字符串</span><br><span class="hljs-keyword">var</span> json = <span class="hljs-string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; <br></code></pre></td></tr></table></figure><p>JSON转JS对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>); <br><span class="hljs-comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;  一个对象</span><br></code></pre></td></tr></table></figure><p>JS对象转JSON字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> json = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;World&#x27;</span>&#125;); <br><span class="hljs-comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;  一个JSON格式的字符串</span><br></code></pre></td></tr></table></figure><h1 id="JS开发的经典技巧"><a href="#JS开发的经典技巧" class="headerlink" title="JS开发的经典技巧"></a>JS开发的经典技巧</h1><p>1 数组之间的追加</p><blockquote><p>Array.prototype.push.apply()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array1 = [<span class="hljs-number">12</span> , <span class="hljs-string">&quot;foo&quot;</span> , &#123;name <span class="hljs-string">&quot;Joe&quot;</span>&#125; , -<span class="hljs-number">2458</span>];<br><span class="hljs-keyword">var</span> array2 = [<span class="hljs-string">&quot;Doe&quot;</span> , <span class="hljs-number">555</span> , <span class="hljs-number">100</span>];<br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span>.<span class="hljs-title function_">apply</span>(array1, array2);<br><span class="hljs-comment">/* array1 值为  [12 , &quot;foo&quot; , &#123;name &quot;Joe&quot;&#125; , -2458 , &quot;Doe&quot; , 555 , 100] */</span><br></code></pre></td></tr></table></figure><p>2 获取指定范围内的随机数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (max - min + <span class="hljs-number">1</span>)) + min;<br></code></pre></td></tr></table></figure><p>3 对象转换为数组</p><blockquote><p>3种方式：</p><ol><li>Array.prototype.slice.call(obj)</li><li>Array.from(obj) ES6新增</li><li>[…obj]</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> argArray = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);<br><br></code></pre></td></tr></table></figure><p>4 验证是否为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isArray</span>(<span class="hljs-params">obj</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(obj) === <span class="hljs-string">&#x27;[object Array]&#x27;</span> ;<br>&#125;<br><span class="hljs-comment">// 2</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj);<br><br><span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>5 获取数组中的最大值和最小值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span>  numbers = [<span class="hljs-number">5</span>, <span class="hljs-number">458</span> , <span class="hljs-number">120</span> , -<span class="hljs-number">215</span> , <span class="hljs-number">228</span> , <span class="hljs-number">400</span> , <span class="hljs-number">122205</span>, -<span class="hljs-number">85411</span>]; <br><span class="hljs-keyword">var</span> maxInNumbers = <span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">Math</span>, numbers); <br><span class="hljs-keyword">var</span> minInNumbers = <span class="hljs-title class_">Math</span>.<span class="hljs-property">min</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">Math</span>, numbers);<br></code></pre></td></tr></table></figure><p>6 清空数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myArray = [<span class="hljs-number">12</span> , <span class="hljs-number">222</span> , <span class="hljs-number">1000</span> ];  <br>myArray.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">// myArray will be equal to [].</span><br></code></pre></td></tr></table></figure><p>7 不要直接从数组中<code>delete</code>或<code>remove</code>元素</p><ul><li>如果对数组元素直接使用<code>delete</code>，其实并没有删除，只是将元素置为了<code>undefined</code>。数组元素删除应使用<code>splice</code></li><li>删除对象的属性时可以使用<code>delete</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 不能照下面这样做</span><br><span class="hljs-keyword">var</span> items = [<span class="hljs-number">12</span>, <span class="hljs-number">548</span> ,<span class="hljs-string">&#x27;a&#x27;</span> , <span class="hljs-number">2</span> , <span class="hljs-number">5478</span> , <span class="hljs-string">&#x27;foo&#x27;</span> , <span class="hljs-number">8852</span>, , <span class="hljs-string">&#x27;Doe&#x27;</span> ,<span class="hljs-number">2154</span> , <span class="hljs-number">119</span> ]<br>items.<span class="hljs-property">length</span><span class="hljs-comment">// return 11</span><br><span class="hljs-keyword">delete</span> items[<span class="hljs-number">3</span>]<br>items.<span class="hljs-property">length</span><span class="hljs-comment">// return 11</span><br>items<span class="hljs-comment">// [12, 548, &#x27;a&#x27;, empty, 5478, &#x27;foo&#x27;, 8852, empty, &#x27;Doe&#x27;, 2154, 119]</span><br>items[<span class="hljs-number">3</span>]<span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 应该这样做</span><br><span class="hljs-keyword">var</span> items = [<span class="hljs-number">12</span>, <span class="hljs-number">548</span> ,<span class="hljs-string">&#x27;a&#x27;</span> , <span class="hljs-number">2</span> , <span class="hljs-number">5478</span> , <span class="hljs-string">&#x27;foo&#x27;</span> , <span class="hljs-number">8852</span>, , <span class="hljs-string">&#x27;Doe&#x27;</span> ,<span class="hljs-number">2154</span> , <span class="hljs-number">119</span> ]<br>items.<span class="hljs-property">length</span><span class="hljs-comment">// return 11</span><br>items.<span class="hljs-title function_">splice</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)<span class="hljs-comment">// [2]</span><br>items.<span class="hljs-property">length</span><span class="hljs-comment">// return 10</span><br></code></pre></td></tr></table></figure><p>8 在条件中使用逻辑与或</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = <span class="hljs-number">10</span>;  <br>foo == <span class="hljs-number">10</span> &amp;&amp; <span class="hljs-title function_">doSomething</span>(); <span class="hljs-comment">// is the same thing as if (foo == 10) doSomething(); </span><br>foo == <span class="hljs-number">5</span> || <span class="hljs-title function_">doSomething</span>(); <span class="hljs-comment">// is the same thing as if (foo != 5) doSomething();</span><br></code></pre></td></tr></table></figure><p>逻辑或还可用来设置默认值，比如函数参数的默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params">arg1</span>)&#123; <br>    arg1 = arg1 || <span class="hljs-number">10</span>; <span class="hljs-comment">// arg1 will have 10 as a default value if it’s not already set</span><br>&#125;<br></code></pre></td></tr></table></figure><p>9 使得<code>map()</code>函数方法对数据循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> squares = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>].<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;  <br>    <span class="hljs-keyword">return</span> val * val;  <br>&#125;); <br><span class="hljs-comment">// squares will be equal to [1, 4, 9, 16]</span><br></code></pre></td></tr></table></figure><h1 id="面试实战"><a href="#面试实战" class="headerlink" title="面试实战"></a>面试实战</h1><p>学习/项目过程中遇到的难点以及如何解决的？</p><ul><li>this指向问题、原型链问题、</li><li>魔方项目中，控制旋转的问题</li></ul><h3 id="1、防抖与节流"><a href="#1、防抖与节流" class="headerlink" title="1、防抖与节流"></a>1、防抖与节流</h3><ul><li>防抖应用：输入结束后，再发请求 <ul><li>在定时器存在的过程中，清空定时器（定时器中的处理逻辑不会执行）</li></ul></li><li>节流：鼠标连续点击，或跟随鼠标移动，每隔一段时间再发请求<ul><li>在定时器存在的过程中，直接返回（定时器中的逻辑会执行，每隔一段指定时间就会执行）</li></ul></li></ul><h3 id="2、异步如何改为同步"><a href="#2、异步如何改为同步" class="headerlink" title="2、异步如何改为同步"></a>2、异步如何改为同步</h3><p>await async</p><h3 id="3、父子通信，共享数据中，父传给子组件的数据，是否可以通过子组件更改"><a href="#3、父子通信，共享数据中，父传给子组件的数据，是否可以通过子组件更改" class="headerlink" title="3、父子通信，共享数据中，父传给子组件的数据，是否可以通过子组件更改"></a>3、父子通信，共享数据中，父传给子组件的数据，是否可以通过子组件更改</h3><ul><li>不可以，数据是单向的</li></ul><h3 id="4、在父组件中使用ref-是否可以更改子组件数据"><a href="#4、在父组件中使用ref-是否可以更改子组件数据" class="headerlink" title="4、在父组件中使用ref 是否可以更改子组件数据"></a>4、在父组件中使用ref 是否可以更改子组件数据</h3><ul><li>可以，在父元素可以通过ref来获取子组件 </li><li>$refs.子组件名</li></ul><h3 id="5、作用域问题（全局、局部）"><a href="#5、作用域问题（全局、局部）" class="headerlink" title="5、作用域问题（全局、局部）"></a>5、作用域问题（全局、局部）</h3><h3 id="6、当使用echarts时，加载页面，有时候会卡顿，原因是什么？"><a href="#6、当使用echarts时，加载页面，有时候会卡顿，原因是什么？" class="headerlink" title="6、当使用echarts时，加载页面，有时候会卡顿，原因是什么？"></a>6、当使用echarts时，加载页面，有时候会卡顿，原因是什么？</h3><p>数据量过大，由于使用了v-model 双向数据绑定，解决的关键就是：解除绑定</p><h3 id="7、使用v-for时，为什么要绑定key？"><a href="#7、使用v-for时，为什么要绑定key？" class="headerlink" title="7、使用v-for时，为什么要绑定key？"></a>7、使用v-for时，为什么要绑定key？</h3><p>为每一个v-for的元素绑定一个key</p><h3 id="8、如何将页面的表单一键清空？"><a href="#8、如何将页面的表单一键清空？" class="headerlink" title="8、如何将页面的表单一键清空？"></a>8、如何将页面的表单一键清空？</h3><p>​    1、暴力清空：遍历表单的每一项，将表单置为null</p><p>​    2、利用深拷贝：将表单原来的默认值拷贝一份，需要清空时，再将保存的默认值深拷贝给表单</p><h3 id="9、如何使用路由切换页面"><a href="#9、如何使用路由切换页面" class="headerlink" title="9、如何使用路由切换页面"></a>9、如何使用路由切换页面</h3><ul><li><p>router.push()</p></li><li><p>router.replace() 直接替换 不可回退</p></li><li><p>router.go() 前进或回退几页</p></li></ul><h3 id="10、js的数据遍历有几种：（一定要记住ES5新增的）"><a href="#10、js的数据遍历有几种：（一定要记住ES5新增的）" class="headerlink" title="10、js的数据遍历有几种：（一定要记住ES5新增的）"></a>10、js的数据遍历有几种：（一定要记住ES5新增的）</h3><p>for while do…while</p><p>forEach map filter </p><p>some find every</p><h3 id="11、js数据类型有几种？（2次）"><a href="#11、js数据类型有几种？（2次）" class="headerlink" title="11、js数据类型有几种？（2次）"></a>11、js数据类型有几种？（2次）</h3><h3 id="12、判断js数据类型的方式"><a href="#12、判断js数据类型的方式" class="headerlink" title="12、判断js数据类型的方式"></a>12、判断js数据类型的方式</h3><p>typeof</p><p>instanceof</p><h3 id="13、判断是否为数组的方式"><a href="#13、判断是否为数组的方式" class="headerlink" title="13、判断是否为数组的方式"></a>13、判断是否为数组的方式</h3><p>instanceof isArray</p><h3 id="14、什么是类数组？常见的类数组"><a href="#14、什么是类数组？常见的类数组" class="headerlink" title="14、什么是类数组？常见的类数组"></a>14、什么是类数组？常见的类数组</h3><ul><li><p>类数组可以遍历，但是不能使用数组的方法</p></li><li><p>常见的类数组</p><ul><li>~~~js<br>// 现在divs就是一个类数组<br>let divs = document.querySelectorAll(‘div’);<br>// 将伪数组转换为数组后，就可以使用数组的方法<br>// 将伪数组转化为类数组<br>// 方式1<br>divs1 = […divs];    // 现在divs1是一个数组// 方式2<br>divs2 = Array.from(divs) // divs是一个数组<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>  * 获取函数参数的`arguments`也是一个类数组<br><br><br><br>### <span class="hljs-number">15</span>、除了 console.log 还有console. 什么<br><br>* console.debug()、 console.info()、 console.warn()、 console.error()<br><br>  这四个方法和console.log()一模一样，差别在于输出的颜色与图标不相同<br><br>* console.dir()<br><br><br><br>### <span class="hljs-number">16</span>、<span class="hljs-number">0.1</span>+<span class="hljs-number">0.2</span>为什么不等于 <span class="hljs-number">0.3</span>？ 实际遇到，应该如何解决？<br><br>因为**在JS内部所有的计算都是以二进制方式计算的。** 所以运算 <span class="hljs-number">0.1</span>+ <span class="hljs-number">0.2</span> 时要先把 <span class="hljs-number">0.1</span>和 <span class="hljs-number">0.2</span> 从十进制转成二进制，在 <span class="hljs-number">0.1</span>+<span class="hljs-number">0.2</span> 的计算过程中发生了两次精度丢失。<br><br>### <span class="hljs-number">17</span>、evenLoop<br><br>![image<span class="hljs-number">-20220419183956503</span>](https:<span class="hljs-comment">//oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220419183956503.png)</span><br><br><br><br>![](https:<span class="hljs-comment">//oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1.png)</span><br><br>参考https:<span class="hljs-comment">//zh.javascript.info/event-loop 继续补充</span><br><br>### <span class="hljs-number">18</span>、addEventListener的三个参数<br><br>* 第三个参数：<br>  * true 捕获阶段<br>  * false 冒泡阶段<br><br>### <span class="hljs-number">19</span>、HTML5新增了哪些标签<br><br>* 几种语义化标签<br><br>### <span class="hljs-number">20</span>、简述盒子模型<br><br>* <br><br>### <span class="hljs-number">21</span>、如何清除浮动<br><br>为何要清除浮动<br><br>* 额外标签法<br><br>  <br><br>* 父元素添加overflow:hidden 、auto 、 scroll<br><br>* 添加伪元素<br><br>### <span class="hljs-number">22</span>、定位有哪些？relative和absolute的区别<br><br>* 绝对定位absolute不再占有原来的位置<br><br>* 固定定位fixed以浏览器为参照点，不随滚动条滚动，不再占有原来的位置（脱标）<br><br>* 粘性定位sticky，相当于相对定位和固定定位的结合，占有原来的位置，以浏览器窗口为参照点移动元素，必须添加 top left .. 这四者中的一个才有效（通常与页面滚动搭配）<br><br>  ![image<span class="hljs-number">-20220927233233645</span>](https:<span class="hljs-comment">//oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220927233233645.png)</span><br><br>浮动float与定位：<br><br>* 浮动元素只会压住它下面标准流的盒子，不会压住盒子里面需要显示的文字、图片等<br><br>  （补充：浮动产生的最初目的是为了做文字环绕效果的，即文字可以围绕浮动元素，故浮动元素不会压住下面标准流盒子里面的文字或者图片）<br><br>* 但绝对定位或固定定位会压住下面的标准流所有内容<br><br><br><br>### <span class="hljs-number">23</span>、cookie localStorage sessionStorage<br><br>### <span class="hljs-number">24</span>、css有哪些选择器<br><br>&lt;p style=<span class="hljs-string">&quot;color:red&quot;</span>&gt;<br>    注意：类选择器、属性选择器、伪类选择器，权重为<span class="hljs-number">10</span><br>&lt;/p&gt;<br><br>&lt;p style=<span class="hljs-string">&quot;color:red&quot;</span>&gt;<br>    区别nth-child(n)与nth-<span class="hljs-keyword">of</span>-type(n):<br>&lt;/p&gt;<br><br>* nth-child(n)对父元素里面所有孩子排序选择（序号是固定的），先找到第n个孩子，然后看看是否和E匹配<br>* nth-<span class="hljs-keyword">of</span>-type(n)对父元素里面**指定**子元素进行排序选择，先去匹配E，然后再根据E找第n个孩子<br><br>### <span class="hljs-number">25</span>、伪元素选择器和伪类元素选择器分别是什么<br><br>* 伪元素：<br><br>  ::before  ::after<br><br>* 伪类元素选择器<br><br>  结构伪类元素选择器:first-child <br>  <br>  :hover <br><br>### **<span class="hljs-number">26</span>、src、href的区别**<br><br>~~~html<br>&lt;img src=<span class="hljs-string">&quot;img/girl.jpg&quot;</span>&gt;<br>  <br>&lt;iframe src=<span class="hljs-string">&quot;top.html&quot;</span>&gt;<br>  <br>&lt;script src=<span class="hljs-string">&quot;show.js&quot;</span>&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>src 主要用于元素替换，在请求src资源时会将其指向的资源下载并应用到当前文档中</p></li><li><p>href 用于和相关文档和外部资源<strong>建立</strong>相关<strong>链接</strong>。<br>href 属性说明本地Web资源和定义的资源建立了链接</p></li><li><p>遇到href，页面会并行加载后续内容；而src则不同，浏览器需要加载完毕src的内容才会继续往下走</p></li></ul><h3 id="27、link与-import的区别"><a href="#27、link与-import的区别" class="headerlink" title="27、link与@import的区别"></a><strong>27、link与@import的区别</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;common.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>@import在css中使用 表示导入<strong>外部</strong>样式表，<strong>只能</strong>加载CSS</li><li>@import<strong>只在IE5</strong>以上才能识别，而link是HTML标签，无兼容问题</li><li>link方式的样式的权重 <strong>高于</strong>@import的权重</li><li>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载</li></ul><h3 id="28、get和post的区别是什么？"><a href="#28、get和post的区别是什么？" class="headerlink" title="28、get和post的区别是什么？"></a><strong>28、get和post的区别是什么？</strong></h3><p>一、功能不同</p><p>1、get是从服务器上获取数据。</p><p>2、post是向服务器传送数据。</p><p>二、过程不同</p><p>GET 提交参数一般显示在 URL 上，POST 通过表单提交不会显示在 URL 上，POST 更具隐蔽性</p><p>1、get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。</p><p>2、post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。</p><p>三、获取值不同</p><p>1、对于get方式，服务器端用Request.QueryString获取变量的值。</p><p>2、对于post方式，服务器端用Request.Form获取提交的数据。</p><p>四、传送数据量不同</p><p>1、get传送的数据量较小，不能大于2KB。</p><p>2、post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4中最大量为80KB，IIS5中为100KB。</p><p>五、安全性不同</p><p>1、get安全性非常低。</p><p>2、post安全性较高</p><p>建议：在做数据查询时，建议用Get方式；而在做数据添加、修改或删除时，建议用Post方式</p><h3 id="29、css预处理器"><a href="#29、css预处理器" class="headerlink" title="29、css预处理器"></a><strong>29、css预处理器</strong></h3><p>Less sass</p><h3 id="30、vuex的模块想要修改根模块的state，如何修改？"><a href="#30、vuex的模块想要修改根模块的state，如何修改？" class="headerlink" title="30、vuex的模块想要修改根模块的state，如何修改？"></a><strong>30、vuex的模块想要修改根模块的state，如何修改？</strong></h3><p>通过 rootState 可以拿到根模块中的数据</p><h3 id="31、css有哪两种盒子模型，特点是什么？"><a href="#31、css有哪两种盒子模型，特点是什么？" class="headerlink" title="31、css有哪两种盒子模型，特点是什么？"></a><strong>31、css有哪两种盒子模型，特点是什么？</strong></h3><p>标准盒子模型和IE盒子模型</p><p>参考链接<a href="https://blog.csdn.net/Kar29/article/details/120273060">https://blog.csdn.net/Kar29/article/details/120273060</a></p><p><strong>标准盒子模型</strong></p><p>width = 内容（content）的宽度</p><p>height = 内容（content）的高度</p><p>总宽度：width + margin（左右） + padding（左右） + border（左右）</p><p>总高度：height +margin（上下） + padding（上下） + border（上下）</p><p>增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加<strong>元素框的总尺寸</strong></p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221012211047582.png" alt="image-20221012211047582" style="zoom: 50%;" /><p><strong>IE盒子模型</strong></p><p>width = border + padding + 内容（content）的宽度</p><p>height = border + padding + 内容（content）的高度</p><p>总宽度：width + margin（左右）（即 width 已经包含了 padding 和 border）</p><p>总高度：height + margin（上下）（即 height 已经包含了 padding 和 border）</p><p>设置 padding 、border 后，<strong>真正宽度或高度就会改变</strong></p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20221012211411564.png" alt="image-20221012211411564" style="zoom:50%;" /><h3 id="32、跨域有什么方法？"><a href="#32、跨域有什么方法？" class="headerlink" title="32、跨域有什么方法？"></a>32、跨域有什么方法？</h3><ul><li><p>JSONP</p></li><li><p>CORS，但需要后端来配置</p><ul><li><p>CORS跨域优点：</p><p>支持所有类型的HTTP请求，功能完善。<br>通过onerror事件监听进⾏调⽤错误处理；<br>通过Access-Control-Allow-Origin进⾏资源访问授权。</p></li><li><p>CORS跨域缺点：</p><p>目前主流浏览器（IE10及以上）都支持CORS，但IE8和IE9需要使⽤XDomainRequest对象进⾏兼容，IE7及以下浏览器不⽀持</p></li></ul></li></ul><h3 id="33、使用JSONP来跨域有什么限制？"><a href="#33、使用JSONP来跨域有什么限制？" class="headerlink" title="33、使用JSONP来跨域有什么限制？"></a>33、使用JSONP来跨域有什么限制？</h3><p>只支持GET请求，不支持POST请求以及⼤数据量的请求，而且也无法拿到相关的返回头，状态码等数据。<br>callback参数恶意注⼊，可能会造成xss漏洞</p><h3 id="34、vue-router有哪几种钩子"><a href="#34、vue-router有哪几种钩子" class="headerlink" title="34、vue-router有哪几种钩子"></a>34、vue-router有哪几种钩子</h3><ul><li><p>全局导航钩子函数</p><ul><li><p>vue router.beforeEach（全局前置守卫）</p><p>每次每一个路由改变的时候都得执行一遍</p></li><li><p>vue router.afterEach（全局后置守卫）</p><p>router.beforeEach 是页面加载之前，相反router.afterEach是页面加载之后</p><p>一般用来判断权限,以及以及页面丢失时候需要执行的操作</p></li></ul></li><li><p>路由独享的守卫(路由内钩子)</p><ul><li>beforeEnter 守卫</li></ul></li><li><p>组件内的守卫(组件内钩子)</p><ul><li><p>beforeRouteEnter</p></li><li><p>beforeRouteUpdate</p></li><li><p>beforeRouteLeave</p><p>当一个组件中有一个定时器时, 在路由进行切换的时候, 可使用<code>beforeRouteLeave</code>将定时器进行清楚, 以免占用内存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">beforeRouteLeave (to, <span class="hljs-keyword">from</span>, next) &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>) <span class="hljs-comment">//清除定时器</span><br>  <span class="hljs-title function_">next</span>()<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="35、vue组件中name属性的作用"><a href="#35、vue组件中name属性的作用" class="headerlink" title="35、vue组件中name属性的作用"></a>35、vue组件中name属性的作用</h3><ul><li>当使用组件递归调用时，被递归调用的组件必须定义name属性，因为在组件里面<strong>调用自己时</strong>，<strong>不是</strong>使用的在components里注册的组件，而是使用<strong>根据name属性查找组件</strong></li><li>keep-alive包裹动态组件时，会缓存不活动的组件实例，会出现include和exclude属性，包含或者排除指定<strong>name组件</strong></li><li>vue-tools插件调试时没有name属性会报错或警告</li></ul><h3 id="36、静态属性和静态方法"><a href="#36、静态属性和静态方法" class="headerlink" title="36、静态属性和静态方法"></a>36、静态属性和静态方法</h3><p>静态方法是使用 static 关键字修饰的方法，又叫类方法，属于类的，但不属于对象，在实例化对象之前可以通过 <strong>类名.方法名</strong> 调用静态方法。</p><p>静态方法不能在对象上调用，只能在类中调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JavaScript 类的静态方法<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&quot;noob&quot; 对象可以作为参数传递给静态方法。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Runoob</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name,</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-keyword">static</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">x</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> tmp = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(x);</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + tmp + x.<span class="hljs-property">name</span> + x.<span class="hljs-property">age</span>;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> noob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runoob</span>(<span class="hljs-string">&quot;菜鸟教程&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-title class_">Runoob</span>.<span class="hljs-title function_">hello</span>(noob);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>p标签中的内容为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Hello &#123;&quot;name&quot;:&quot;菜鸟教程&quot;,&quot;age&quot;:&quot;20&quot;&#125;菜鸟教程20<br></code></pre></td></tr></table></figure><p><a href="https://zh.javascript.info/static-properties-methods">https://zh.javascript.info/static-properties-methods</a></p><p>37、注意下面代码的输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> shape = &#123;<br>    <span class="hljs-attr">radius</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-title function_">diameter</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">radius</span> * <span class="hljs-number">2</span>;<br>    &#125;,<br>    <span class="hljs-attr">perimeter</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this&#x27;</span>, <span class="hljs-variable language_">this</span>); <span class="hljs-comment">// window</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">radius</span><br>    &#125;<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(shape.<span class="hljs-title function_">diameter</span>());  <span class="hljs-comment">// 20</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(shape.<span class="hljs-title function_">perimeter</span>()); <span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure><h3 id="38、vue2和vue3的区别"><a href="#38、vue2和vue3的区别" class="headerlink" title="38、vue2和vue3的区别"></a>38、vue2和vue3的区别</h3><ul><li><p>Vue3支持碎片(Fragments)</p><p>就是说在组件可以拥有多个根节点</p></li><li><p>Vue2与Vue3 最大的区别 — Vue2使用选项类型API（Options API）对比Vue3组合式API（Composition API）</p></li><li><p>生命周期钩子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">beforeCreate  -&gt; <span class="hljs-title function_">setup</span>()开始创建组件之前，创建的是data和method<br>created       -&gt; <span class="hljs-title function_">setup</span>()<br>beforeMount   -&gt; onBeforeMount组件挂载到节点上之前执行的函数。<br>mounted       -&gt; onMounted组件挂载完成后执行的函数<br>beforeUpdate  -&gt; onBeforeUpdate组件更新之前执行的函数。<br>updated       -&gt; onUpdated组件更新完成之后执行的函数。<br>beforeDestroy -&gt; onBeforeUnmount组件挂载到节点上之前执行的函数。<br>destroyed     -&gt; onUnmounted组件卸载之前执行的函数。dszhuoyi<br>activated     -&gt; onActivated组件卸载完成后执行的函数<br>deactivated   -&gt; onDeactivated<br></code></pre></td></tr></table></figure><ul><li>setup函数是处于 生命周期函数 beforeCreate 和 Created 两个钩子函数之前的函数</li><li>setup 函数时，它将接受两个参数：（props、context(包含attrs、slots、emit)</li><li>执行 setup 时，组件实例尚未被创建（在 setup() 内部，this 不会是该活跃实例的引用，即不指向vue实例，Vue 为了避免我们错误的使用，直接将 <code>setup函数中的this修改成了 undefined</code>）</li><li>与模板一起使用：需要返回一个对象 (在setup函数中定义的变量和方法最后都是需要 return 出去的 不然无法再模板中使用)</li></ul></li><li><p>vue2和vue3双向数据绑定原理发生了改变</p><ul><li><strong>vue2</strong> 的双向数据绑定是利用ES5 的一个 <a href="https://so.csdn.net/so/search?q=API&spm=1001.2101.3001.7020">API</a> <code>Object.definePropert()</code>对数据进行劫持 结合 发布订阅模式的方式来实现的</li><li><strong>vue3</strong> 中使用了 <a href="https://so.csdn.net/so/search?q=es6&spm=1001.2101.3001.7020">es6</a> 的 <code>Proxy</code>API 对数据代理</li></ul></li><li><p>vue3 Teleport瞬移组件</p></li><li><p>v-if 和 v-for的优先级</p><ul><li>vue2 v-for 优先于 v-if 生效</li><li>vue3 v-if 优先于 v-for 生效</li><li>最好不要把v-if和v-for同时用在一个元素上，这样会带来性能的浪费</li></ul></li><li></li></ul><h3 id="39、Vue3丢弃了vue2的哪些方法"><a href="#39、Vue3丢弃了vue2的哪些方法" class="headerlink" title="39、Vue3丢弃了vue2的哪些方法"></a>39、Vue3丢弃了vue2的哪些方法</h3><ul><li><p>在 Vue3 中 transition 类名变更有，其他用法不变，就是类名更改了一下</p><p>v-enter –&gt; v-enter-from</p><p>v-leave –&gt; v-leave-from</p></li><li><p>filter 过滤器被移除</p><ul><li>vue3中，将 filter 移除后，推荐使用计算属性来展示，还可以全局注册过滤计算属性</li></ul></li><li><p>vue3.X 中去掉了.sync,用v-model代替 并且同一个组件中不仅限于只有一个v-model</p></li><li><p>keyCodes</p><ul><li>2.X中，为一些元素绑定键盘事件的方式是只用 keyCodes 来标识不同的按键，keyCodes 作为修改 v-on 的一种方式</li><li>在3.x中，由于 keyboardEvent.keyCode 已弃用，因此不在支持此功能，使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/key/Key_Values"><code>KeyboardEvent.key</code></a> 暴露的按键名称作为修饰符，但需要转为 kebab-case 形式</li></ul></li></ul><h3 id="40、常见的布局有哪些"><a href="#40、常见的布局有哪些" class="headerlink" title="40、常见的布局有哪些"></a>40、常见的布局有哪些</h3><h3 id="41、生命周期，组件销毁是哪个周期"><a href="#41、生命周期，组件销毁是哪个周期" class="headerlink" title="41、生命周期，组件销毁是哪个周期"></a>41、生命周期，组件销毁是哪个周期</h3><h3 id="42、鼠标移上去，元素放大"><a href="#42、鼠标移上去，元素放大" class="headerlink" title="42、鼠标移上去，元素放大"></a>42、鼠标移上去，元素放大</h3><h3 id="43、console-dir"><a href="#43、console-dir" class="headerlink" title="43、console.dir()"></a>43、console.dir()</h3><h3 id="44、元素的宽高单位有哪些？"><a href="#44、元素的宽高单位有哪些？" class="headerlink" title="44、元素的宽高单位有哪些？"></a>44、元素的宽高单位有哪些？</h3><p>px vh vw rem em pt?</p><h3 id="45、css样式-行内样式-js里面能获取到吗？获取到的是哪个样式"><a href="#45、css样式-行内样式-js里面能获取到吗？获取到的是哪个样式" class="headerlink" title="45、css样式 行内样式 js里面能获取到吗？获取到的是哪个样式"></a>45、css样式 行内样式 js里面能获取到吗？获取到的是哪个样式</h3><h3 id="46、elementUI中table表格数据排序"><a href="#46、elementUI中table表格数据排序" class="headerlink" title="46、elementUI中table表格数据排序"></a>46、elementUI中table表格数据排序</h3><h3 id="47、盒子居中的几种方式"><a href="#47、盒子居中的几种方式" class="headerlink" title="47、盒子居中的几种方式"></a>47、盒子居中的几种方式</h3><ol><li><p>设置定位后（子绝父相）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.son</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>父级设置 flex 布局，在父级设置 主轴子元素和侧轴子元素 居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span> &#123;<br><span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>align-items</code> 子元素为单行时，控制子元素在侧轴上的排列方式</li><li><code>justify-content</code> 子元素在主轴上的对齐方式</li></ul></li><li><p>父级设置 flex 布局，子级设置 <code>margin:auto</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><br><span class="hljs-selector-class">.son</span> &#123;<br>    <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="48、鼠标偏移量"><a href="#48、鼠标偏移量" class="headerlink" title="48、鼠标偏移量"></a>48、鼠标偏移量</h3><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td>e.clientX</td><td>返回鼠标相对于浏览器窗口可视区的X坐标</td></tr><tr><td>e.clientY</td><td>返回鼠标相对于浏览器窗口可视区的Y坐标</td></tr><tr><td>e.pageX</td><td>返回鼠标相对于文档页面的X坐标 IE9+支持</td></tr><tr><td>e.pageY</td><td>返回鼠标相对于文档页面的Y坐标 IE9+支持</td></tr><tr><td>e.screenX</td><td>返回鼠标相对于电脑屏幕的X坐标</td></tr><tr><td>e.screenY</td><td>返回鼠标相对于电脑屏幕的Y坐标</td></tr></tbody></table><table><thead><tr><th>三大系列大小对比</th><th>作用</th></tr></thead><tbody><tr><td>elem.offsetWidth</td><td>返回自身 包括<strong>padding、边框、内容</strong>区的宽度，返回数值<strong>不带单位</strong></td></tr><tr><td>elem.clientWidth</td><td>返回自身 包括<strong>padding、内容</strong>区的宽度，返回数值<strong>不带单位</strong></td></tr><tr><td>elem.scrollWidth</td><td>返回自身 实际的宽度，不含边框，返回数值<strong>不带单位</strong></td></tr></tbody></table><ul><li><p>获取元素位置：offsetLeft offsetTop</p></li><li><p>获取元素大小：clientwidth clientHeight</p></li><li><p>获取滚动距离: scrollTop scrollLeft</p></li><li><p><strong>页面</strong>滚动距离：window.pageYOffset</p></li></ul><h1 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h1><p>1、什么是重绘和回流 </p><ul><li>重绘：<br>DOM树没有元素增加或删除，只是样式的改变，针对浏览器对<strong>某一元素</strong>进行<strong>单独</strong>的渲染，这个过程就叫做重绘</li><li>回流：<br>DOM树中的元素被增加或者删除，导致浏览器需要重新的去渲染整个DOM树，回流比重绘更消耗性能，发生回流必定重绘，重绘不一定会导致回流。</li><li>重绘和回流的关系：在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程称为重绘</li><li>常见引起回流属性和方法：<br>任何会改变元素<strong>几何</strong>信息（元素的<strong>位置和尺寸大小</strong>）的操作，都会触发回流。<br>（ 1 ）添加或者删除可见的 DOM 元素；<br>（ 2 ）元素尺寸改变 —— 边距、填充、边框、宽度和高度<br>（ 3 ）内容变化，比如用户在 input 框中输入文字<br>（ 4 ）浏览器窗口尺寸改变 ——resize 事件发生时<br>（ 5 ）计算 offsetWidth 和 offsetHeight 属性<br>（ 6 ）设置 style 属性的值<br>（ 7 ）当你修改网页的默认字体时</li><li>如何减少回流：<br>（ 1 ）使用 transform 替代 top<br>（ 2 ）不要把节点的属性值放在一个循环里当成循环里的变量<br>（ 3 ）不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局<br>（ 4 ）把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM<br>（ 5 ）不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class ，<br>然后修改 DOM 的 className </li></ul><p>2、外边距合并、塌陷原因</p><ul><li>相邻块元素垂直外边距的合并<ul><li>问题：当上下两个块元素（兄弟关系）相遇时，若上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是<strong>取两个值中的较大者</strong>，这种现象称为相邻元素垂直外边距的合并</li><li>解决：尽量只给一个盒子添加margin值</li></ul></li><li>嵌套块元素垂直外边距的塌陷<ul><li>问题：对于两个嵌套关系（父子关系）的块元素，父元素有 上外边距 同时子元素也有 上外边距 ，此时父元素会塌陷较大的外边距值</li><li>解决：<ol><li>可以为父元素定义上边框border-top</li><li>可以为父元素定义上内边距padding-top</li><li>可以为父元素添加overflow:hidden;（还可以清除浮动）</li></ol></li></ul></li></ul><p>3、浮动后元素转为了块级元素，也具有行内块元素的特性</p><ul><li>若块盒子没有设置宽度，默认宽度和父级元素一样宽，但若添加了浮动，则大小根据内容来决定</li><li>浮动的盒子中间是没有缝隙的，是紧挨着一起的</li><li><strong>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流</strong></li></ul><p>几种隐藏效果的区别</p><ul><li>overflow: hidden</li><li>display: none</li><li>visibility: hidden</li></ul><h1 id="作用域典型例题"><a href="#作用域典型例题" class="headerlink" title="作用域典型例题"></a>作用域典型例题</h1><p>由于js的预解析导致的变量提升和函数提升</p><p>案例1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 案例1</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">    <span class="hljs-title function_">fun</span>();</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 相当于执行以下操作</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    num = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">    <span class="hljs-title function_">fun</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例2</p><p style="color:red">注意</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">fn</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 相当于执行以下操作</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> num;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);   <span class="hljs-comment">// undefined</span></span><br><span class="language-javascript">        num = <span class="hljs-number">20</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);   <span class="hljs-comment">// 20</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    num = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">    <span class="hljs-title function_">fn</span>()</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>案例3</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">f1</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> a = b = c = <span class="hljs-number">9</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 相当于执行以下操作</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> a = <span class="hljs-number">9</span>;</span><br><span class="language-javascript">        b = <span class="hljs-number">9</span>;      <span class="hljs-comment">// 直接赋值，没有加var，故b、c为全局变量</span></span><br><span class="language-javascript">        c = <span class="hljs-number">9</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">// 9</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<span class="hljs-comment">// 9</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<span class="hljs-comment">// 9</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">f1</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);     <span class="hljs-comment">// 9</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);     <span class="hljs-comment">// 9</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);     <span class="hljs-comment">// 报错，a没有声明，也没有定义</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>12-面试题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue高频面试题</title>
    <link href="/2022/09/27/12-%E9%9D%A2%E8%AF%95%E9%A2%98/Vue%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2022/09/27/12-%E9%9D%A2%E8%AF%95%E9%A2%98/Vue%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h1><h2 id="一、生命周期（80-）"><a href="#一、生命周期（80-）" class="headerlink" title="一、生命周期（80%）"></a>一、生命周期（80%）</h2><ol><li>说一下生命周期<ol><li>beforecreate</li><li>created</li><li>beforemount</li><li>mounted</li><li>beforeUpdate</li><li>Updated</li><li>beoforeDestroy</li><li>Destory</li></ol>vue3中已经把最后两个 改为<ol start="7"><li>beforeUnmounted</li><li>Unmounted</li></ol></li><li>页面<strong>组件加载</strong>会执行哪些生命周期<ol><li>beforecreate （啥也不是）</li><li>created  没用节点 有数据   </li><li>beforemount 没用节点 有数据, dom就绪中，如果加载网络请求可能会造成阻塞</li><li>mounted  有节点，有数据</li></ol></li><li><strong>生命周期怎么用</strong>，用哪些<ol><li>created 发送网络请求,</li><li>mounted  写入插件 与DOM相关 better-scroll 一些插件需要操作dom必须在mounted中使用，如果在created中可能会报错，可能是null</li></ol></li></ol><h2 id="二、路由（40-）"><a href="#二、路由（40-）" class="headerlink" title="二、路由（40%）"></a>二、路由（40%）</h2><h3 id="路由传值-显示，隐式"><a href="#路由传值-显示，隐式" class="headerlink" title="路由传值  显示，隐式"></a>路由传值  显示，隐式</h3><p>假设路由规则是：</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220926161802721.png" alt="image-20220926161802721" style="zoom: 50%;" /><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><p>在url地址栏上可见查询参数，也可以通过query来获取</p><ol><li><p>query : { key: ‘电视’ }</p></li><li><p>接收： this.$route.query.key </p><p>在App组件中</p></li></ol><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220926161349344.png" alt="image-20220926161349344" style="zoom:50%;" /><p>在About组件中获取</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220926161517612.png" alt="image-20220926161517612" style="zoom:50%;" /><h4 id="隐式-必须加上路由的name"><a href="#隐式-必须加上路由的name" class="headerlink" title="隐式-必须加上路由的name"></a>隐式-必须加上路由的name</h4><p>在url地址栏上不可见，但是可以通过params获取</p><ol><li><p>params: {name: ‘小明’}</p></li><li><p>this.$route.params.name</p><p>在App组件中</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220926162211434.png" alt="image-20220926162211434" style="zoom:50%;" /><p>在About组件中</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220926162310421.png" alt="image-20220926162310421" style="zoom:50%;" /></li></ol><h3 id="路由的模式和区别"><a href="#路由的模式和区别" class="headerlink" title="路由的模式和区别"></a>路由的模式和区别</h3><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4><p>(本身就应该走描点切换，没有hash就没有history)</p><p>这里的 hash 就是指 url 尾巴后的 <code>#</code> 号以及后面的字符。这里的 # 和 css 里的 # 是一个意思。hash 也 称作 锚点，本身是用来做页面定位的，她可以使对应 id 的元素显示在可视区域内</p><p>hash 路由：监听 url 中 hash 的变化，然后渲染不同的内容，这种路由<strong>不向</strong>服务器发送请求，不需要服务端的支持</p><p>hash 本来是拿来做页面定位的，如果拿来做路由的话，原来的锚点功能就不能用了。其次，hash 的传参是基于 url 的，如果要传递复杂的数据，会有体积的限制</p><p>​    </p><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><p>History 把#去了</p><p>history 模式不仅可以在url里放参数，还可以将数据存放在一个特定的对象中</p><ul><li>back()：后退到上一个路由；</li><li>forward()：前进到下一个路由，如果有的话；</li><li>go(number)：进入到任意一个路由，正数为前进，负数为后退；</li><li>pushState(obj, title, url)：前进到指定的 URL，不刷新页面；</li><li>replaceState(obj, title, url)：用 url 替换当前的路由，不刷新页面；</li></ul><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>1、hash模式较丑，history模式较优雅;<br>2、pushState设置的新URL可以是与当前URL同源的任意URL；而hash只可修改#后面的部分，故只可设置与当前同文档的URL;<br>3、pushState设置的新URL可以与当前URL一模一样，这样也会把记录添加到栈中；而hash设置的新值必须与原来不一样才会触发记录添加到栈中;<br>4、pushState通过stateObject可以添加任意类型的数据到记录中；而hash只可添加短字符串;<br>5、pushState可额外设置title属性供后续使用;<br>6、hash兼容IE8以上，history兼容IE10以上;<br>7、history模式需要后端配合将<strong>所有访问都指向index.html</strong>，否则用户刷新页面，会导致404错误</p><p>可以查看history与hash异同 <a href="https://www.cnblogs.com/zhilu/p/13781784.html">https://www.cnblogs.com/zhilu/p/13781784.html</a></p><h3 id="路由的导航守卫，导航拦截（router的钩子函数）"><a href="#路由的导航守卫，导航拦截（router的钩子函数）" class="headerlink" title="路由的导航守卫，导航拦截（router的钩子函数）"></a>路由的导航守卫，导航拦截（router的钩子函数）</h3><ol><li><p>beforeEach 就是一个保安</p><ol><li>to 去哪个路由</li><li>from  之前是哪个路由</li><li>next  保安 拦截   带路由就跳转到某个路由下</li><li>比如  订单管理 如果没有登录就不能进入订单管理</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 全局前置守卫</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/main&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 如果访问的是后台首页</span><br>    <span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;name&#x27;</span>); <span class="hljs-comment">// 拿key为name的值</span><br>    <span class="hljs-keyword">if</span> (token) &#123;<br>      <span class="hljs-comment">// 访问的是后台首页 并且 有token的值</span><br>      <span class="hljs-title function_">next</span>(); <span class="hljs-comment">// 放行</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 访问的是后台首页 但 没有token的值</span><br>      <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/login&#x27;</span>); <span class="hljs-comment">// 强制跳转到登录页面</span><br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 若是访问的其他页面，直接放行</span><br>    <span class="hljs-title function_">next</span>();<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>全局 （常用） beforeEach afterEach</p></li><li><p>组件 （组件内守卫）  beforeRouteEnter  beforeRouteUpdate beforeRouteLeave </p></li><li><p>路由  （路由独享）beforeEnter</p></li></ol><h3 id="动态路由和子路由"><a href="#动态路由和子路由" class="headerlink" title="动态路由和子路由"></a>动态路由和子路由</h3><ol><li><p>子路由是<strong>方便维护</strong>，统一管理路由</p><p>能够清楚的区分 一级路由、二级路由等等、、、方便管理与维护</p></li><li><p>动态路由 </p><ol><li>新闻页  </li><li><strong>多商品</strong>详情页  </li></ol></li></ol><h3 id="补充：-route和-router的区别是什么"><a href="#补充：-route和-router的区别是什么" class="headerlink" title="补充：$route和 $router的区别是什么"></a>补充：<code>$route</code>和 <code>$router</code>的区别是什么</h3><p><code>$route</code>为当前router跳转对象里面可以获取name、path、query、params、fullPath、matched、hash等</p><p><code>$router</code>为VueRouter实例，是一个全局路由对象，包含了路由跳转的方法、钩子函数等，想要导航到不同URL，则使用$router.push方法</p><p>返回上一个history也是使用$router.go方法</p><h2 id="三、Keep-alive（40-）"><a href="#三、Keep-alive（40-）" class="headerlink" title="三、Keep-alive（40%）"></a>三、Keep-alive（40%）</h2><p>3.1 是什么：缓存组件</p><p>3.2 场景：性能优化</p><p>3.3 使用：<strong>多2个生命周期</strong>（使用 keep-alive 会多两个生命周期，不使用就是之前的声明周期）</p><p>​            触发：activated</p><p>​            结束：deactivated</p><p>默认情况下，切换动态组件时，无法保持组件的状态，因此可以用 <code>&lt;keep-alive&gt;</code> 来保持动态组建的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;box&quot;&gt;<br>    &lt;keep-alive&gt;<br>        &lt;!-- 2. 通过is属性，动态指定切换组建的名称 --&gt;<br>        &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;<br>    &lt;/keep-alive&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li><p>keep-alive 会把内部的组件进行缓存，而不是销毁组</p></li><li><p><code>include</code>属性 在使用 keep-alive 的时候，可以通过 include 指定哪些组件需要被缓存；</p></li><li><p><code>exclude</code>属性 或者，通过 exclude 属性指定哪些组件不需要被缓存；但是：不要同时使用 include 和 exclude 这两个属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;keep-alive exclude=&quot;MyRight&quot;&gt;<br>    &lt;!-- 2. 通过is属性，动态指定切换组建的名称 --&gt;<br>    &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;<br>&lt;/keep-alive&gt;<br></code></pre></td></tr></table></figure></li><li><p>keep-alive对应的生命周期函数</p><ul><li><p>初次进入时：created-&gt;mounted-&gt;activated,退出后触发 deactivated,再次进入时会触发activated，退出后又触发 deactivated</p></li><li><p>当组件被缓存时，会自动触发组建的 deactivated 生命周期函数</p></li><li><p>当组件被激活时，会自动触发组建的 activated 生命周期函数</p></li></ul></li></ul><h2 id="四、ref（30-）"><a href="#四、ref（30-）" class="headerlink" title="四、ref（30%）"></a>四、ref（30%）</h2><ol><li><strong>操作DOM</strong></li><li>this.$refs.xxx</li></ol><h2 id="五、nextTick（40-）"><a href="#五、nextTick（40-）" class="headerlink" title="五、nextTick（40%）"></a>五、nextTick（40%）</h2><p>5.1 是什么：当dom加载完毕执行内部代码</p><p>5.2 场景：在做商品里面有分类（左右列表切换），要用到better-scroll插件。</p><blockquote><p>$nextTick(callback) 会把callback回调函数的执行 推迟到 下一个DOM更新周期 之后再执行</p><p>应用场景：当数据更新后，DOM元素还没更新，那么要获取DOM里面相关元素，就无法获取，就需要将需要操作DOM相关的操作放在$nextTick当中</p></blockquote><h2 id="六、axios二次封装（50-）"><a href="#六、axios二次封装（50-）" class="headerlink" title="六、axios二次封装（50%）"></a>六、axios二次封装（50%）</h2><p>6.1 为什么要封装：</p><p>​        a&gt; 每次请求数据都会有加载中，有数据后就关闭加载中</p><p>​        b&gt; 用户验证，验证token，如果没有token，就需要push跳转到login（登录页）</p><p>​        总结：方便、后面使用简单、好维护</p><h2 id="七、vuex（60-）"><a href="#七、vuex（60-）" class="headerlink" title="七、vuex（60%）"></a>七、vuex（60%）</h2><ol><li><p>哪些属性</p><p>​    state、getters、mutations、actions、modules</p></li><li><p>vuex在什么情况下用，为什么vuex</p><p>​    a&gt; 管理数据方便 : 地址、用户、购物车…</p><p>​    b&gt; 为什么要用modules</p><p>​    c&gt; 当state数据比较多，不好管理，也不知道哪一个属性是在哪个地方用的？modules</p></li><li><p>Mutations、actions区别</p><p>​    a&gt; 使用的不同：mutations是可以直接改变state数据的(当然actions也可以)，但是actions他的工作是提交mutations</p><p>​    b&gt; mutations<strong>必须是同步的</strong>。actions可以包含任何<strong>异步</strong>操作。</p><p>​    c&gt; actions比mutaitons调试更加方便    </p></li><li><p>为什么vuex的state不能直接修改，而需要通过mutations修改？</p><p>直接修改的话，vuex无法对这个变量进行跟踪</p></li></ol><h2 id="八、computed、methods、watch区别（80-）"><a href="#八、computed、methods、watch区别（80-）" class="headerlink" title="八、computed、methods、watch区别（80%）"></a>八、computed、methods、watch区别（80%）</h2><p>8.1 computed：有缓存，进入组件会执行一次，当值发生变化才会执行</p><p>8.2 methods ：template改变，methods内所有方法都会执行</p><p>8.3 watch：是监听数据的，当<strong>值发生变化</strong>才会执行（状态[当前状态和上一次状态]）</p><p>8.4 computed和methods上来都会执行一次。watch不会执行，只有改变了才执行。</p><h2 id="九、插槽-slot-怎么用，场景（）"><a href="#九、插槽-slot-怎么用，场景（）" class="headerlink" title="九、插槽 slot,怎么用，场景（）"></a>九、插槽 slot,怎么用，场景（）</h2><p>允许开发者在封装组件时，把<strong>不确定</strong>的、希望由用户指定的部分定义为插槽。简单来说可以认为是：组件封装期间，为用户预留的内容的占位符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;slot&gt;<br>    &lt;form onsubmit=&quot;return false&quot; action=&quot;&quot; class=&#x27;search-input&#x27; @keyup.enter=&#x27;goSearchList&#x27;&gt;<br>        &lt;input type=&quot;search&quot; placeholder=&quot;搜索商品名称&quot; v-model=&#x27;inputVal&#x27;&gt;<br>    &lt;/form&gt;<br>&lt;/slot&gt;<br>&lt;div @click=&#x27;goSearchList&#x27;&gt;<br>    &lt;i class=&#x27;iconfont icon-fangdajing&#x27;&gt;&lt;/i&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>分类<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="十、组件传值（80-）"><a href="#十、组件传值（80-）" class="headerlink" title="十、组件传值（80%）"></a>十、组件传值（80%）</h2><ol><li>父传子  props</li><li>子 传父  emit</li><li>兄弟  bus</li><li>父与后代 provide inject</li><li>$refs获取DOM元素</li></ol><h2 id="十一、v-model双向绑定原理（70-）"><a href="#十一、v-model双向绑定原理（70-）" class="headerlink" title="十一、v-model双向绑定原理（70%）"></a>十一、v-model双向绑定原理（70%）</h2><p>​    Object.defineProperty()</p><p>v-model 只能用在表单类元素（输入类元素）</p><p>vue中有2中数据绑定的方式：</p><ul><li><p>单项数据绑定（v-bind）：数据只能从data流向页面</p></li><li><p>双向数据绑定（v-model）：数据不仅能从data流向页面，还可以从页面流向data</p><p>注意：</p><ul><li><p>双向数据绑定一般应用在表单类元素上（如：input、select等）</p></li><li><p>v-model: value 可以简写为 v-model ，因为 v-model 默认收集的就是value的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot; &gt;<br><br>// 可以简写为：<br>&lt;input type=&quot;text&quot; v-model=&quot;name&quot; &gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="十二、v-if和v-show区别（60-）"><a href="#十二、v-if和v-show区别（60-）" class="headerlink" title="十二、v-if和v-show区别（60%）"></a>十二、v-if和v-show区别（60%）</h2><p>12.1 v-if先创建和删除</p><p>12.2 v-show是显示和隐藏(  有盒子只不过隐藏了 )</p><p>12.3 场景：</p><p>​            a&gt; 页面当加载的时候 v-show的性能不如v-if</p><p>​            b&gt; 频繁切换情况v-if不如v-show</p><h2 id="十三、MVVM（8-）"><a href="#十三、MVVM（8-）" class="headerlink" title="十三、MVVM（8%）"></a>十三、MVVM（8%）</h2><p> 13.1 为什么有MVVM：</p><p> ​    mvvm是一种模式，是程序历史演变而来的。</p><p> ​    在web1.0那个年代，前端和后端不分离，基本没有前端的概念或者岗位。问题：所有代码都在一起很难维护</p><p> ​    在web2.0那个年代，出现了ajax，这时候前端和后端可以分离的。</p><p> ​        前端：调取接口，渲染数据</p><p> ​        后端：写接口，供前端调用</p><p> ​        问题：但是一个网页可能还会特别大，维护起来可能也会出现难以维护的情况</p><p> ​    解决：出现了前端的框架ng、vue、react，把整个的网页，分为不同的组件，这样细分来说，大项目就好维护了。</p><p> 13.2 MVVM是什么</p><p> ​        m （模块层，methods，data….），通过模块来定义内容，让view层展示出来</p><p> ​        v（视图，说白了就是我们网页展示出来的内容，把数据展示成效果，内容，dom）</p><p> ​        vm(是vue.js底层逻辑自动实现的，不需要我们操作例如:v-model，注意这里v-m)</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220513154305607.png" alt="image-20220513154305607" style="zoom:80%;" /> <h2 id="十四、scoped原理"><a href="#十四、scoped原理" class="headerlink" title="十四、scoped原理"></a>十四、scoped原理</h2><p>为当前组件的Dom标签都 添加当前组件独有的自定义属性data-v-xxx，</p><p>在css样式中就可以利用属性选择器，来设置元素的样式，从而不会与其他组件的样式冲突</p><p>而vue提供了一个 scoped 可以自动为组件的每一个标签生成一个自定义属性，同一个组件中的自定义属性是一样的</p><p><strong>原理</strong>：scoped属性用来自动为每个组件分配唯一的“自定义属性”,并且为当前组建的DOM标签和style样式应用这个自定义属性,防止组件的样式冲突问题</p><h2 id="十五、样式穿透"><a href="#十五、样式穿透" class="headerlink" title="十五、样式穿透"></a>十五、样式穿透</h2><p>添加scoped属性后,当前组件的样式<strong>对其子组件是不生效</strong>的,即子组件没有被分配 scoped为其父组件自动分配的属性</p><h5 id="样式穿透"><a href="#样式穿透" class="headerlink" title="样式穿透"></a>样式穿透</h5><p>几种写法：</p><ul><li><code>&gt;&gt;&gt;</code> 仅用于 CSS ，不适用sass</li><li><code>/deep/</code> Vue3之前</li><li><code>::v-deep</code> vue3</li><li><code>deep()</code> Vue3使用</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style lang=&quot;less&quot; scoped&gt;<br>/deep/ <span class="hljs-selector-class">.test-box</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-selector-tag">h3</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>应用：修改第三方组件的样式</p><h2 id="十六、V-if-和v-for优先级"><a href="#十六、V-if-和v-for优先级" class="headerlink" title="十六、V-if 和v-for优先级"></a>十六、V-if 和v-for优先级</h2><p> <strong>v-for优先级大于v-if</strong> ：在源码中有</p><p> 一般v-if和v-for不会写在同一个标签上，如果写在一起：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 若v-if和v-for写在一起，每次循环都会判断if</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>,i++)&#123;<br>    <span class="hljs-keyword">if</span>( arr.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>  ) <span class="hljs-keyword">return</span> <br>&#125;<br></code></pre></td></tr></table></figure><p>​    ***在源码11002:</p><pre><code class="hljs"> if (el.staticRoot &amp;&amp; !el.staticProcessed) &#123;   return genStatic(el, state) &#125; else if (el.once &amp;&amp; !el.onceProcessed) &#123;   return genOnce(el, state) &#125; else if (el.for &amp;&amp; !el.forProcessed) &#123;   return genFor(el, state) &#125; else if (el.if &amp;&amp; !el.ifProcessed) &#123;   return genIf(el, state) &#125; else if (el.tag === &#39;template&#39; &amp;&amp; !el.slotTarget &amp;&amp; !state.pre) &#123;   return genChildren(el, state) || &#39;void 0&#39; &#125; else if (el.tag === &#39;slot&#39;) &#123;   return genSlot(el, state) &#125; else &#123;</code></pre><p>v-if和v-for不能一起使用的原因</p><p>参考：<a href="https://blog.csdn.net/yu_yu_lll/article/details/125352389">https://blog.csdn.net/yu_yu_lll/article/details/125352389</a></p><p>示例：一起使用v-if和v-for</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;hello&quot;&gt;<br>     &lt;div  v-for=&quot;(item,index) in list&quot; v-if=&quot;index &gt; 7 &quot; :key=&quot;item&quot; &gt;&lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;IndexCom&quot;,<br>  data()&#123;<br>    return &#123;<br>      list:[1,2,3,4,5,6,7,8,9,10]   //需要遍历的数据<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>相当于执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;hello&quot;&gt;<br>    &lt;div v-if=&quot;0 &gt; 7&quot;&gt;&lt;/div&gt;   //第1次判断<br>    &lt;div v-if=&quot;1 &gt; 7&quot;&gt;&lt;/div&gt;   //第2次判断<br>    &lt;div v-if=&quot;2 &gt; 7&quot;&gt;&lt;/div&gt;   //第3次判断<br>    &lt;div v-if=&quot;3 &gt; 7&quot;&gt;&lt;/div&gt;   //第4次判断<br>    &lt;div v-if=&quot;4 &gt; 7&quot;&gt;&lt;/div&gt;   //第5次判断<br>    &lt;div v-if=&quot;5 &gt; 7&quot;&gt;&lt;/div&gt;   //第6次判断<br>    &lt;div v-if=&quot;6 &gt; 7&quot;&gt;&lt;/div&gt;   //第7次判断<br>    &lt;div v-if=&quot;7 &gt; 7&quot;&gt;&lt;/div&gt;   //第8次判断<br>    &lt;div v-if=&quot;8 &gt; 7&quot;&gt;&lt;/div&gt;   //第9次判断<br>    &lt;div v-if=&quot;9 &gt; 7&quot;&gt;&lt;/div&gt;   //第10次判断<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;IndexCom&quot;,<br>  data() &#123;<br>    return &#123;<br>      list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>即每一个循环都需要去判断 v-if 的条件，若循环次数过多，那么v-if的判断相对的比较耗费性能。大量的判断会极大的降低项目质量</p><p>解决方案：</p><ol><li>若v-if判断的数据是依赖于v-for循环的数据，那么就可以利用计算属性</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;hello&quot;&gt;<br>    &lt;!-- 2. 然后这里去循环已经被过滤的属性 --&gt;<br>     &lt;div  v-for=&quot;(item) in ListArr&quot; :key=&quot;item&quot; &gt;&lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;IndexCom&quot;,<br>  data()&#123;<br>    return &#123;<br>      list:[1,2,3,4,5,6,7,8,9,10]<br>    &#125;<br>  &#125;,<br>  computed:&#123;<br>    //1. 在computed里先做好判断，这里过滤的成本远比v-if的成本低<br>    ListArr()&#123;<br>        return this.list.filter((item,index) =&gt; index &gt; 7)<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>&lt;/style&gt;<br><br><br><br></code></pre></td></tr></table></figure><ol start="2"><li><p>若v-if判断的数据是不依赖于v-for循环的数据</p><p>则可以通过 包一层 template 标签，在template标签上先判断</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;hello&quot;&gt;<br>    &lt;template v-if=&quot;abc &gt; 7&quot;&gt;<br>        &lt;div  v-for=&quot;(item,index) in list&quot; :key=&quot;item&quot; &gt;&lt;/div&gt;<br>&lt;/template&gt;    <br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    export default &#123;<br>        name: &quot;IndexCom&quot;,<br>        data()&#123;<br>            return &#123;<br>                list:[1,2,3,4,5,6,7,8,9,10]   //需要遍历的数据<br>            &#125;<br>        &#125;<br>    &#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>12-面试题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>其他高频面试题</title>
    <link href="/2022/09/26/12-%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%85%B6%E4%BB%96%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2022/09/26/12-%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%85%B6%E4%BB%96%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="一、兼容"><a href="#一、兼容" class="headerlink" title="一、兼容"></a>一、兼容</h1><p>兼容经常碰到太多了，可能现在也想不起来那么多，因为时间太长了，我就想起来哪些说哪些吧</p><h2 id="共性：必须要说的"><a href="#共性：必须要说的" class="headerlink" title="共性：必须要说的"></a>共性：必须要说的</h2><h3 id="一、在ios键盘中首字母大写的问题"><a href="#一、在ios键盘中首字母大写的问题" class="headerlink" title="一、在ios键盘中首字母大写的问题?****"></a>一、在ios键盘中首字母大写的问题?****</h3><p>​            <input type="text" autocapitalize='off'></p><h3 id="二、禁止ios和android用户选中文字"><a href="#二、禁止ios和android用户选中文字" class="headerlink" title="二、禁止ios和android用户选中文字"></a>二、禁止ios和android用户选中文字</h3><p>​            -webkit-user-select:none</p><h3 id="三、禁止ios和安卓用户长按选中图片"><a href="#三、禁止ios和安卓用户长按选中图片" class="headerlink" title="三、禁止ios和安卓用户长按选中图片"></a>三、禁止ios和安卓用户长按选中图片</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span> &#123;<br>       -webkit-touch-callout: none;<br>       <span class="hljs-attribute">pointer-events</span>: none;<br>       <span class="hljs-comment">/* // 像微信浏览器还是无法禁止，加上这行样式即可 */</span><br>   &#125;<br><br>   <span class="hljs-comment">/* // 禁止长按选择文字 */</span><br>   <span class="hljs-selector-tag">div</span> &#123;<br>       -webkit-user-select: none;<br>   &#125;<br><br>   <span class="hljs-comment">/* // 禁止长按呼出菜单 */</span><br>   <span class="hljs-selector-tag">div</span> &#123;<br>       -webkit-touch-callout: none;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="四、在移动端使用click事件有300ms延迟的问题"><a href="#四、在移动端使用click事件有300ms延迟的问题" class="headerlink" title="四、在移动端使用click事件有300ms延迟的问题"></a>四、在移动端使用click事件有300ms延迟的问题</h3><p>解决方式：</p><ol><li><p>禁止双击缩放===》meta:user-scalabel=no</p></li><li><p>fastclick.js</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;fastclick.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;addEventListener&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">document</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">FastClick</span>.<span class="hljs-title function_">attach</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>);<br>    &#125;, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="五、移动端touch事件有穿透（点透）的问题，怎么解决？"><a href="#五、移动端touch事件有穿透（点透）的问题，怎么解决？" class="headerlink" title="五、移动端touch事件有穿透（点透）的问题，怎么解决？"></a>五、移动端touch事件有穿透（点透）的问题，怎么解决？</h3><p>解决方式： </p><ol><li>阻止默认行为</li></ol><p>​    e.preventDefault();</p><p>​    fastclick.js</p><p>2.1 fastclick.js文件</p><p>2.2 写入代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;addEventListener&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">document</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">FastClick</span>.<span class="hljs-title function_">attach</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>);<br>    &#125;, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="六、ios日期转换NAN问题"><a href="#六、ios日期转换NAN问题" class="headerlink" title="六、ios日期转换NAN问题"></a>六、ios日期转换NAN问题</h3><p>具体就是，new Date(‘2020-11-12 00:00:00’)在ios中会为NAN</p><p>解决方案：用new Date(‘2020/11/12 00:00:00’)的日期格式，或者写个正则转换</p><h2 id="个性：可以说"><a href="#个性：可以说" class="headerlink" title="个性：可以说"></a>个性：可以说</h2><p>****结尾：大概我可能短时间就想到这么多，当然还有很多，脑子一懵住想不起来太多了。</p><h1 id="二、性能优化"><a href="#二、性能优化" class="headerlink" title="二、性能优化"></a>二、性能优化</h1><p>性能优化是一个比较大的话题，我就拿我做过的项目里我优化的点来说一点吧。</p><p>前端、后端、产品</p><h2 id="2-1-工具：-基本上是做完项目去用"><a href="#2-1-工具：-基本上是做完项目去用" class="headerlink" title="2.1 工具：(基本上是做完项目去用)"></a>2.1 工具：(基本上是做完项目去用)</h2><p>​        2.1.1 Lighthouse</p><p>​            详细的内容，可以去参考git：<a href="https://github.com/GoogleChrome/lighthouse">https://github.com/GoogleChrome/lighthouse</a></p><p>​        2.1.2 测试网站 </p><p>​            <a href="https://www.webpagetest.org/">https://www.webpagetest.org/</a></p><p>​            pc：6s以内</p><p>​            移动端：4s以内</p><h2 id="共性："><a href="#共性：" class="headerlink" title="共性："></a>共性：</h2><p>1、项目上线，要不要打包压缩？    </p><p>​    html、css、js、图片</p><p>​    html、css、js：多余空格、回车、注释、<div name=''>多余的属性没有赋值的….==》当代码变成一行</p><p>​    图片：压缩==》base64，多小图标介绍加载次数，这里一张雪碧图，响应式：可以使用的img的srcset，根据不同分辨率显示不同尺寸图片，这样既保证显示效果，又能节省带宽，提高加载速度</p><p>2、懒加载、上下啦、loading</p><p>3、请求（能不能多个请求合并成少个，或者一个）</p><p>4、避免回流</p><p>​    定位，替换成: transfrom:translate</p><p>5、vue的性能优化</p><p>​    1. 路由懒加载组件</p><p>​    2. keep-alive缓存组件，保持原显示状态</p><p>​    3. 冻结:Object.freeze()</p><h2 id="个性：自己加点"><a href="#个性：自己加点" class="headerlink" title="个性：自己加点"></a>个性：自己加点</h2><h1 id="三、html-css高频面试题"><a href="#三、html-css高频面试题" class="headerlink" title="三、html+css高频面试题"></a>三、html+css高频面试题</h1><h2 id="兼容"><a href="#兼容" class="headerlink" title="==兼容=="></a>==兼容==</h2><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><h2 id="回流"><a href="#回流" class="headerlink" title="==回流=="></a>==回流==</h2><p>​    ……..</p><h1 id="四、JavaScript"><a href="#四、JavaScript" class="headerlink" title="四、JavaScript"></a>四、JavaScript</h1><h2 id="4-1-作用域-作用链（必须）"><a href="#4-1-作用域-作用链（必须）" class="headerlink" title="4.1 作用域+作用链（必须）"></a>4.1 作用域+作用链（必须）</h2><h2 id="4-2-原型-原型链（必须）"><a href="#4-2-原型-原型链（必须）" class="headerlink" title="4.2 原型+原型链（必须）"></a>4.2 原型+原型链（必须）</h2><h2 id="4-3-闭包（必须）"><a href="#4-3-闭包（必须）" class="headerlink" title="4.3 闭包（必须）"></a>4.3 闭包（必须）</h2><h2 id="4-4-深拷贝，浅拷贝（必须）"><a href="#4-4-深拷贝，浅拷贝（必须）" class="headerlink" title="4.4 深拷贝，浅拷贝（必须）"></a>4.4 深拷贝，浅拷贝（必须）</h2><h2 id="4-5-es6用过哪些？箭头函数和普通区别"><a href="#4-5-es6用过哪些？箭头函数和普通区别" class="headerlink" title="4.5 es6用过哪些？箭头函数和普通区别"></a>4.5 es6用过哪些？箭头函数和普通区别</h2>]]></content>
    
    
    <categories>
      
      <category>12-面试题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>VUE3快速上手</title>
    <link href="/2022/09/26/04-VUE/VUE3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <url>/2022/09/26/04-VUE/VUE3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue3快速上手"><a href="#Vue3快速上手" class="headerlink" title="Vue3快速上手"></a>Vue3快速上手</h1><img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px" /><h2 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1.Vue3简介"></a>1.Vue3简介</h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a> </li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="2-Vue3带来了什么"><a href="#2-Vue3带来了什么" class="headerlink" title="2.Vue3带来了什么"></a>2.Vue3带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>……</p></li></ul><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p><p>……</p></li></ul><h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱TypeScript</h3><ul><li>Vue3可以更好的支持TypeScript</li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment </li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><h1 id="一、创建Vue3-0工程"><a href="#一、创建Vue3-0工程" class="headerlink" title="一、创建Vue3.0工程"></a>一、创建Vue3.0工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span><br>vue --version<br><span class="hljs-comment">## 安装或者升级你的@vue/cli</span><br>npm install -g @vue/cli<br><span class="hljs-comment">## 创建</span><br>vue create vue_test<br><span class="hljs-comment">## 启动</span><br><span class="hljs-built_in">cd</span> vue_test<br>npm run serve<br></code></pre></td></tr></table></figure><h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><p><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" style="width:500px;height:280px;float:left" /><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:480px;height:280px" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 创建工程</span><br>npm init vite-app &lt;project-name&gt;<br><span class="hljs-comment">## 进入工程目录</span><br><span class="hljs-built_in">cd</span> &lt;project-name&gt;<br><span class="hljs-comment">## 安装依赖</span><br>npm install<br><span class="hljs-comment">## 运行</span><br>npm run dev<br></code></pre></td></tr></table></figure><h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数。</li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><h2 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code> <ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h2 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4.Vue3.0中的响应式原理"></a>4.Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(data, <span class="hljs-string">&#x27;count&#x27;</span>, &#123;<br>    get () &#123;&#125;, <br>    set () &#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li>实现原理: <ul><li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li><li>通过Reflect（反射）:  对源对象的属性进行操作。</li><li>MDN文档中描述的Proxy与Reflect：<ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(data, &#123;<br><span class="hljs-comment">// 拦截读取属性值</span><br>    get (target, prop) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, prop)<br>    &#125;,<br>    <span class="hljs-comment">// 拦截设置属性值或添加新属性</span><br>    set (target, prop, value) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, prop, value)<br>    &#125;,<br>    <span class="hljs-comment">// 拦截删除属性</span><br>    deleteProperty (target, prop) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(target, prop)<br>    &#125;<br>&#125;)<br><br>proxy.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;tom&#x27;</span>   <br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li> ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li> reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li> 备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li> ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li> reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li> ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li> reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h2><ul><li>setup执行的时机<ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li>setup的参数<ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;computed&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br><span class="hljs-comment">//计算属性——简写</span><br>    <span class="hljs-keyword">let</span> fullName = <span class="hljs-title function_">computed</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> person.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + person.<span class="hljs-property">lastName</span><br>    &#125;)<br>    <span class="hljs-comment">//计算属性——完整</span><br>    <span class="hljs-keyword">let</span> fullName = <span class="hljs-title function_">computed</span>(&#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">return</span> person.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + person.<span class="hljs-property">lastName</span><br>        &#125;,<br>        <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>            <span class="hljs-keyword">const</span> nameArr = value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>)<br>            person.<span class="hljs-property">firstName</span> = nameArr[<span class="hljs-number">0</span>]<br>            person.<span class="hljs-property">lastName</span> = nameArr[<span class="hljs-number">1</span>]<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//情况一：监视ref定义的响应式数据</span><br><span class="hljs-title function_">watch</span>(sum,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>&#125;)<br><br><span class="hljs-comment">//情况二：监视多个ref定义的响应式数据</span><br><span class="hljs-title function_">watch</span>([sum,msg],<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)<br>&#125;) <br><br><span class="hljs-comment">/* 情况三：监视reactive定义的响应式数据</span><br><span class="hljs-comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span><br><span class="hljs-comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_">watch</span>(person,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">deep</span>:<span class="hljs-literal">false</span>&#125;) <span class="hljs-comment">//此处的deep配置不再奏效</span><br><br><span class="hljs-comment">//情况四：监视reactive定义的响应式数据中的某个属性</span><br><span class="hljs-title function_">watch</span>(<span class="hljs-function">()=&gt;</span>person.<span class="hljs-property">job</span>,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>&#125;) <br><br><span class="hljs-comment">//情况五：监视reactive定义的响应式数据中的某些属性</span><br><span class="hljs-title function_">watch</span>([<span class="hljs-function">()=&gt;</span>person.<span class="hljs-property">job</span>,<span class="hljs-function">()=&gt;</span>person.<span class="hljs-property">name</span>],<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>&#125;)<br><br><span class="hljs-comment">//特殊情况</span><br><span class="hljs-title function_">watch</span>(<span class="hljs-function">()=&gt;</span>person.<span class="hljs-property">job</span>,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>&#125;) <span class="hljs-comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span><br><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> x1 = sum.<span class="hljs-property">value</span><br>    <span class="hljs-keyword">const</span> x2 = person.<span class="hljs-property">age</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;watchEffect配置的回调执行了&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><div style="border:1px solid black;width:380px;float:left;margin-right:20px;"><strong>vue2.x的生命周期</strong><img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2" style="zoom:33%;width:1200px" /></div><div style="border:1px solid black;width:510px;height:985px;float:left"><strong>vue3.0的生命周期</strong><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="lifecycle_2" style="zoom:33%;width:2500px" /></div><p>1</p><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="9-自定义hook函数"><a href="#9-自定义hook函数" class="headerlink" title="9.自定义hook函数"></a>9.自定义hook函数</h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li></ul><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul><li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li></ul><ul><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li> 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li> 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;<br>&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;ref,customRef&#125; from &#x27;vue&#x27;<br>export default &#123;<br>name:&#x27;Demo&#x27;,<br>setup()&#123;<br>// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref<br>//自定义一个myRef<br>function myRef(value,delay)&#123;<br>let timer<br>//通过customRef去实现自定义<br>return customRef((track,trigger)=&gt;&#123;<br>return&#123;<br>get()&#123;<br>track() //告诉Vue这个value值是需要被“追踪”的<br>return value<br>&#125;,<br>set(newValue)&#123;<br>clearTimeout(timer)<br>timer = setTimeout(()=&gt;&#123;<br>value = newValue<br>trigger() //告诉Vue去更新界面<br>&#125;,delay)<br>&#125;<br>&#125;<br>&#125;)<br>&#125;<br>let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref<br>return &#123;<br>keyword<br>&#125;<br>&#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px" /><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>......<br>    <span class="hljs-keyword">let</span> car = <span class="hljs-title function_">reactive</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;奔驰&#x27;</span>,<span class="hljs-attr">price</span>:<span class="hljs-string">&#x27;40万&#x27;</span>&#125;)<br>    <span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;car&#x27;</span>,car)<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setup</span>(<span class="hljs-params">props,context</span>)&#123;<br>......<br>    <span class="hljs-keyword">const</span> car = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;car&#x27;</span>)<br>    <span class="hljs-keyword">return</span> &#123;car&#125;<br>......<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><div style="width:600px;height:370px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left" /></div><div style="width:300px;height:370px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left" /> </div><h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><div style="width:500px;height:340px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div><div style="width:430px;height:340px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div><h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;teleport to=&quot;移动位置&quot;&gt;<br>&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;<br>&lt;div class=&quot;dialog&quot;&gt;<br>&lt;h3&gt;我是一个弹窗&lt;/h3&gt;<br>&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/teleport&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;defineAsyncComponent&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./components/Child.vue&#x27;</span>))<br></code></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;app&quot;&gt;<br>&lt;h3&gt;我是App组件&lt;/h3&gt;<br>&lt;Suspense&gt;<br>&lt;template v-slot:default&gt;<br>&lt;Child/&gt;<br>&lt;/template&gt;<br>&lt;template v-slot:fallback&gt;<br>&lt;h3&gt;加载中.....&lt;/h3&gt;<br>&lt;/template&gt;<br>&lt;/Suspense&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//注册全局组件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;MyButton&#x27;</span>, &#123;<br>  <span class="hljs-attr">data</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;),<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">//注册全局指令</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;<br>  <span class="hljs-attr">inserted</span>: <span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.<span class="hljs-title function_">focus</span>()<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.v-enter</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.v-leave</span>,<br><span class="hljs-selector-class">.v-enter-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.v-enter-from</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.v-leave-from</span>,<br><span class="hljs-selector-class">.v-enter-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;my-component<br>  v-on:close=&quot;handleComponentEvent&quot;<br>  v-on:click=&quot;handleNativeClickEvent&quot;<br>/&gt;<br></code></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>  export default &#123;<br>    emits: [&#x27;close&#x27;]<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>04-VUE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript基础语法</title>
    <link href="/2022/09/23/03-JS/JS%E8%AF%AD%E6%B3%95/JavaScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/09/23/03-JS/JS%E8%AF%AD%E6%B3%95/JavaScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="初识Javascript"><a href="#初识Javascript" class="headerlink" title="初识Javascript"></a><strong>初识</strong>Javascript</h1><h2 id="JavaScript是什么"><a href="#JavaScript是什么" class="headerlink" title="JavaScript是什么"></a>JavaScript是什么</h2><ul><li>是一种运行在客户端的脚本语言</li><li>脚本语言：即不需要翻译，运行过程中由js解释器逐行来进行解释并执行</li><li>简称JS</li></ul><h2 id="JS的作用"><a href="#JS的作用" class="headerlink" title="JS的作用"></a>JS的作用</h2><ul><li>表单动态校验</li><li>网页特效</li><li>服务端开发</li><li>桌面程序</li><li>app</li><li>控制硬件-物联网</li><li>游戏开发</li></ul><h2 id="JS与html-css区别"><a href="#JS与html-css区别" class="headerlink" title="JS与html css区别"></a>JS与html css区别</h2><p>html/css是标记语言——描述类语言</p><ul><li>html决定网页结构何内容，相当于人的身体</li><li>css决定网页呈现给用户的模样，相当于给人穿衣服，化妆</li></ul><p>js脚本语言——编程类语言</p><ul><li>实现业务逻辑和页面控制（决定功能）相当于人的各种动作</li></ul><h2 id="浏览器执行JS"><a href="#浏览器执行JS" class="headerlink" title="浏览器执行JS"></a>浏览器执行JS</h2><p>浏览器分为两部分：渲染引擎和JS引擎</p><ul><li><p>渲染引擎：用来解析HTML和CSS，俗称内核。（如：chrome浏览器中的blink，老版本的webkit）</p></li><li><p>JS引擎：也称为JS解释器。用来读取网页中的JavaSript代码，对其处理后运行。（如：chrome浏览器的V8）</p></li></ul><p>浏览器本身并不会支持JS代码，而是通过内置的Javascript引擎（解释器）来执行JS代码。JS引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以JavaScript语言归为脚本语言，会逐行解释执行</p><h2 id="JS的组成"><a href="#JS的组成" class="headerlink" title="JS的组成"></a>JS的组成</h2><p>包括三个部分：</p><ul><li>ECMAScript</li><li>DOM</li><li>BOM</li></ul><h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h3><p>规定了JS的<strong>编程语法和基础核心知识</strong>，是所有浏览器厂商共同遵守的一套JS语言工业标准</p><h3 id="DOM——文档对象模型"><a href="#DOM——文档对象模型" class="headerlink" title="DOM——文档对象模型"></a>DOM——文档对象模型</h3><p>Document Object Model简称DOM。是W3C组织推荐按的处理可扩展标记语言的标准编程接口</p><p>通过DOM提供的接口可以<strong>对页面上的各种元素进行操作</strong>（大小、位置、颜色等）</p><h3 id="BOM——浏览器对象模型"><a href="#BOM——浏览器对象模型" class="headerlink" title="BOM——浏览器对象模型"></a>BOM——浏览器对象模型</h3><p>Browser Object Model简称BOM是指浏览器对象模型，提供了独立于内容的、可以与浏览器窗口进行互动的对象结构，通过<strong>BOM可以操作浏览器窗口</strong>，比如弹出框、控制浏览器跳转、获取分辨率等</p><h2 id="JS的书写位置"><a href="#JS的书写位置" class="headerlink" title="JS的书写位置"></a>JS的书写位置</h2><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 行内式js   直接写到元素的内部 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;唐伯虎&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;点秋香&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>可将单行或少量的JS代码写在HTML标签的事件属性中（<strong>以on开头的属性</strong>），如：onclick</li><li>注意单双引号的使用：在<strong>HTML</strong>中推荐使用<strong>双引号</strong>，在<strong>JS</strong>中推荐使用<strong>单引号</strong></li><li>可读性差、引号易出错、特殊情况下使用</li></ul><h3 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 内嵌式JS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;唐伯虎点秋香&#x27;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>可以将多行JS代码写到script标签中</li></ul><h3 id="外部"><a href="#外部" class="headerlink" title="外部"></a>外部</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 外部JS，注意标签中没有内容 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;03外部JS.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>引用外部JS文件的script标签中间不可以写代码</li><li>适合JS代码量较大的情况</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行注释 //</p><ul><li>快捷键：ctrl+/</li></ul><p>多行注释 /* 内容 */</p><ul><li>默认快捷键：shift+alt+a</li><li>更改为：ctrl+alt+/</li></ul><p>网页调试、检查快捷键：F12</p><h1 id="JavaScript输入输出语句"><a href="#JavaScript输入输出语句" class="headerlink" title="JavaScript输入输出语句"></a>JavaScript输入输出语句</h1><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 用户输入姓名，并存入变量myname中</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> myname = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入您的名字&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">// 输出这个姓名</span></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(myname)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h2><ul><li><p>由字母、数字、下划线、美元符号($)组成。</p></li><li><p>严格区分<strong>大小写</strong></p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字、保留字。如：var(关键字)、for、while</p></li><li><p>变量名必须有意义。</p></li><li><p>遵守<strong>骆驼命名法</strong>。首字母小写，后面单词的首字母需要大写。如：myFirstName</p></li></ul><p><strong>注意: name 尽量不直接使用name作为变量名</strong></p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>js变量的数据类型是只有程序在运行过程中,根据等号右边的值来确定的.</p><p>右边是字符,则变量是字符型,是数字,就是数字型,直接声明一个 var age 是无法确定age的数据类型的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// num属于数字型</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span></span><br><span class="language-javascript">    <span class="hljs-comment">// str属于字符型</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;purple&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// js是动态语言，变量的数据类型是可以变化的</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> x = <span class="hljs-number">12</span></span><br><span class="language-javascript">    x = <span class="hljs-string">&#x27;pink&#x27;</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h2><h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a>isNaN()</h3><p>**isNaN()**用于判断是否不是数字,返回值为:</p><ul><li>是数字,则返回false</li><li>不是数字,则返回true</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">isNaN</span>(<span class="hljs-number">12</span>))<span class="hljs-comment">// 控制台显示false</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;pink&#x27;</span>))<span class="hljs-comment">// 控制台显示true</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="n-换行符"><a href="#n-换行符" class="headerlink" title="\n 换行符"></a>\n 换行符</h3><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><p><strong>length</strong>属性可以获取整个字符串的长度</p><h3 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h3><p><strong>字符串的拼接</strong>利用加号即可</p><ul><li>拼接方式: 字符串+任何类型 = 拼接之后的新字符串</li><li>拼接前会把与字符串相加的任何类型转成字符串,再拼接成一个新的字符串</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">12</span> + <span class="hljs-string">&#x27;pink&#x27;</span>)<span class="hljs-comment">// 结果:12pink</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;pink&#x27;</span> + <span class="hljs-number">12</span>)<span class="hljs-comment">// 结果:pink12</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;you&#x27;</span> + <span class="hljs-string">&#x27;and&#x27;</span> + <span class="hljs-string">&#x27;me&#x27;</span>)<span class="hljs-comment">// 结果:youandme</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">12</span> + <span class="hljs-number">12</span>)<span class="hljs-comment">// 结果: 24(数值相加)</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;pink老师&#x27;</span> + age + <span class="hljs-string">&#x27;岁&#x27;</span>) <span class="hljs-comment">// 结果: pink老师18岁</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="布尔型boolean"><a href="#布尔型boolean" class="headerlink" title="布尔型boolean"></a>布尔型boolean</h3><p>有两个值:true false</p><p>当布尔型与数字型进行运算时,true的值为1,false的值为0</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> flag2 = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag + <span class="hljs-number">1</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag2 + <span class="hljs-number">1</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="undefined和null"><a href="#undefined和null" class="headerlink" title="undefined和null"></a>undefined和null</h3><p>一个声明后没有被赋值的变量会有一个默认值undefined</p><p>一个声明变量给null值,里面存的值为空</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> str;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);              <span class="hljs-comment">// undefined</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// undefined</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> number = <span class="hljs-literal">undefined</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number + <span class="hljs-string">&#x27;pink&#x27;</span>);    <span class="hljs-comment">// undefinedpink</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number + <span class="hljs-number">1</span>);       <span class="hljs-comment">// undefined 和数字相加，最后是not a number,即NaN</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// null 空值</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> space = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span> + <span class="hljs-string">&#x27;pink&#x27;</span>);       <span class="hljs-comment">// nullpink</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span> + <span class="hljs-number">1</span>);          <span class="hljs-comment">// 1.注意与undefined的区别</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="typeof数据类型检测"><a href="#typeof数据类型检测" class="headerlink" title="typeof数据类型检测"></a>typeof数据类型检测</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;pink&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> str); <span class="hljs-comment">// string</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num = <span class="hljs-number">12</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> num); <span class="hljs-comment">// number</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> flag); <span class="hljs-comment">// boolean</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> temp = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> temp); <span class="hljs-comment">// object</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> age = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入您的年龄&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> age)     <span class="hljs-comment">// 是string，不是数字</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一般数字型的再控制台console显示为蓝色,字符型显示为黑色</p><p><strong>注意: prompt输入的数据是字符型</strong></p><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><ul><li>转换为字符串类型</li><li>转换为数字型</li><li>转换为布尔型</li></ul><h3 id="转换为字符串型"><a href="#转换为字符串型" class="headerlink" title="转换为字符串型"></a>转换为字符串型</h3><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>.toString()</td><td>转成字符串</td></tr><tr><td>String(变量)</td><td>转成字符串</td></tr><tr><td>加号拼接字符串</td><td>和字符串凭借的结果都是字符串</td></tr></tbody></table><ul><li>toString()和String()使用方式不一样</li><li>加号拼接字符串也称为隐式转换</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 变量.toString()</span><br><span class="hljs-keyword">var</span> str = num.<span class="hljs-title function_">toString</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> str);<br><span class="hljs-comment">// String(变量)</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(num));<br><span class="hljs-comment">// 利用 + ，拼接字符串的方法实现转换效果</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num + <span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="转换为数字型"><a href="#转换为数字型" class="headerlink" title="转换为数字型"></a>转换为数字型</h3><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>parseInt(string)</td><td>将string转换成整数数值型</td></tr><tr><td>parseFloat(string)</td><td>将string类型转成浮点数值型</td></tr><tr><td>Number()</td><td>将string类型转换为数值型</td></tr><tr><td>js隐式转换(- * /)</td><td>利用算术运算隐式转换为数值型</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 1 利用parseInt 和 parseFloat 将字符串转化为数字</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;3.14&#x27;</span>));          <span class="hljs-comment">// 3</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;3.91&#x27;</span>));          <span class="hljs-comment">// 3</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;120px&#x27;</span>));         <span class="hljs-comment">//120</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;qwe120px&#x27;</span>));      <span class="hljs-comment">// NaN</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;3.14&#x27;</span>));        <span class="hljs-comment">// 3.14</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;3.91&#x27;</span>));        <span class="hljs-comment">// 3.91</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;120px&#x27;</span>));       <span class="hljs-comment">// 120</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;qwe120px&#x27;</span>));    <span class="hljs-comment">// NaN</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 2 利用Number转化为数字</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;3&#x27;</span>));       <span class="hljs-comment">// 3</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;3.14&#x27;</span>));    <span class="hljs-comment">// 3.14</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 3 隐式转换:利用算数运算 - * /</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;12&#x27;</span> - <span class="hljs-number">0</span>);          <span class="hljs-comment">// 120</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;123&#x27;</span> - <span class="hljs-string">&#x27;120&#x27;</span>)      <span class="hljs-comment">// 3</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;123&#x27;</span> * <span class="hljs-number">1</span>);         <span class="hljs-comment">// 123</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h3><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>Boolean()</td><td>其他类型转成布尔值</td></tr></tbody></table><ul><li>代表空 否定的值会被转换为false 如: 0 null undefined NaN</li><li>其余值都转成true</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 以下均为false</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">null</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">undefined</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-number">0</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-title class_">NaN</span>));</span><br><span class="language-javascript">    <span class="hljs-comment">// 以下均为true</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&#x27;pink&#x27;</span>))</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&#x27;0&#x27;</span>))</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-number">2</span>));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><h3 id="浮点数的精度问题"><a href="#浮点数的精度问题" class="headerlink" title="浮点数的精度问题"></a>浮点数的精度问题</h3><p>浮点数值的最高精度是17位小数，但进行计算时其精度远远不如整数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.3</span>);     <span class="hljs-comment">// 结果：0.4</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0.07</span> * <span class="hljs-number">100</span>);    <span class="hljs-comment">// 注意不是7，而是结果：7.000000000001</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：不要直接判断两个浮点数是否相等</strong></p><h3 id="前置递增和后置递增"><a href="#前置递增和后置递增" class="headerlink" title="前置递增和后置递增"></a>前置递增和后置递增</h3><ul><li>前置递增与后置递增运算符可以简化代码的编写</li><li>单独使用时运行结构相同</li><li>与其他代码联用时，执行结果会不同</li><li>后置：先原值运算，后自加</li><li>前置：前自加，后运算</li></ul><p>如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> value = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> result = value++ + ++value; </span><br><span class="language-javascript">    <span class="hljs-comment">// 1.前一个value: 值为10，返回11; 2.后一个value：先加11+1=12，故10+12=22</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<span class="hljs-comment">// 结果为22</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算，会返回一个布尔值（true、false）作为比较运算的结果。</p><table><thead><tr><th>运算符</th><th>说明</th><th>案例</th><th>结果</th></tr></thead><tbody><tr><td>===    !==</td><td>全等（要求<strong>值和数据类型</strong>都一致）</td><td>37 === ‘37’</td><td>false</td></tr></tbody></table><p>注意区别：</p><ul><li>== 会默认转换数据类型，会把字符串型的数据转换为数字型，仅要求值相等即可</li><li>=== 要求 值 与 数据类型 完全相同</li></ul><table><thead><tr><th>运算符</th><th>作用</th><th>用法</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>将右边给左边</td></tr><tr><td>==</td><td>判断</td><td>判断两边值是否相等（注意此时后隐式转换）</td></tr><tr><td>===</td><td>全等</td><td>判断两边的值和数据类型是否完全相同</td></tr></tbody></table><p>如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span> == <span class="hljs-string">&#x27;3&#x27;</span>);<span class="hljs-comment">// true</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span> === <span class="hljs-string">&#x27;3&#x27;</span>);<span class="hljs-comment">// false</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th>逻辑运算符</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与，简称“与” and</td></tr><tr><td>||</td><td>逻辑或，简称“或” or</td></tr><tr><td>!</td><td>逻辑非，简称“非” not</td></tr></tbody></table><h3 id="短路运算"><a href="#短路运算" class="headerlink" title="短路运算"></a>短路运算</h3><p>当有多个表达式时，左边表达式的值可以确定结果时，就<strong>不再继续运算</strong>右边表达式的值</p><h3 id="逻辑与短路运算"><a href="#逻辑与短路运算" class="headerlink" title="逻辑与短路运算"></a>逻辑与短路运算</h3><ul><li><p>语法：表达式1 &amp;&amp; 表达式2</p></li><li><p>如果第一个表达式的值为真，则返回表达式2</p></li><li><p>如果第一个表达式的值为假，则返回表达式1</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">456</span> &amp;&amp; <span class="hljs-number">123</span>);        <span class="hljs-comment">// 123</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">123</span>);          <span class="hljs-comment">// 0</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; <span class="hljs-number">123</span>);         <span class="hljs-comment">// &#x27;&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-number">123</span>);       <span class="hljs-comment">// null</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span> &amp;&amp; <span class="hljs-literal">null</span>);       <span class="hljs-comment">// null</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span> &amp;&amp; <span class="hljs-literal">undefined</span>);  <span class="hljs-comment">// undefined</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span> &amp;&amp; <span class="hljs-title class_">NaN</span>);        <span class="hljs-comment">// NaN</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：空、否定均为假，即 0 ‘’ null undefined NaN均为假</p><h3 id="逻辑或短路运算"><a href="#逻辑或短路运算" class="headerlink" title="逻辑或短路运算"></a>逻辑或短路运算</h3><ul><li>语法：表达式1 || 表达式2</li><li>如果第一个表达式的值为真，则返回表达式1</li><li>如果第一个表达式的值为假，则返回表达式2</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">456</span> || <span class="hljs-number">123</span>);        <span class="hljs-comment">// 456</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0</span> || <span class="hljs-number">123</span>);          <span class="hljs-comment">// 123</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-number">123</span>);         <span class="hljs-comment">// 123</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span> || <span class="hljs-number">123</span>);       <span class="hljs-comment">// 123</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span> || <span class="hljs-literal">null</span>);       <span class="hljs-comment">// 123</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span> || <span class="hljs-literal">undefined</span>);  <span class="hljs-comment">// 123</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span> || <span class="hljs-title class_">NaN</span>);        <span class="hljs-comment">// 123</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>==注意：==左边表达式的值可以确定结果时，就<strong>不再继续运算</strong>右边表达式的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span> || num++);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);               <span class="hljs-comment">// 注意num的值此时仍为0</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th align="center">赋值运算符</th></tr></thead><tbody><tr><td align="center">=</td></tr><tr><td align="center">+=、-=</td></tr><tr><td align="center">*=、/=、%=</td></tr></tbody></table><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><table><thead><tr><th>优先级</th><th>运算符</th><th>顺序</th></tr></thead><tbody><tr><td>1</td><td>小括号</td><td>()</td></tr><tr><td>2</td><td>单元运算符</td><td>++ — !</td></tr><tr><td>3</td><td>算数运算符</td><td>先*/%,后+-</td></tr><tr><td>4</td><td>关系运算符</td><td>&gt; &gt;= &lt; &lt;=</td></tr><tr><td>5</td><td>相等运算符</td><td>== != === !==</td></tr><tr><td>6</td><td>逻辑运算符</td><td>先&amp;&amp; 后||</td></tr><tr><td>7</td><td>赋值运算符</td><td>=</td></tr><tr><td>8</td><td>逗号运算符</td><td>,</td></tr></tbody></table><ul><li>右眼运算符里面的逻辑非由于是单元运算符，故其优先级很高</li><li>逻辑与比逻辑或优先级高</li></ul><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">if (条件表达式) &#123;<br>// 条件成立执行语句<br>&#125;<br></code></pre></td></tr></table></figure><p>if-else语句</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">if (条件表达式) &#123;<br>// 执行语句1<br>&#125; else &#123;<br>// 执行语句2<br>&#125;<br></code></pre></td></tr></table></figure><p>if-else if 语句</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">if (条件表达式1) &#123;<br>// 执行语句1<br>&#125; else if (条件表达式2) &#123;<br>// 执行语句2<br>&#125; else if (条件表达式3) &#123;<br>// 执行语句3<br>&#125; else [<br>// 执行语句4<br>]<br></code></pre></td></tr></table></figure><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><p>表达式1 ？ 表达式2 : 表达式3;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> result = num == <span class="hljs-number">11</span> ? <span class="hljs-string">&#x27;yes&#x27;</span> : <span class="hljs-string">&#x27;no&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例：数字补0案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">    用户输入0~59之间的一个数字，</span></span><br><span class="hljs-comment"><span class="language-javascript">    若数字小于10，则在这个数字之前补0，否则不做操作，</span></span><br><span class="hljs-comment"><span class="language-javascript">    用一个变量接收这个返回值，输出 </span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入0~59之间的一个数：&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> result = num &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + num : num;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(result);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">switch (表达式) &#123;<br>    case value1:<br>    // 表达式 等于 value1时要执行的代码<br>    break;<br>    case value2:<br>    // 表达式 等于 value2时要执行的代码<br>    break;<br>    case value3:<br>    // 表达式 等于 value2时要执行的代码<br>    break;<br>    default:<br>    // 表达式不等于任何一个value时执行的语句<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><ul><li>for 循环</li><li>while 循环</li><li>do-while循环</li></ul><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>语法：</p><blockquote><p>for (初始化变量; 条件表达式; 操作表达式) {</p><p>​    // 循环体；</p><p>}</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;i = &#x27;</span> + i);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="断掉调试"><a href="#断掉调试" class="headerlink" title="断掉调试"></a>断掉调试</h3><p>可以帮助我们观察程序的运行过程</p><p>操作如下：</p><ol><li>浏览器中按F12 $\longrightarrow$ sources $\longrightarrow$ 找到需要调试的文件 $\longrightarrow$ 在程序的某一行设置断点</li><li>Watch监视，通过Watch可以监视变量的值得变化</li><li>按F11可以单步执行程序，让程序一行一行的执行，此时可以观察Watch里面的变量值的变化</li></ol><p>![image-20220405111206277](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/02">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/02</a> JavaScript基础语法/image-20220405111206277.png)</p><h3 id="for循环案例"><a href="#for循环案例" class="headerlink" title="for循环案例"></a>for循环案例</h3><ol><li>1-100之和的平均值</li><li>1-100所有偶数和奇数之和</li><li>1-100能被3整除的数字之和</li><li>输入班级人属，依次输入学生成绩，计算平均成绩</li><li>一行打印五个星星到控制台上</li><li>打印n行n列的星星</li><li>用星星打印倒三角形</li><li>打印九九乘法表</li></ol><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>语法：</p><blockquote><p>while (条件表达式) {</p><p>​    // 循环体代码；</p><p>}</p></blockquote> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> message = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;你喜欢吃草莓吗&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">while</span> (message !== <span class="hljs-string">&#x27;喜欢&#x27;</span>) &#123;</span><br><span class="language-javascript">        message = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;你喜欢吃草莓吗&#x27;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我也喜欢&#x27;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h2><p>语法：</p><blockquote><p>do {</p><p>​    // 循环体代码</p><p>} while (条件表达式);</p></blockquote><p>do-while至少执行一次循环体</p><h2 id="标识符命名规范"><a href="#标识符命名规范" class="headerlink" title="标识符命名规范"></a>标识符命名规范</h2><ul><li>变量、函数命名必须有意义</li><li>变量的命名一般用名词</li><li>函数的命名一般为动词</li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><ol><li>求1-100之间所有数之和及平均值</li><li>1-100所有偶数之和</li><li>100以内7的倍数的总和</li><li>使用for循环打印五角星矩形，要求每次智能输出一个五角星</li><li>使用for循环打印五角星三角形</li><li>使用for循环打印99乘法表</li><li>接收用户输入的用户名和密码，若用户名为admin，密码为123456，则提示用户登陆成功，否则一直让用户输入</li><li>求整数1-100的累加值，要求跳过所有个位数为3的数</li></ol><p>+++</p><p><strong>制作简易ATM</strong></p><p>页面显示如下：</p><blockquote><p>请输入您要的操作：</p><ol><li><p>存钱</p></li><li><p>取钱</p></li><li><p>显示余额</p></li><li><p>退出</p></li></ol></blockquote><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><h3 id="利用new创建"><a href="#利用new创建" class="headerlink" title="利用new创建"></a>利用new创建</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 利用new Array() 创建新数组</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> arr);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>Array()中的A要大写</li><li>后续 对象 学习中会加强理解new创建数组的方式</li></ul><h3 id="利用字面量"><a href="#利用字面量" class="headerlink" title="利用字面量"></a>利用字面量</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 利用字面量创建空数组</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr1 = [];</span><br><span class="language-javascript">    <span class="hljs-comment">// 利用字面量声明创建带有初始值的数组</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-literal">false</span>];</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="数组元素类型"><a href="#数组元素类型" class="headerlink" title="数组元素类型"></a>数组元素类型</h3><p>数组中可以存放任意类型的数据，（字符串、数字、布尔）</p><h2 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 利用字面量声明创建带有初始值的数组</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-literal">false</span>];</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1);</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">// 访问数组元素</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 索引从0开始</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1[<span class="hljs-number">2</span>]);<span class="hljs-comment">// pink</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1[<span class="hljs-number">4</span>]);   <span class="hljs-comment">// arr1数组中没有索引为4的元素，故返回undefined</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h3><p>数组名.length    动态监测数组元素的个数</p><h2 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h2><h3 id="修改length长度增加"><a href="#修改length长度增加" class="headerlink" title="修改length长度增加"></a>修改length长度增加</h3><ul><li>可以通过修改length长度来实现扩容的目的</li><li>length属性是可读写的</li></ul><h3 id="修改索引增加"><a href="#修改索引增加" class="headerlink" title="修改索引增加"></a>修改索引增加</h3><ul><li>修改<strong>数组索引</strong>的方式追加数组元素</li><li>不能直接给数组名赋值，否则会覆盖以前的数据</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 通过修改length新增数组元素个数</span></span><br><span class="language-javascript">    arr1.<span class="hljs-property">length</span> = <span class="hljs-number">5</span>;<span class="hljs-comment">// 现在数组里面应该有5个元素</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1[<span class="hljs-number">3</span>]);   <span class="hljs-comment">// arr[3] arr[4]均为undefined</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 通过修改索引</span></span><br><span class="language-javascript">    arr1[<span class="hljs-number">9</span>] = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1[i]);<span class="hljs-comment">// 分别是：1、2、3、6个undefined、10</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>筛选数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 将数组[2, 0, 6, 1, 77, 0, 52, 0, 25, 7] 中大于等于10的元素选出来，放入新数组</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">7</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> newArr = [];</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 方法1</span></span><br><span class="language-javascript">    <span class="hljs-comment">/* var j = 0;</span></span><br><span class="hljs-comment"><span class="language-javascript">        for (var i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">            if (arr[i] &gt;= 10) &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">                newArr[j] = arr[i];</span></span><br><span class="hljs-comment"><span class="language-javascript">                j++;</span></span><br><span class="hljs-comment"><span class="language-javascript">            &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">        &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">        console.log(newArr); */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 方法2 利用length的自增性质</span></span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (arr[i] &gt;= <span class="hljs-number">10</span>) &#123;</span><br><span class="language-javascript">            newArr[newArr.<span class="hljs-property">length</span>] = arr[i];</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 函数定义</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getSum</span>(<span class="hljs-params">a, b</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> a + b;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 调用函数，并在控制台输出</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getSum</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>function是声明函数的关键字，必须小写</li><li>由于函数一般是为了实现某个功能才定义的，故通常将函数名命名为动词</li><li>调用函数时，不要忘记添加小括号</li></ul><h2 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>形参</td><td>形式上的参数 函数定义的时候传递的参数</td></tr><tr><td>实参</td><td>实际上的参数，函数调用的时候传递的参数</td></tr></tbody></table><p>注意：</p><ul><li>若实参个数与形参个数相同，则正常输出结果</li><li>若实参的个数多于形参的个数，则只会取到形参的个数</li><li>若实参的个数小于形参的个数，多于的形参定义为undefined（函数调用的最终结果就是NaN）</li></ul><p>案例：</p><ol><li>求两个数最大值的函数</li><li>求任意一个数组中的最大值</li></ol><h2 id="返回值return"><a href="#返回值return" class="headerlink" title="返回值return"></a>返回值return</h2><ul><li>return 后面的代码不会被执行</li><li>return返回多个值，如：return a, b; 只会返回最后一个值b</li><li>若希望return返回多个值，可以利用数组，将需要返回的值放在数组中，再将数组返回</li><li>若一个函数没有renturn，则其返回值是undefined</li></ul><h2 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="==arguments的使用=="></a>==arguments的使用==</h2><p>当不确定有多少个参数传递的时候，可以用<code>arguments</code>来获取。</p><p>在JS中arguments实际上是当前函数的一个内置对象，所有函数都内置了一个arguments对象，arguments对象中存储了传递的所有实参</p><p><strong>arguments展示形式是一个伪数组</strong>，因此可以进行遍历，具有以下特点：</p><ul><li>具有<strong>length属性</strong></li><li>按<strong>索引</strong>方式储存数据</li><li>不具有数据的push、pop等方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);<span class="hljs-comment">// 存储了所有传递过来的实参</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>);<span class="hljs-comment">// 3</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>]);<span class="hljs-comment">// 1</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ol><li><p>求任意个数中的最大值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getMax</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> max = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (max &lt; <span class="hljs-variable language_">arguments</span>[i]) &#123;</span><br><span class="language-javascript">                max = <span class="hljs-variable language_">arguments</span>[i];</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> max;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getMax</span>(<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">23</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getMax</span>(<span class="hljs-number">34</span>, <span class="hljs-number">56</span>, <span class="hljs-number">0</span>, <span class="hljs-number">999</span>, <span class="hljs-number">234</span>));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>翻转任意数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">arr</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> newArr = [];</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;</span><br><span class="language-javascript">            newArr[newArr.<span class="hljs-property">length</span>] = arr[i];</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> newArr;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr2 = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>];</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">reverse</span>(arr1));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">reverse</span>(arr2));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>利用函数冒泡排序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sort</span>(<span class="hljs-params">arr</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; arr.<span class="hljs-property">length</span> - i - <span class="hljs-number">1</span>; j++) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> temp = arr[j];</span><br><span class="language-javascript">                    arr[j] = arr[j + <span class="hljs-number">1</span>];</span><br><span class="language-javascript">                    arr[j + <span class="hljs-number">1</span>] = temp;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> arr;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr1 = <span class="hljs-title function_">sort</span>([<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">23</span>, <span class="hljs-number">11</span>, <span class="hljs-number">99</span>, <span class="hljs-number">34</span>]);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>利用函数判断闰年</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isLeapyear</span>(<span class="hljs-params">year</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isLeapyear</span>(<span class="hljs-number">2000</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isLeapyear</span>(<span class="hljs-number">2004</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isLeapyear</span>(<span class="hljs-number">2003</span>));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>判断输入年份2月份的天数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">days</span>(<span class="hljs-params">year</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isLeapyear</span>(year)) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;当年2月份有29天&#x27;</span>);</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;当年2月份有28天&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isLeapyear</span>(<span class="hljs-params">year</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">days</span>(<span class="hljs-number">2000</span>);<span class="hljs-comment">// 当年2月份有29天</span></span><br><span class="language-javascript">    <span class="hljs-title function_">days</span>(<span class="hljs-number">1999</span>);<span class="hljs-comment">// 当年2月份有28天</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="函数的两种声明方式"><a href="#函数的两种声明方式" class="headerlink" title="函数的两种声明方式"></a>函数的两种声明方式</h2><h3 id="函数关键字"><a href="#函数关键字" class="headerlink" title="函数关键字"></a>函数关键字</h3><ol><li>利用函数关键字自定义函数（命名函数）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 利用函数关键字自定义函数（命名函数）</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">fn</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><ol start="2"><li>函数表达式（匿名函数），即 var 变量名 = function() {}</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 函数表达式(匿名函数)，即 var 变量名 = function () &#123; &#125;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> func = <span class="hljs-keyword">function</span> (<span class="hljs-params">arg</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">func</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>func是变量名，不是函数名（因此第二种中方法声明函数，是没有函数名的）</li><li>函数表达式声明方式更声明变量差不多（变量里面存的是值，函数表达式里面存的是函数）</li><li>函数表达式可以进行传递参数</li></ul><h1 id="作用域"><a href="#作用域" class="headerlink" title="==作用域=="></a>==作用域==</h1><p>在ES6之前，JS的作用域分为 全局作用域和局部作用域。</p><p>目的是 为了提高程序的可靠性，减少命名冲突</p><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><p>整个script标签，或者是一个单独的js的文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// num全局变量</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);   <span class="hljs-comment">// 10</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>全局变量在代码任何位置都可以使用</li><li>特殊情况下，在函数内不使用var声明的变量也是全局变量（见特别注意，不建议使用）</li></ul><p style="color:red">特别注意: 如果函数内部，没有声明直接赋值的变量也属于全局变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// num局部变量</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> num = num2 = <span class="hljs-number">20</span>;<span class="hljs-comment">// num2 为全局变量</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 相当于</span></span><br><span class="language-javascript">        <span class="hljs-comment">// var num = 20;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// num2 = 20// num2 为全局变量</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">func</span>();     <span class="hljs-comment">// 20</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此处num2为全局变量</p><h2 id="局部作用域（函数作用域）"><a href="#局部作用域（函数作用域）" class="headerlink" title="局部作用域（函数作用域）"></a>局部作用域（函数作用域）</h2><p>在函数内部，只在函数内部起效果、作用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// num局部变量</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">func</span>();     <span class="hljs-comment">// 20</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>只能在该函数内部使用</li><li>函数的形参实际上就是局部变量</li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li><p>全局变量</p><p>在任何一个地方都可以使用，只有在浏览器关闭时才会销毁，因此比较占内存</p></li><li><p>局部变量</p><p>只在函数内部使用，当其所在代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间</p></li></ul><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="==作用域链=="></a>==作用域链==</h2><p>根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作 作用域链</p><h1 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h1><ol><li>JS引擎执行JS分为两步：预解析 与 代码执行</li></ol><ul><li><p>预解析</p><p>JS引擎会把Js里面所有的 var 和 function 提升到当前作用域的最前面</p></li><li><p>代码执行</p><p>按照代码书写的顺序从上往下执行</p></li></ul><ol start="2"><li>预解析分为 变量预解析（变量提升） 和 函数预解析（函数提升）</li></ol><ul><li><p>变量提升</p><p>把所有的变量声明都提升到当前的作用域最前面 <strong>不提升赋值操作</strong></p></li><li><p>函数提升</p><p>把所有的函数声明提升到当前作用域的最前面，<strong>不调用函数</strong></p></li></ul><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="==案例=="></a>==案例==</h2><p>案例1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 案例1</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">    <span class="hljs-title function_">fun</span>();</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 相当于执行以下操作</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    num = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">    <span class="hljs-title function_">fun</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例2</p><p style="color:red">注意</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">fn</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 相当于执行以下操作</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> num;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> num;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);   <span class="hljs-comment">// undefined</span></span><br><span class="language-javascript">        num = <span class="hljs-number">20</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);   <span class="hljs-comment">// 20</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    num = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">    <span class="hljs-title function_">fn</span>()</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>案例3</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">f1</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> a = b = c = <span class="hljs-number">9</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 相当于执行以下操作</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> a = <span class="hljs-number">9</span>;</span><br><span class="language-javascript">        b = <span class="hljs-number">9</span>;      <span class="hljs-comment">// 直接赋值，没有加var，故b、c为全局变量</span></span><br><span class="language-javascript">        c = <span class="hljs-number">9</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">// 9</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<span class="hljs-comment">// 9</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<span class="hljs-comment">// 9</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">f1</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);     <span class="hljs-comment">// 9</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);     <span class="hljs-comment">// 9</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);     <span class="hljs-comment">// 报错，a没有声明，也没有定义</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>在JS中，对象是一组无序的相关属性和方法的集合，所有事物都是对象，例如字符串、数值、数组、函数等</p><p>对象是由属性和方法组成的</p><ul><li>属性：事物的特征，在对象中用属性来表示</li><li>方法：事物的行为，在对象中用方法来表示</li></ul><p>使用对象的原因：</p><p>变量只能保存一个值，数组能够保存多个值，但要保存一个人的完整信息，使用数组结构表达不够清晰。</p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>创建对象有三种方式：</p><ul><li>利用字面量创建</li><li>利用 new Object创建</li><li>利用构造函数创建对象</li></ul><h3 id="字面量创建"><a href="#字面量创建" class="headerlink" title="字面量创建"></a>字面量创建</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>var obj = {}    // 创建一个空的对象</p><p>花括号里面包含了表达这个具体事物的属性和方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// var obj = &#123;&#125; 创建一个空的对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;张三丰&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>对象里面的属性或方法采取键值对的形式：属性名：属性值</li><li>多个属性或者方法之间用<strong>逗号</strong>隔开</li><li>方法冒号后面跟的是一个匿名函数</li></ul><h4 id="调用"><a href="#调用" class="headerlink" title="==调用=="></a>==调用==</h4><ul><li>调用对象属性：对象名.属性名</li><li>调用对象属性：对象名[‘属性名’]，必须加引号</li><li>调用对象方法：对象名.方法名()，后面一定加括号</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;张三丰&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">// 对象名.属性名</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">uname</span>);</span><br><span class="language-javascript">    <span class="hljs-comment">// 对象名[‘属性名’]</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[<span class="hljs-string">&#x27;age&#x27;</span>]);</span><br><span class="language-javascript">    <span class="hljs-comment">// 对象名.方法名()</span></span><br><span class="language-javascript">     obj.<span class="hljs-title function_">sayHi</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>区别：变量&amp;属性、函数&amp;方法</p></blockquote><ul><li><p>变量——单独声明、赋值，使用直接写变量名，单独存在</p></li><li><p>属性——包含在对象里面，<strong>不需要声明</strong>，使用必须写 对象名.属性</p></li></ul><ul><li><p>函数——单独声明，调用，函数名()单独存在</p></li><li><p>方法——包含在对象里面，调用必须写 对象名.方法()</p></li></ul><h3 id="new-object创建对象"><a href="#new-object创建对象" class="headerlink" title="new object创建对象"></a>new object创建对象</h3><p>var obj = new Object();</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 创建一个空的对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">    obj.<span class="hljs-property">uname</span> = <span class="hljs-string">&#x27;张三丰&#x27;</span>;</span><br><span class="language-javascript">    obj.<span class="hljs-property">age</span> = <span class="hljs-number">18</span>;</span><br><span class="language-javascript">    obj.<span class="hljs-property">sex</span> = <span class="hljs-string">&#x27;男&#x27;</span>；</span><br><span class="language-javascript">    obj.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="构造函数创建"><a href="#构造函数创建" class="headerlink" title="构造函数创建"></a>构造函数创建</h3><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><p>由于一次创建一个对象，里面很多属性和方法都是相同的，要解决重复创建相同属性和方法对象，可以利用函数的方法，解决这些重复代码，这个函数就叫做 <strong>构造函数</strong></p><p><strong>构造函数</strong>：将对象里面一些相同的属性和方法抽象出来封装到函数里面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 构造函数创建对象</span></span><br><span class="language-javascript">    <span class="hljs-comment">// function 构造函数名() &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     this.属性 = 属性值;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     this.方法 = function() &#123;&#125;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">uname, age, sex, skill</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = uname;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span> = sex;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">skill</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;唱歌和演戏&#x27;</span>);</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;男&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> zxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;张学友&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;男&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ldh);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zxy);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意事项：</p><ul><li>构造函数名字的首字母大写</li><li>构造函数不需要return，直接返回结果</li><li>调用构造函数，必须使用new</li></ul><h4 id="构造函数与对象"><a href="#构造函数与对象" class="headerlink" title="构造函数与对象"></a>构造函数与对象</h4><p>构造函数：抽象了对象的公共部分，封装到了函数里面，泛指一大类（class），如：明星</p><p>对象：特指一个具体的事物，通过new关键字创建对象的过程也称为<strong>对象实例化</strong>。如：刘德华</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 构造函数</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">hero</span>(<span class="hljs-params">uname, type, blood, attack</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = uname;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = type;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">blood</span> = blood;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">attack</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(attack);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 对象lianpo、houyi</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> lianpo = <span class="hljs-keyword">new</span> <span class="hljs-title function_">hero</span>(<span class="hljs-string">&#x27;廉颇&#x27;</span>, <span class="hljs-string">&#x27;力量型&#x27;</span>, <span class="hljs-string">&#x27;500血量&#x27;</span>, <span class="hljs-string">&#x27;近战&#x27;</span>); <span class="hljs-comment">// 返回一个对象</span></span><br><span class="language-javascript">    lianpo.<span class="hljs-title function_">attack</span>();</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> houyi = <span class="hljs-keyword">new</span> <span class="hljs-title function_">hero</span>(<span class="hljs-string">&#x27;后羿&#x27;</span>, <span class="hljs-string">&#x27;射手型&#x27;</span>, <span class="hljs-string">&#x27;100血量&#x27;</span>, <span class="hljs-string">&#x27;远程&#x27;</span>);  <span class="hljs-comment">// 返回一个对象</span></span><br><span class="language-javascript">    houyi.<span class="hljs-title function_">attack</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h2><p>new关键字的执行过程</p><ol><li>new构造函数可以在内存中创建一个空的对象</li><li>this会指向刚才创建的空对象</li><li>执行构造函数里面的代码，给这个空对象添加属性和方法</li><li>返回这个对象</li></ol><h2 id="遍历对象属性"><a href="#遍历对象属性" class="headerlink" title="遍历对象属性"></a>遍历对象属性</h2><p>利用 for (var k in obj) { // 遍历; }</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key);<span class="hljs-comment">// 输出属性名</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[key]);<span class="hljs-comment">// 输出属性值</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"> </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="作业-1"><a href="#作业-1" class="headerlink" title="作业"></a>作业</h2><ol><li>创建一个电脑对象，该对象有颜色、重量、品牌、型号、可以看电影、听音乐、打游戏、敲代码</li><li>创建一个按钮对象，该对象需要包含宽、高，背景颜色和点击行为</li><li>创建一个车的对象，该对象有重量、颜色、牌子，可以载人、拉货和耕田</li></ol><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><ul><li><p>JS中的对象分为3种：自定义对象、内置对象、浏览器对象</p><p>其中自定义对象、内置对象是ECMAScript；浏览器对象属于JS独有，后续JS API讲解</p></li><li><p>内置对象是指：JS语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或者最基本而必要的功能（属性和方法）</p></li><li><p>内置对象的优点就是帮助快速开发</p></li><li><p>JS提供了多个内置对象：Math Date Array String</p></li></ul><h3 id="文档查询"><a href="#文档查询" class="headerlink" title="文档查询"></a>文档查询</h3><p><a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><p>如何学习对象中的方法：</p><ol><li>查阅该方法的<strong>功能</strong></li><li>查看里面<strong>参数的意义和类型</strong></li><li>查看<strong>返回值的意义和类型</strong></li><li>通过demo进行测试</li></ol><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>Math是一个数学对象，不是一个构造函数，所以我们不需要new来调用，而是直接使用里面的属性和方法即可</p><h4 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h4><table><thead><tr><th>属性和方法</th><th>说明</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.round()</td><td>四舍五入，就近取整。注意-x.5(如-3.5),结果是-x(-3而不是-4)</td></tr><tr><td>Math.abs()</td><td>绝对值，</td></tr><tr><td>Math.max() / Math.min()</td><td>求最大值、最小值</td></tr><tr><td>Math.random()</td><td>返回一个0到1之间的随机小数（包含0，不包含1）</td></tr></tbody></table><p><strong>abs</strong>属性注意事项：</p><ul><li>Math.abs(‘-8’)会隐式转换，将’-8’转换成-8，再取绝对值</li><li>Math.abs(‘pink’)，结果为NaN</li></ul><p><strong>round</strong>属性注意：</p><ul><li>Math.round(-3.5)，当传入值为负数，不是四舍五入，为5时也要舍去，相当于五舍六入，因此结果为-3</li></ul><p><strong>random</strong>注意：</p><ul><li><p>Math.random()的值为0~1，不包含1</p></li><li><p>若要得到min、max两个数之间的随机整数，并包含这两个数：</p><p>Math.floor(Math.random()*(max-min+1))+min</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">56</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-number">56</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-number">1</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;pink&#x27;</span>));   <span class="hljs-comment">//  NaN</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>());                <span class="hljs-comment">// -Infinity</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-number">3.1</span>));       <span class="hljs-comment">// 3</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-number">3.9</span>));       <span class="hljs-comment">// 3</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-number">3.2</span>));        <span class="hljs-comment">// 4</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-number">3.9</span>));        <span class="hljs-comment">// 4</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-number">3.2</span>));       <span class="hljs-comment">// 3</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-number">3.9</span>));       <span class="hljs-comment">// 4</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-number">3.5</span>));       <span class="hljs-comment">// 4</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(-<span class="hljs-number">3.5</span>));      <span class="hljs-comment">// -3 而不是 -4</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(-<span class="hljs-number">3.6</span>));      <span class="hljs-comment">// -4</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(<span class="hljs-number">3.5</span>));         <span class="hljs-comment">// 3.5</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(-<span class="hljs-number">3</span>));          <span class="hljs-comment">// 3</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(<span class="hljs-string">&#x27;-8&#x27;</span>));        <span class="hljs-comment">// 8</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(<span class="hljs-string">&#x27;pink&#x27;</span>));      <span class="hljs-comment">// NaN</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><p>封装自己的数学函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 利用对象封装自己的数学对象，里面有： PI 最大值 最小值</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> myMath = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">PI</span>: <span class="hljs-number">3.1415926</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">max</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            max = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>[i] &gt; max) &#123;</span><br><span class="language-javascript">                    max = <span class="hljs-variable language_">arguments</span>[i];</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> max;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">min</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            min = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>[i] &lt; min) &#123;</span><br><span class="language-javascript">                    min = <span class="hljs-variable language_">arguments</span>[i];</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> min;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myMath.<span class="hljs-title function_">max</span>(<span class="hljs-number">56</span>, <span class="hljs-number">45</span>, <span class="hljs-number">67</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myMath.<span class="hljs-title function_">min</span>(<span class="hljs-number">56</span>, <span class="hljs-number">45</span>, <span class="hljs-number">67</span>));</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myMath.<span class="hljs-property">PI</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// Math.random()的值为0~1，不包含1</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 返回min~max之间的随机一个数，包含min和max</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandom</span>(<span class="hljs-params">min, max</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (max - min + <span class="hljs-number">1</span>)) + min;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getRandom</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例：随机点名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandom</span>(<span class="hljs-params">min, max</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (max - min + <span class="hljs-number">1</span>)) + min;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 随机点名</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;夏明&#x27;</span>, <span class="hljs-string">&#x27;小赵&#x27;</span>, <span class="hljs-string">&#x27;王明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> name = arr[<span class="hljs-title function_">getRandom</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)] <span class="hljs-comment">// 从前四个同学中随机抽取一人</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Data-对象"><a href="#Data-对象" class="headerlink" title="Data()对象"></a>Data()对象</h3><ul><li>Date和Math不一样，<strong>Date是一个构造函数，所以需要实例化后才能使用</strong></li><li>Date实例用来处理日期和时间</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> time = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <span class="hljs-comment">// 实例化</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(time);  <span class="hljs-comment">// Sat Apr 09 2022 16:00:41 GMT+0800 (中国标准时间)</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Date-的参数"><a href="#Date-的参数" class="headerlink" title="Date()的参数"></a>Date()的参数</h4><p>参数格式可以为：</p><ul><li><p>无参数 返回当前时间</p></li><li><p>字符型 ‘2022-4-9’</p></li><li><p>字符型 ‘2022/4/9’</p></li><li><p><strong>数字型 2022, 4, 9   此时返回的月份是4月份的下一个月 5月</strong></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> time1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2022-4-9&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(time1);  <span class="hljs-comment">// Sat Apr 09 2022 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> time2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2022/4/9&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(time2); <span class="hljs-comment">// Sat Apr 09 2022 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> time2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2022/4/9 08:08:08&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(time2); <span class="hljs-comment">// Sat Apr 09 2022 08:08:08 GMT+0800 (中国标准时间</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> time3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2022</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>);   <span class="hljs-comment">// 返回的是5月，而不是4月</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(time3); <span class="hljs-comment">// Mon May 09 2022 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取当年</td></tr><tr><td>getMonth()</td><td><strong>获取当月（0-11）</strong></td></tr><tr><td>getDate()</td><td>获取当天日期</td></tr><tr><td>getDay()</td><td>获取星期几</td></tr><tr><td>getHours()</td><td>获取当前小时</td></tr><tr><td>getMinutes()</td><td>获取当前分钟</td></tr><tr><td>getSecond()</td><td>获取当前秒钟</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>日期格式化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">    <span class="hljs-comment">// 当前年</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> year = now.<span class="hljs-title function_">getFullYear</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(year);</span><br><span class="language-javascript">    <span class="hljs-comment">// 当月的上一个月</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> month = now.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(month);</span><br><span class="language-javascript">    <span class="hljs-comment">// 当前日期（几号）</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> date = now.<span class="hljs-title function_">getDate</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date);</span><br><span class="language-javascript">    <span class="hljs-comment">// 星期几（返回为 0~6，周日是0）</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> day = now.<span class="hljs-title function_">getDay</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(day);</span><br><span class="language-javascript">    <span class="hljs-comment">// 当前小时</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> hours = now.<span class="hljs-title function_">getHours</span>()</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(hours);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> week = [<span class="hljs-string">&#x27;星期日&#x27;</span>, <span class="hljs-string">&#x27;星期一&#x27;</span>, <span class="hljs-string">&#x27;星期二&#x27;</span>, <span class="hljs-string">&#x27;星期三&#x27;</span>, <span class="hljs-string">&#x27;星期四&#x27;</span>, <span class="hljs-string">&#x27;星期五&#x27;</span>, <span class="hljs-string">&#x27;星期六&#x27;</span>]</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 输出： 2022年4月9号 星期六</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(year + <span class="hljs-string">&#x27;年&#x27;</span> + month + <span class="hljs-string">&#x27;月&#x27;</span> + date + <span class="hljs-string">&#x27;号 &#x27;</span> + week[day]);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>时分秒格式化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getTime</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">        <span class="hljs-comment">// 当前小时</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> hours = now.<span class="hljs-title function_">getHours</span>();</span><br><span class="language-javascript">        hours = hours &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + hours : hours;</span><br><span class="language-javascript">        <span class="hljs-comment">// 当前分钟</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> minutes = now.<span class="hljs-title function_">getMinutes</span>();</span><br><span class="language-javascript">        minutes = minutes &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + minutes : minutes;</span><br><span class="language-javascript">        <span class="hljs-comment">// 当前秒钟</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> seconds = now.<span class="hljs-title function_">getSeconds</span>();</span><br><span class="language-javascript">        seconds = seconds &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + seconds : seconds;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> hours + <span class="hljs-string">&#x27;:&#x27;</span> + minutes + <span class="hljs-string">&#x27;:&#x27;</span> + seconds;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getTime</span>());</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><p>总的毫秒数</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>valueOf()</td><td>获取距离1970.1.1总的毫秒数</td></tr><tr><td>getTime()</td><td>获取距离1970.1.1总的毫秒数</td></tr></tbody></table><blockquote><p>获得总的毫秒数共有3种方法：</p></blockquote><ol><li>.getTime() / .valueOf()</li><li>+new Date()</li><li>Date.now()</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">    <span class="hljs-comment">// 方法1</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">getTime</span>());    <span class="hljs-comment">// 获取距离1970.1.1总的毫秒数</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">valueOf</span>());</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 方法2 最简单的方法: +new Date()</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> date1 = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date1);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 方法3 H5新增的 获得总的毫秒数</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>利用时间戳可以制作倒计时</p><ul><li>用未来的一个时间点的总毫秒数 - 当前时间的总毫秒数 = 剩余的时间（倒计时）</li><li>输入时间的总毫秒数：+new Date(time)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">countDown</span>(<span class="hljs-params">time</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> nowTime = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> inputTime = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> times = inputTime - nowTime;    <span class="hljs-comment">// 剩余毫秒数</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> times = times / <span class="hljs-number">1000</span>;           <span class="hljs-comment">// 剩余总的秒数</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> days = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>);    <span class="hljs-comment">// 剩余总的天数 </span></span><br><span class="language-javascript">        days = days &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + days : days;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> hours = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> % <span class="hljs-number">24</span>);   <span class="hljs-comment">// 小时 </span></span><br><span class="language-javascript">        hours = hours &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + hours : hours;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> minutes = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> % <span class="hljs-number">60</span>);      <span class="hljs-comment">// 分钟</span></span><br><span class="language-javascript">        minutes = minutes &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + minutes : minutes;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> seconds = <span class="hljs-built_in">parseInt</span>(times % <span class="hljs-number">60</span>);           <span class="hljs-comment">// 秒钟</span></span><br><span class="language-javascript">        seconds = seconds &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + seconds : seconds;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> days + <span class="hljs-string">&#x27;天:&#x27;</span> + hours + <span class="hljs-string">&#x27;小时:&#x27;</span> + minutes + <span class="hljs-string">&#x27;分:&#x27;</span> + seconds + <span class="hljs-string">&#x27;秒&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">countDown</span>(<span class="hljs-string">&#x27;2022-4-11 23:00:00&#x27;</span>));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Array-对象"><a href="#Array-对象" class="headerlink" title="Array()对象"></a>Array()对象</h3><h4 id="创建数组的两种方式"><a href="#创建数组的两种方式" class="headerlink" title="创建数组的两种方式"></a>创建数组的两种方式</h4><ol><li><p>字面量</p></li><li><p>new Array()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 字面量创建</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr1 = [];</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// new Array() 创建</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">2</span>);        <span class="hljs-comment">// 表示创建一个长度为2的数组</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);     <span class="hljs-comment">// 表示创建一个 含数组元素为 2、3 的数组，即[2, 3]</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意区别：</p><p>var arr2 = new Array(2); 表示创建一个长度为2的数组，里面有<strong>2个空</strong>的数组元素<br>var arr3 = new Array(2, 3);表示创建一个 含<strong>数组元素为 2、3</strong> 的数组，即[2, 3]</p></li></ol><h4 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h4><p>当调用某些函数，需要传入数组时，可以提前判断传入的参数是否为数组，以防报错或无结果</p><p>检测arr是否为数组： </p><p>方法一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">arr instanceof Array;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr = [];</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> obj = &#123;&#125;;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>);  <span class="hljs-comment">// true</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>);  <span class="hljs-comment">// false</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Array.isArray(参数)  // H5新增的方法<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> arr = [];</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> obj = &#123;&#125;;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr));    <span class="hljs-comment">// true</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj));    <span class="hljs-comment">// false</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="删除数组元素"><a href="#删除数组元素" class="headerlink" title="删除数组元素"></a>删除数组元素</h4><table><thead><tr><th>方法</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>push(参数1……)</td><td>末尾添加一个或多个元素，原数组会发生变化</td><td>返回新的长度</td></tr><tr><td>pop()</td><td>删除数组最后一个元素。无参数，原数组会发生变化</td><td>返回删除的元素</td></tr><tr><td>unshift(参数1……)</td><td>在数组开头添加一个或多个元素。原数组会发生变化</td><td>返回新的长度</td></tr><tr><td>shift()</td><td>删除数组的第一个元素，数组长度减1，无参数，原数组会发生变化</td><td>返回第一个元素的值</td></tr></tbody></table><h4 id="数组的其他方法"><a href="#数组的其他方法" class="headerlink" title="数组的其他方法"></a>数组的其他方法</h4><table><thead><tr><th>方法</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>.reverse()</td><td>翻转</td><td>返回翻转后的数组</td></tr><tr><td>.sort()</td><td>冒泡排序</td><td>返回升序排列的数组</td></tr><tr><td>.indexOf(elem)</td><td>待查找元素elem在数组中的第一个索引值(c从左往右查找元素elem)</td><td>若存在，返回索引号，若不存在，则返回-1</td></tr><tr><td>.lastIndexOf(elem)</td><td>在数组中最后一个elem元素的索引(相当于从右往左查找元素elem)</td><td>若存在，返回索引号，若不存在，则返回-1</td></tr><tr><td>arr1**.concat**(arr2)</td><td>连接两个或多个数组 不影响原数组</td><td>返回一个新的数组</td></tr><tr><td>slice()</td><td>数组截取slice(begin, end)，包含begin不包含end</td><td>返回被截取的新数组</td></tr><tr><td><strong>splice</strong>(index, num)</td><td>数组删除splice(从第几个开始，删除几个),从index开始删num个</td><td>返回被删除项目的新数组，原数组会改变</td></tr></tbody></table><p><strong>sort()注意事项：</strong></p><ul><li>var arr1 = [1, 6, 13, 25, 4, 2];</li></ul><p>​    var sortArr1 = arr1.sort();    返回值为：[1, 13, 2, 25, 4, 6]</p><p>​    不是直接按照数字值的大小来进行排序的，而是从左到右按照每个位置上的数字大小来进行排序</p><ul><li><p>利用sort()升序、降序排列</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">arr1.sort(function (a, b) &#123;<br>// return b - a;   // 降序排列<br>return a - b;   // 升序排列<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><p><strong>案例：数组去重</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>];</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">unrepeat</span>(<span class="hljs-params">arr</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> newArr = [];</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (newArr.<span class="hljs-title function_">indexOf</span>(arr[i]) == -<span class="hljs-number">1</span>) &#123;     <span class="hljs-comment">// 若newArr里面不含arr[i]</span></span><br><span class="language-javascript">                newArr.<span class="hljs-title function_">push</span>(arr[i]);                <span class="hljs-comment">// 则将其添加进去</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> newArr;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> newArr = <span class="hljs-title function_">unrepeat</span>(arr);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="数组转换字符串"><a href="#数组转换字符串" class="headerlink" title="数组转换字符串"></a>数组转换字符串</h4><table><thead><tr><th>方法</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>toString()</td><td>将数组转换成字符串，逗号分隔每一项</td><td>返回一个字符串</td></tr><tr><td><strong>join(‘分隔符’)</strong></td><td>将数组中的所有元素转换为一个字符串，并以给出的分隔符分隔</td><td>返回一个字符串</td></tr></tbody></table><h3 id="String-对象"><a href="#String-对象" class="headerlink" title="String()对象"></a>String()对象</h3><h4 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h4><p>即将简单数据类型包装成为复杂数据类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;pink&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">    <span class="hljs-comment">// 问题：对象有属性和方法，复杂数据类型才有属性和方法</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 为何简单数据类型string也有length属性？</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 原因就是 基本包装类型</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 将简单数据类型包装成为了复杂数据类型</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 过程如下：</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;pink&#x27;</span>);  <span class="hljs-comment">// 1. 将简单数据类型包装成为了复杂数据类型</span></span><br><span class="language-javascript">    str = temp;                     <span class="hljs-comment">// 2. 将临时变量赋给str</span></span><br><span class="language-javascript">    temp = <span class="hljs-literal">null</span>;                    <span class="hljs-comment">// 3. 销毁这个临时变量</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="字符串的不变性"><a href="#字符串的不变性" class="headerlink" title="字符串的不变性"></a>字符串的不变性</h4><p>原理：当为字符串赋予新的值时，实际值并没有改变，只是开辟了新的内存空间，将地址赋给了字符串变量。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;pink&#x27;</span>;</span><br><span class="language-javascript">    str = <span class="hljs-string">&#x27;purple&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">// &#x27;pink&#x27;不会改变，依然在内存中</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 会在内存中开辟新的空间，改变str的地址</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;</span><br><span class="language-javascript">        str += i;   <span class="hljs-comment">// 每次循环都需要开辟新的空间</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h4><h5 id="1-值查索引"><a href="#1-值查索引" class="headerlink" title="1 值查索引"></a>1 值查索引</h5><table><thead><tr><th>方法</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>.indexOf(elem[,index])</td><td>待查找元素elem在字符串中的索引值(c从左往右查找元素elem,默认从0开始查找，或者从index开始查找)</td><td>若存在，返回索引号，若不存在，则返回-1</td></tr><tr><td>.lastIndexOf(elem)</td><td>在字符串中最后一个elem元素的索引(相当于从右往左查找元素elem)</td><td>若存在，返回索引号，若不存在，则返回-1</td></tr></tbody></table><p>案例：返回字符位置和次数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 查找字符串中所有a出现的位置及次数</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> place = [];</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;abcdabcdefghea&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-keyword">while</span> (str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;a&#x27;</span>, index) != -<span class="hljs-number">1</span>) &#123;     <span class="hljs-comment">// 当str含有&#x27;a&#x27;时</span></span><br><span class="language-javascript">        place.<span class="hljs-title function_">push</span>(str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;a&#x27;</span>, index));    <span class="hljs-comment">// 将查找的位置添加到数组place中</span></span><br><span class="language-javascript">        index = str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;a&#x27;</span>, index) + <span class="hljs-number">1</span>;    <span class="hljs-comment">// 修改index的值，使其从查找位置的下一位查找</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(place);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(place.<span class="hljs-property">length</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-索引查值"><a href="#2-索引查值" class="headerlink" title="2 索引查值"></a>2 索引查值</h5><table><thead><tr><th>方法</th><th>说明</th><th></th></tr></thead><tbody><tr><td>.charAt(index)</td><td>返回指定位置的字符</td><td></td></tr><tr><td>.charCodeAt(index)</td><td>获取指定位置字符的ASCII码(<strong>后续用于判断用户按下哪个键)</strong></td><td></td></tr><tr><td>str[index]</td><td>获取指定位置处的字符</td><td></td></tr></tbody></table><p>案例：<strong>统计出现最多的字符和次数</strong></p><p>算法思想：利用charAt()遍历字符串；把每个字符都赋给对象，若对象没有属性，就为1，如果存在了就+1；</p><p>遍历对象，得到最大值和该字符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 算法思想：</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 利用charAt()遍历字符串；</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 把每个字符都赋给对象，若对象没有属性，就为1，如果存在了就+1；</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 3. 遍历对象，得到最大值和该字符</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;abcdabcdefghea&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> obj = &#123;&#125;;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ch = str.<span class="hljs-title function_">charAt</span>(i);</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (obj[ch]) &#123;</span><br><span class="language-javascript">            obj[ch]++;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            obj[ch] = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 遍历对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> max = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> ch = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> obj) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (obj[key] &gt; max) &#123;</span><br><span class="language-javascript">            max = obj[key];</span><br><span class="language-javascript">            ch = key;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(max);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ch);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-拼接与截取"><a href="#3-拼接与截取" class="headerlink" title="==3 拼接与截取=="></a>==3 拼接与截取==</h5><table><thead><tr><th>方法</th><th>说明</th><th></th></tr></thead><tbody><tr><td>.concat(str1, str2, str3..)</td><td>连接两个或多个字符串，凭借字符串，等效于+</td><td></td></tr><tr><td><strong>substr(start, length)</strong></td><td>从start开始，length取的个数</td><td></td></tr><tr><td>slice(start, end)</td><td>从start开始，截取到end位置，不包含end</td><td></td></tr><tr><td>substring(start, end)</td><td>从start开始，截取到end位置，不包含end，不接受负值</td><td></td></tr></tbody></table><p>案例：字符串拼接与截取</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;red&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str2 = <span class="hljs-string">&#x27;green&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str3 = <span class="hljs-string">&#x27;blue&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">// 连接字符串，同+</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> newstr1 = str1.<span class="hljs-title function_">concat</span>(str2, str3);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr1);   <span class="hljs-comment">// redgreenblue</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// substr截取</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> newstr2 = newstr1.<span class="hljs-title function_">substr</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr2);   <span class="hljs-comment">// dgr</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr1);   <span class="hljs-comment">// redgreenblue</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// slice截取</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> newstr3 = newstr1.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr3);   <span class="hljs-comment">// d</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr1);    <span class="hljs-comment">// redgreenblue</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> newstr3 = newstr1.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">4</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr3);   <span class="hljs-comment">// redgreen</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// substring截取</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> newstr4 = newstr1.<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr4);   <span class="hljs-comment">// d</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-替换字符"><a href="#4-替换字符" class="headerlink" title="4 替换字符"></a>4 替换字符</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>.replace(‘待替换字符’, ‘替换成的字符’)</td><td>只会替换查找到的第一个字符</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;pink&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str1 = str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str1);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="5-字符转数组"><a href="#5-字符转数组" class="headerlink" title="==5 字符转数组=="></a>==5 字符转数组==</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>.split(‘分隔符’)</td><td>将以‘分隔符’分隔的字符，转换为数组元素</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;red&amp;pink&amp;green&amp;blue&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;red|pink|green|blue&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr1 = str1.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;|&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);   <span class="hljs-comment">// [&quot;red&quot;, &quot;pink&quot;, &quot;green&quot;, &quot;blue&quot;]</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1);  <span class="hljs-comment">// [&quot;red&quot;, &quot;pink&quot;, &quot;green&quot;, &quot;blue&quot;]</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="6-大小写转换"><a href="#6-大小写转换" class="headerlink" title="6 大小写转换"></a>6 大小写转换</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>toUpperCase()</td><td>转换为大写</td></tr><tr><td>toLowerCase()</td><td>转换为小写</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;pink&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str1 = str.<span class="hljs-title function_">toUpperCase</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str1);  <span class="hljs-comment">// PINK</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str2 = str.<span class="hljs-title function_">toLowerCase</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2);  <span class="hljs-comment">// pink</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="简单类型和复杂类型"><a href="#简单类型和复杂类型" class="headerlink" title="简单类型和复杂类型"></a>简单类型和复杂类型</h1><p>简单类型又叫 基本数据类型 或者 值类型；复杂类型又叫引用类型</p><ul><li><p>值类型：简单数据类型/基本数据类型，在存储时变量中存储的是值本身</p><p>如：string number boolean undefined null</p></li><li><p>引用类型：复杂数据类型，在存储时变量中存储的是地址（引用）</p><p>通过new关键字创建的对象（系统对象、自定义对象）</p><p>如：Object Array Date</p></li></ul><h2 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h2><p>栈：由操作系统自动分配释放存放函数的参数值、局部变量的值等</p><p>​    简单数据类型存放在栈里面</p><p>堆：存储复杂类型（对象），一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收</p><p>​    复杂数据类型存放到堆里面</p><p>为了便于理解引入，但JS里面没有堆 栈的概念</p><h2 id="复杂类型内存分配"><a href="#复杂类型内存分配" class="headerlink" title="复杂类型内存分配"></a>复杂类型内存分配</h2><p>复杂数据类型（引用类型）：通过new关键字创建的对象（系统对象、自定义对象等）</p><p>引用类型<strong>变量（在栈空间中</strong>）里面存放的是地址，真正的对象实例存放在<strong>堆空间</strong>中</p><h2 id="简单类型传参"><a href="#简单类型传参" class="headerlink" title="简单类型传参"></a>简单类型传参</h2><p>函数的形参可以看作是一个变量，当把一个值类型变量作为参数传给函数的形参时，实际是把变量在栈空间里的值复制一份给形参，则在方法内部对形参做任何修改，都不会影响到外部变量</p><h2 id="复杂类型传参"><a href="#复杂类型传参" class="headerlink" title="复杂类型传参"></a>复杂类型传参</h2><p>当把<strong>引用类型变量</strong>传给形参时，其实就是把变量在栈空间里保存的<strong>堆地址复制给了形参</strong>，形参和实参其实保存的是<strong>同一个地址</strong>，所以操作的是同一个对象</p><p>注意：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 复杂类型传参</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">x</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x.<span class="hljs-property">name</span>);        <span class="hljs-comment">// 刘德华</span></span><br><span class="language-javascript">        x.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;张学友&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x.<span class="hljs-property">name</span>);        <span class="hljs-comment">// 张学友</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;刘德华&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">name</span>);            <span class="hljs-comment">// 刘德华</span></span><br><span class="language-javascript">    <span class="hljs-title function_">f1</span>(p);  <span class="hljs-comment">// 注意：p是引用型变量作为参数</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">name</span>);            <span class="hljs-comment">// 张学友</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>JS语法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Web 服务部署</title>
    <link href="/2022/09/22/Web%20%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/09/22/Web%20%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Web-服务部署"><a href="#Web-服务部署" class="headerlink" title="Web 服务部署"></a>Web 服务部署</h1><h2 id="1-购买云服务器"><a href="#1-购买云服务器" class="headerlink" title="1. 购买云服务器"></a>1. 购买云服务器</h2><h2 id="2-连接云服务器"><a href="#2-连接云服务器" class="headerlink" title="2. 连接云服务器"></a>2. 连接云服务器</h2><ul><li>XShell</li><li>Termius:</li></ul><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220922085108925.png" alt="image-20220922085108925"></p><h2 id="3-配置-HTTP-服务-宝塔"><a href="#3-配置-HTTP-服务-宝塔" class="headerlink" title="3. 配置 HTTP 服务(宝塔)"></a>3. 配置 HTTP 服务(宝塔)</h2><ol><li>安装vim</li><li>安装jdk</li><li>安装宝塔</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec<br></code></pre></td></tr></table></figure><ol start="4"><li>访问宝塔</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">180.76.155.124:11066</span>/<span class="hljs-number">68</span>c5b2da<br></code></pre></td></tr></table></figure><h1 id="4-配置宝塔"><a href="#4-配置宝塔" class="headerlink" title="4. 配置宝塔"></a>4. 配置宝塔</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WebAPI编程-常用事件</title>
    <link href="/2022/09/16/03-JS/JS%E8%AF%AD%E6%B3%95/WebAPI/WebAPI%E7%BC%96%E7%A8%8B-%E5%B8%B8%E7%94%A8%E4%BA%8B%E4%BB%B6/"/>
    <url>/2022/09/16/03-JS/JS%E8%AF%AD%E6%B3%95/WebAPI/WebAPI%E7%BC%96%E7%A8%8B-%E5%B8%B8%E7%94%A8%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><h3 id="常见鼠标事件"><a href="#常见鼠标事件" class="headerlink" title="常见鼠标事件"></a>常见鼠标事件</h3><table><thead><tr><th>鼠标事件</th><th>触发事件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h3 id="禁止鼠标右键菜单-amp-选文字"><a href="#禁止鼠标右键菜单-amp-选文字" class="headerlink" title="禁止鼠标右键菜单&amp;选文字"></a>禁止鼠标右键菜单&amp;选文字</h3><p>使用 e.preventDefault(); 来禁止</p><h4 id="禁止鼠标右键菜单"><a href="#禁止鼠标右键菜单" class="headerlink" title="禁止鼠标右键菜单"></a>禁止鼠标右键菜单</h4><p>contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</p><h4 id="禁止鼠标选文字"><a href="#禁止鼠标选文字" class="headerlink" title="禁止鼠标选文字"></a>禁止鼠标选文字</h4><p>selectstart</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    知否知否应是绿肥红瘦<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 禁止鼠标右键菜单</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;contextmenu&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            e.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 禁止鼠标选中</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;selectstart&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            e.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="==鼠标事件对象=="></a>==鼠标事件对象==</h3><p>event对象代表事件的状态，跟事件相关的一系列信息的集合，主要用的是鼠标事件对象mouseEvent和键盘事件对象KeyboardEvent</p><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td>e.clientX</td><td>返回鼠标相对于浏览器窗口可视区的X坐标</td></tr><tr><td>e.clientY</td><td>返回鼠标相对于浏览器窗口可视区的Y坐标</td></tr><tr><td>e.pageX</td><td>返回鼠标相对于文档页面的X坐标 IE9+支持</td></tr><tr><td>e.pageY</td><td>返回鼠标相对于文档页面的Y坐标 IE9+支持</td></tr><tr><td>e.screenX</td><td>返回鼠标相对于电脑屏幕的X坐标</td></tr><tr><td>e.screenY</td><td>返回鼠标相对于电脑屏幕的Y坐标</td></tr></tbody></table><p>案例-跟随鼠标移动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/鼠标.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 在页面中移动，则需要给document注册事件</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(e);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 给img设置绝对定位，设置left和top</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 一定要注意：left和top需要单位px</span></span><br><span class="language-javascript">            img.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = e.<span class="hljs-property">clientX</span> - <span class="hljs-number">16</span> + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">            img.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = e.<span class="hljs-property">clientY</span> - <span class="hljs-number">16</span> + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>给img设置绝对定位，设置left等于鼠标的x和top等于鼠标的y</li><li>一定要注意：left和top需要单位px</li></ul><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><h3 id="常见键盘事件"><a href="#常见键盘事件" class="headerlink" title="常见键盘事件"></a>常见键盘事件</h3><table><thead><tr><th>键盘事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onkeyup/keyup</td><td>某个键盘按键被松开时触发(不区分大小写（a A 都是A的ASCII：65），能识别任何键)</td></tr><tr><td>onkeydown/keydown</td><td>某个键盘按键被按下时触发(不区分大小写（a A 都是A的ASCII：65），能识别任何键)</td></tr><tr><td>onkeypress/keypress</td><td>某个键盘按键被按下时触发 (区分大小写，不能识别功能键,如：ctrl shift 箭头 等)</td></tr><tr><td>e.keyCode</td><td>获得相应键的ASCII码值</td></tr></tbody></table><p>三个事件的执行顺序：</p><p>keydown $\longrightarrow$  keypress $\longrightarrow$ keyup</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;弹起&#x27;</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;按下任何键&#x27;</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;按下非功能键&#x27;</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>addEventListener 不需要加 on</li></ul><h3 id="键盘事件对象keyCode"><a href="#键盘事件对象keyCode" class="headerlink" title="键盘事件对象keyCode"></a>键盘事件对象keyCode</h3><table><thead><tr><th>键盘事件对象</th><th>说明</th></tr></thead><tbody><tr><td>e.keyCode</td><td>获得相应键的ASCII码值</td></tr></tbody></table><p>键盘事件中的<strong>keyCode属性</strong>可以得到相应键的ASCII码值</p><ul><li>keyup和keydown不区分大小写（a A 都是A的ASCII：65），能识别任何键</li><li>keypress 区分大小写，不能识别功能键</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// keyup 不区分大小写 a A 都是A的ASCII：65</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;up:&#x27;</span> + e.<span class="hljs-property">keyCode</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-comment">// keydown 不区分大小写 a A 都是A的ASCII：65</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;down:&#x27;</span> + e.<span class="hljs-property">keyCode</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-comment">// keypress 区分大小写 </span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;press:&#x27;</span> + e.<span class="hljs-property">keyCode</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="案例-按键定位搜索框"><a href="#案例-按键定位搜索框" class="headerlink" title="案例-按键定位搜索框"></a>案例-按键定位搜索框</h3><h4 id="搜索框获得焦点：focus-方法"><a href="#搜索框获得焦点：focus-方法" class="headerlink" title="搜索框获得焦点：focus()方法"></a>搜索框获得焦点：focus()方法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 此处使用的keyup，按下s是为了获得光标，因此s不能输入到input中</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">keyCode</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (e.<span class="hljs-property">keyCode</span> === <span class="hljs-number">83</span>) &#123;</span><br><span class="language-javascript">                input.<span class="hljs-title function_">focus</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：此处使用的keyup，按下s是为了获得光标，因此s不能输入到input中</p></blockquote><h4 id="案例-京东快递单号搜索"><a href="#案例-京东快递单号搜索" class="headerlink" title="案例-京东快递单号搜索"></a>案例-京东快递单号搜索</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>案例-京东快递单号查询<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eee</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.fdj</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">3px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 利用的是伪元素来创建的小三角 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.fdj</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">8px</span> solid transparent;</span><br><span class="language-css">            <span class="hljs-attribute">border-top-color</span>: pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fdj&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> fdj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.fdj&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 此处使用的keyup，按下s是为了获得光标，因此s不能输入到input中</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">keyCode</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (e.<span class="hljs-property">keyCode</span> === <span class="hljs-number">83</span>) &#123;</span><br><span class="language-javascript">                input.<span class="hljs-title function_">focus</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// input中有内容时，显示fdj，没有内容时隐藏</span></span><br><span class="language-javascript">        input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 利用this.value将输入的值赋给fdj</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>) &#123;</span><br><span class="language-javascript">                fdj.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">                fdj.<span class="hljs-property">innerHTML</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                fdj.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// input里有内容，但失去焦点，也需要隐藏</span></span><br><span class="language-javascript">        input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;blur&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            fdj.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// input里有内容，且获得焦点，也需要显示</span></span><br><span class="language-javascript">        input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>) &#123;</span><br><span class="language-javascript">                fdj.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                fdj.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>JS语法</category>
      
      <category>WebAPI</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>错误与问题记录</title>
    <link href="/2022/09/12/%E9%94%99%E8%AF%AF%E4%B8%8E%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/09/12/%E9%94%99%E8%AF%AF%E4%B8%8E%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><h3 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h3><p>vue.runtime.esm.js?c320:619 [Vue warn]: Unknown custom element: <article-info> - did you register the component correctly? For recursive components, make sure to provide the “name” option.</p><p>found in</p><p>—&gt; <Home><br>       <App> at src/App.vue<br>         <Root></p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/错误记录/image-20220621102741700.png" alt="image-20220621102741700" style="zoom:80%;" /><p>解决：提示是否正确注册组件，错误原因，注册时components写成了component，没加s</p><h3 id="错误2"><a href="#错误2" class="headerlink" title="错误2."></a>错误2.</h3><p>编译出错：’v-model’ directives require no argument.eslint<a href="https://eslint.vuejs.org/rules/no-v-model-argument.html">vue/no-v-model-argument</a></p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/错误记录/image-20220621114357804.png" alt="image-20220621114357804" style="zoom:67%;" /><h3 id="错误3"><a href="#错误3" class="headerlink" title="错误3."></a>错误3.</h3><p>Already included file name ‘c:/Users/余萍萍/Desktop/学习/前端/前端基础代码/07 Vue案例/魔方/magic-cube/src/components/Cube.vue’ differs from file name ‘c:/Users/余萍萍/Desktop/学习/前端/前端基础代码/07 Vue案例/魔方/magic-cube/src/components/cube.vue’ only in casing.Vetur(1261)</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%94%99%E8%AF%AF%E4%B8%8E%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220624144659927.png" alt="image-20220624144659927"></p><p>错误<strong>原因：</strong>创建文件时，开始创建的文件名是小写开头的，后面又改成大写开头的。缓存的判重逻辑是不区分大小写导致的。在这种情况下，vscode缓存中放的是cube.vue，改了大小写后，vscode试图把Cube.vue文件放进缓存是，判别到重复了，就会提示错误</p><p>解决方法：</p><ol><li><p>导入时。去掉vue的后缀名</p><p>`import Cube from ‘./components/Cube</p></li><li><p>将大小写改回原来的</p></li><li><p>改成别的文件名</p></li><li><p>先改成别的文件名，然后重启Vscode，再改为原来的想改的名字</p></li></ol><h3 id="错误4"><a href="#错误4" class="headerlink" title="错误4"></a>错误4</h3><p>报错：Component name “Index” should always be multi-word.</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%94%99%E8%AF%AF%E4%B8%8E%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220819104738431.png" alt="image-20220819104738431"></p><p>解决：</p><ol><li><p>方法一：修改文件名称</p><p>如：将 index.js 改为 HomeIndex.js</p></li><li><p>方法二（网上方法不起作用）：将vue.config.js文件中的语法检查关闭，添加：lintOnSave: false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,<br>+  <span class="hljs-attr">lintOnSave</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 关闭语法检查</span><br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>方法三：修改eslint规则</p><p>在 eslintrc.js 文件中，添加 </p><p><code>&#39;vue/multi-word-component-names&#39;: [&#39;error&#39;, &#123; ignores: [&#39;index&#39;, &#39;Layout&#39;] &#125;]</code></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%94%99%E8%AF%AF%E4%B8%8E%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220819144403924.png" alt="image-20220819144403924"></p><p>ignores数组里面填写需要 忽略组件名称格式检查 的组件名</p></li></ol><h3 id="错误5"><a href="#错误5" class="headerlink" title="错误5"></a>错误5</h3><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/%E9%94%99%E8%AF%AF%E4%B8%8E%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20220904163700801.png" alt="image-20220904163700801"></p><p>import thenFs from ‘then-fs’;<br>^^^^^^</p><p>SyntaxError: Cannot use import statement outside a module</p><p>解决：</p><p>不使用import，改用require</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> thenFs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;then-fs&#x27;</span>;<br><br><span class="hljs-comment">// 改为</span><br>thenFs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;then-fs&#x27;</span>);<br></code></pre></td></tr></table></figure><p>错误6</p><p><img src="../../../%E5%B7%A5%E4%BD%9C/upload/image-20220917203637224.png" alt="image-20220917203637224"></p><p>在jsconfig.json中添加 <code>&quot;jsx&quot;:&quot;preserve&quot;</code>，如下所示</p><p><img src="../../../%E5%B7%A5%E4%BD%9C/upload/image-20220917203817832.png" alt="image-20220917203817832"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>问题1：解决vscode显示不了vue图标</p><p>解决：</p><ol><li>打开vscode设置页面</li><li>在搜索框中输入files.associations</li><li>在添加项处将*.vue的值设置成vue</li></ol><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/错误与问题记录/image-20220609160737995.png" alt="image-20220609160737995" style="zoom:70%;" />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>字符串</title>
    <link href="/2022/09/12/03-JS/JS%E8%AF%AD%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2022/09/12/03-JS/JS%E8%AF%AD%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<p>字符串方法</p><p><code>.charAt</code> 用于接收索引值，表示从字符串中把索引对应的字符，获取出来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">str.charAt(0)// 获取str的第0个字符<br></code></pre></td></tr></table></figure><p><code>.toUpperCase</code></p><p><code>.slice</code></p>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>JS语法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>VUE3基础</title>
    <link href="/2022/09/12/04-VUE/VUE3%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/09/12/04-VUE/VUE3%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><h2 id="组件间的数据共享"><a href="#组件间的数据共享" class="headerlink" title="组件间的数据共享"></a>组件间的数据共享</h2><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><p>父组件通过 v-bind 属性绑定向子组件共享数据。同时，子组件需要使用 props 接收数据（同vue2）</p><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><p>子组件通过自定义事件的方式向父组件共享数据（同vue2）</p><h3 id="父子双向"><a href="#父子双向" class="headerlink" title="父子双向"></a>父子双向</h3><p>父组件在使用子组件期间，可以使用 v-model 指令维护组件内外数据的双向同步</p><p>父组件App</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;Son v-model:number = &quot;count&quot;&gt;&lt;/Son&gt;<br></code></pre></td></tr></table></figure><p>子组件Son</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default = &#123;<br>    name: &#x27;Son&#x27;,<br>    props: &#123;<br>        number: &#123;<br>            type: Number,<br>            default: 0<br>        &#125;<br>    &#125;,<br>    emits: [&#x27;update: number&#x27;],<br>    setup(props, &#123;emit&#125;) &#123;<br>        const change = () =&gt; &#123;<br>            emit(&quot;changeNum&quot;, props.number++)<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h3 id="兄弟之间"><a href="#兄弟之间" class="headerlink" title="兄弟之间"></a>兄弟之间</h3><h3 id="父与后代-依赖注入"><a href="#父与后代-依赖注入" class="headerlink" title="父与后代-依赖注入"></a>父与后代-依赖注入</h3><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 第一层回调</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;延时1s后输出&#x27;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 第二层回调</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;延时2s后输出&#x27;</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 第三层回调</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;延时3s后输出&#x27;</span>);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;, <span class="hljs-number">2000</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p>回调地狱的缺点：</p><ul><li>代码耦合性太强，牵一发而动全身，难以维护</li><li>大量冗余的代码相互嵌套，代码的可读性变差</li></ul><p>如何解决回调地狱？</p><blockquote><p>为了解决回调地狱的问题，ES6（ECMAScript 2015）中新增了 Promise 的概念</p></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Promise 是一个构造函数</p><ul><li><p>我们可以创建 Promise 的实例 </p><blockquote><p>const p = new Promise()</p></blockquote></li><li><p>new 出来的 Promise 实例对象，代表一个<strong>异步操作</strong> </p></li></ul><h3 id="then方法"><a href="#then方法" class="headerlink" title=".then方法"></a>.then方法</h3><p>Promise.prototype 上包含一个 .then() 方法</p><ul><li><p>每一次 new Promise() 构造函数得到的实例对象都可以通过原型链的方式访问到 .then() 方法，例如 </p><blockquote><p>const p = new Promise()</p><p>p.then() </p></blockquote></li></ul><p><strong>.then()</strong> 方法用来<strong>预先</strong>指定成功和失败的回调函数</p><ul><li>p.then(成功的回调函数，失败的回调函数)</li><li>p.then(result =&gt; { }, error =&gt; { })</li><li>调用 .then() 方法时，<strong>成功的回调函数是必选的</strong>、失败的回调函数是可选的</li></ul><h4 id="then-方法的特性"><a href="#then-方法的特性" class="headerlink" title=".then()方法的特性"></a>.then()方法的特性</h4><p>如果上一个 .then() 方法中返回了一个新的 Promise 实例对象，则可以通过下一个 .then() 继续进行处理。通 过 .then() 方法的链式调用，就解决了回调地狱的问题</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="基于回调函数按顺序读取文件内容"><a href="#基于回调函数按顺序读取文件内容" class="headerlink" title="基于回调函数按顺序读取文件内容"></a>基于<strong>回调函数</strong>按顺序读取文件内容</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err1, res1</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err1) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err1.<span class="hljs-property">message</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res1);<br>  fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/2.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err2, res2</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err2) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err2.<span class="hljs-property">message</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res2);<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/3.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err3, res3</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err3) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err3.<span class="hljs-property">message</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res3);<br>    &#125;);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>node.js 官方提供的 fs 模块仅支持以回调函数的方式读取文件，不支持 Promise 的调用方式。因此，需 要先运行如下的命令，安装 then-fs 这个第三方包，从而支持我们基于 Promise 的方式读取文件的内容</p><p>安装then-fs：</p><blockquote><p>npm install then-fs</p></blockquote><h5 id="基于-then-fs-读取文件内容"><a href="#基于-then-fs-读取文件内容" class="headerlink" title="基于 then-fs 读取文件内容"></a>基于 <strong>then-fs</strong> 读取文件内容</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">thenFs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;then-fs&#x27;</span>);<br><br>thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>).<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">res1</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res1);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">err1</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err1.<span class="hljs-property">message</span>);<br>  &#125;<br>);<br><br>thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/2.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>).<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">res2</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res2);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">err2</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err2.<span class="hljs-property">message</span>);<br>  &#125;<br>);<br><br>thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/3.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>).<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">res3</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res3);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">err3</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err3.<span class="hljs-property">message</span>);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>执行结果无法保证文件读取的顺序</p><p>利用then方法的特性：上一个then方法返回了一个新的 Promise 实例对象，则可以通过下一个 .then() 继续进行处理</p><h5 id="基于-Promise-按顺序读取文件的内容"><a href="#基于-Promise-按顺序读取文件的内容" class="headerlink" title="基于 Promise 按顺序读取文件的内容"></a>基于 <strong>Promise</strong> 按顺序读取文件的内容</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> thenFs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;then-fs&#x27;</span>);<br>thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res1</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 读取成功</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res1);<br>    <span class="hljs-comment">// 返回的是一个Promise实例对象</span><br>    <span class="hljs-keyword">return</span> thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/2.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res2</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res2);<br>    <span class="hljs-keyword">return</span> thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/3.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res3</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res3);<br>  &#125;);<br></code></pre></td></tr></table></figure><h3 id="catch方法"><a href="#catch方法" class="headerlink" title=".catch方法"></a>.catch方法</h3><p>在 Promise 的链式操作中如果发生了错误，可以使用 Promise.prototype.catch 方法进行捕获和处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> thenFs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;then-fs&#x27;</span>);<br>thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/11.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>)<br>  <span class="hljs-comment">// 此处的文件11.txt不存在，可以捕获到错误</span><br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res1</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res1);<br>    <span class="hljs-keyword">return</span> thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/2.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res2</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res2);<br>    <span class="hljs-keyword">return</span> thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/3.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res3</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res3);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取文件出错：&#x27;</span>, err.<span class="hljs-property">message</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><ul><li>catch放在最后，一旦出现错误会导致后续无法执行</li></ul><p>如果不希望前面的错误导致后续的 .then 无法正常执行，则可以将 .catch 的调用提前</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> thenFs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;then-fs&#x27;</span>);<br>thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/11.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>)<br>  <span class="hljs-comment">// 此处的文件11.txt不存在，可以捕获到错误</span><br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 捕获发生的错误，并输出错误信息</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取文件出错：&#x27;</span>, err.<span class="hljs-property">message</span>);<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res1</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 读取成功</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res1);<br>    <span class="hljs-comment">// 返回的是一个Promise实例对象</span><br>    <span class="hljs-keyword">return</span> thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/2.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res2</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res2);<br>    <span class="hljs-keyword">return</span> thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/3.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res3</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res3);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>![image-20220904170022647](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE3基础/image-20220904170022647.png)</p><p>第一个文件出错不会影响下面的执行结果</p><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><p>Promise.all() 方法会发起并行的 Promise 异步操作，等所有的异步操作全部结束后才会执行下一步的 .then 操作（等待机制）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> thenFs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;then-fs&#x27;</span>);<br><br><span class="hljs-comment">// 1. 定义一个数组，存放3个读文件的异步操作</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PromiseArr</span> = [<br>  thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>),<br>  thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/2.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>),<br>  thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/3.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>)<br>];<br><br><span class="hljs-comment">// 2. 将Promise的数组，作为Promise.all()的参数</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(<span class="hljs-title class_">PromiseArr</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">[res1, res2, res3]</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 2.1 所有文件读取成功（等待机制）</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res1, res2, res3);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 2.2 捕获Promise异步操作中的错误</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>);<br>  &#125;);<br><br></code></pre></td></tr></table></figure><blockquote><p>注意：数组中 Promise 实例的顺序， 就是最终结果的顺序！</p><p>即PromiseArr里面的Promise实例顺序与 Promise.all()中读取成功后的文件顺序一致</p></blockquote><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h3><p>Promise.race() 方法会发起并行的 Promise 异步操作，只要任何一个异步操作完成，就立即执行下一步的 .then 操作（赛跑机制）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> thenFs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;then-fs&#x27;</span>);<br><span class="hljs-comment">// 1. 定义一个数组，存放3个读文件的异步操作</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PromiseArr</span> = [<br>  thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>),<br>  thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/2.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>),<br>  thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/3.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>)<br>];<br><br><span class="hljs-comment">// 2. 将Promise的数组，作为Promise.race()的参数</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>(<span class="hljs-title class_">PromiseArr</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 2.1 只要有一个异步操作完成，就立即执行回调函数（赛跑机制）</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 2.2 捕获Promise异步操作中的错误</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>);<br>  &#125;);<br><br></code></pre></td></tr></table></figure><h3 id="基于-Promise-封装读文件"><a href="#基于-Promise-封装读文件" class="headerlink" title="基于 Promise 封装读文件"></a>基于 Promise 封装读文件</h3><p>第一步：方法返回的是一个Promise实例对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 方法的返回值是 Promise 实例对象</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>new Promise()只是形式上的异步操作</li></ul><p>第二步：在 new Promise() 构造函数期间，传递一个 function 函数，将具体的异步操作定义到 function 函数内部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFile</span>(<span class="hljs-params">fpath</span>) &#123;<br>  <span class="hljs-comment">// 方法的返回值是 Promise 实例对象</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 下面这行代码表示这是一个具体的、读文件的异步操作</span><br>    fs.<span class="hljs-title function_">readFile</span>(fpath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, res</span>) =&gt;</span> &#123;&#125;)<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>第三步：文件读取有成功和失败两种情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFile</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 方法的返回值是 Promise 实例对象</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 下面这行代码表示这是一个具体的、读文件的异步操作</span><br>    fs.<span class="hljs-title function_">readFile</span>(fpath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, res</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 读取失败时</span><br>      <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>);<br>      <span class="hljs-comment">// 读取成功时</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>    &#125;);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>第四步：Promise实例对象的then方法有两个实参（成功和失败的回调函数），需要在创建Promise实例对象时，定义两个形参用于接收</p><ul><li>形参resolve：调用getFiles()方法时，通过 .then 指定的“成功时”的回调函数</li><li>形参reject：调用getFiles()方法时，通过 .then 指定的“失败时”的回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFile</span>(<span class="hljs-params">fpath</span>) &#123;<br>  <span class="hljs-comment">// 方法的返回值是 Promise 实例对象</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 下面这行代码表示这是一个具体的、读文件的异步操作</span><br>    fs.<span class="hljs-title function_">readFile</span>(fpath, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, res</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 读取失败时</span><br>      <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(err);<br>      <span class="hljs-comment">// 读取成功时</span><br>      <span class="hljs-title function_">resolve</span>(res);<br>    &#125;);<br>  &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如下所示：</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07 VUE3基础/image-20220904180319921.png" alt="image-20220904180319921" style="zoom:67%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 调用getFile</span><br><span class="hljs-title function_">getFile</span>(<span class="hljs-string">&#x27;./files/11.txt&#x27;</span>).<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>);<br>  &#125;<br>);<br><br><span class="hljs-comment">// 或</span><br><span class="hljs-title function_">getFile</span>(<span class="hljs-string">&#x27;./files/11.txt&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取文件失败：&#x27;</span>, err.<span class="hljs-property">message</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><h2 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h2><ul><li><p>如果在 function 中使用了 await，则 function 必须被 async 修饰</p></li><li><p>在 async 方法中，第一个 await <strong>之前</strong>的代码会同步执行，await <strong>之后</strong>的代码会异步执行</p><blockquote><p>注意：是await之后的所有代码都会被异步执行</p></blockquote></li></ul><h2 id="EventLoop（Vue2有学习）"><a href="#EventLoop（Vue2有学习）" class="headerlink" title="EventLoop（Vue2有学习）"></a>EventLoop（Vue2有学习）</h2><h3 id="同步异步（Vue2有学习）"><a href="#同步异步（Vue2有学习）" class="headerlink" title="同步异步（Vue2有学习）"></a>同步异步（Vue2有学习）</h3>]]></content>
    
    
    <categories>
      
      <category>04-VUE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>VUE2基础</title>
    <link href="/2022/09/12/04-VUE/VUE2%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/09/12/04-VUE/VUE2%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="VUE2"><a href="#VUE2" class="headerlink" title="VUE2"></a>VUE2</h1><h2 id="Vue-基础"><a href="#Vue-基础" class="headerlink" title="Vue 基础"></a>Vue 基础</h2><h3 id="初识-vue"><a href="#初识-vue" class="headerlink" title="初识 vue"></a>初识 vue</h3><h4 id="vue-的特性"><a href="#vue-的特性" class="headerlink" title="vue 的特性"></a>vue 的特性</h4><ol><li>数据驱动视图<ul><li>vue 会监听数据的变化，从而自动重新渲染页面的结构</li><li>数据驱动视图是 单向 的数据绑定</li></ul></li><li>双向数据绑定<ul><li>可以辅助开发者在不操作 DOM 的前提下，自动把用户填写的内容同步到数据源中</li><li>优点：开发者不需要手动操作 DOM 元素，来获取表单元素最新的值</li></ul></li></ol><h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><p>MVVM —— Model、View、ViewModel</p><p>是 vue 实现数据驱动视图和双向数据绑定的核心原理。它将每个 HTML 页面都拆分为了这三个部分。</p><ul><li><p>Model：表示当前页面渲染时所依赖的数据源</p></li><li><p>View：表示当前页面所渲染的 DOM 结构</p></li><li><p>ViewModel：表示 vue 实例，是 MVVM 的核心（扮演中介的角色，将 数据源 Model 和 页面的结构 View 联系到一起）</p><ul><li><p>当数据源发生变化时，会被 ViewModel 监听到，VM 会根据最新的数据源自动更新页面的结构</p></li><li><p>当表单元素的值发生变化时，也会被 ViewModel 监听到，VM 会把变化过后最新的值自动同步到 Model 数据源中</p></li></ul></li></ul><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220513154305607.png" alt="image-20220513154305607" style="zoom:80%;" /><h4 id="vue-基本使用"><a href="#vue-基本使用" class="headerlink" title="vue 基本使用"></a>vue 基本使用</h4><p>1、引入 vue.js 文件</p><p>2、提供标签用于填充数据</p><p>3、使用 vue 的语法写功能</p><p>4、将 vue 提供的数据填充到标签里面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 2 希望vue能够控制这个div，将数据填充到div内部 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 4 将vue提供的数据填充到标签里面 利用的是插值表达式 &#123;&#123;&#125;&#125;--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>&#123;&#123;username&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 1 导入vue 的库文件，在window全局就有了vue这个构造函数 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 3 创建vue实例对象 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 3.1 指定当前vm实例要控制页面的哪个区域</span></span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, <span class="hljs-comment">// el属性时固定写法</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 3.2 data对象就是要渲染到页面上的数据</span></span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;zs&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="el-和-data-的两种写法"><a href="#el-和-data-的两种写法" class="headerlink" title="el 和 data 的两种写法"></a>el 和 data 的两种写法</h4><ul><li><p>el</p><ul><li>new Vue() 的时候配置 el 属性</li><li>先创建 Vue 实例，随后再通过 vm.$mount(‘#root’)指定 el 的值</li></ul></li><li><p>data 的两种写法：</p><ul><li><p>对象式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: [];<br></code></pre></td></tr></table></figure></li><li><p>函数式（组件中必须使用函数式）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>示例：</p><ol><li>el 和 data 的第一种写法：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 1 引入Vue --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 2 准备一个容器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好! &#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 3 创建实例对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ypp&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>el 的第二种写法：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 3 创建实例对象</span><br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ypp&#x27;</span><br>  &#125;<br>&#125;);<br>vm.$mount(<span class="hljs-string">&#x27;#root&#x27;</span>); <span class="hljs-comment">// 这种写法可能更加灵活</span><br><br><span class="hljs-comment">// 如下所示</span><br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ypp&#x27;</span><br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// DOM准备好了、数据也准备好了。可以等待一段时间后，再渲染</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  vm.$mount(<span class="hljs-string">&#x27;#root&#x27;</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li>data 的第二种写法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 3 创建实例对象</span><br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,<br>  <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// this指向vue（Vue会自自动调用data里面的函数）</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ypp&#x27;</span>;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p><strong>特别注意</strong></p><p>data 后面的函数不能写成箭头函数，因为 箭头函数不改变 this 的指向，this 指向是上一级作用域的指向，j 就不是 Vue 实例了</p><p>但可以写成下面的形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<span class="hljs-comment">// this指向vue（Vue会自自动调用data里面的函数）</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ypp&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="vue-的调用工具"><a href="#vue-的调用工具" class="headerlink" title="vue 的调用工具"></a>vue 的调用工具</h4><ol><li><p>Chrome 浏览器安装 vue-dectools</p><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd">https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd</a></p></li><li><p>配置：</p><p>点击 Chrome 浏览器右上角的 “┇” 按钮，选择更多工具 -&gt; 扩展程序 -&gt; Vue.js devtools 详细信息，并勾选：“在所有网站上” 和 “允许访问文件网址”。</p><p>配置完后，重启浏览器即可生效</p></li><li><p>在浏览器中访问一个使用了 vue 的页面，打开浏览器的开发者工具，切换到 Vue 面板，即可使用 vue-devtools 调试当前的页面</p></li></ol><h3 id="vue-指令与过滤器"><a href="#vue-指令与过滤器" class="headerlink" title="vue 指令与过滤器"></a>vue 指令与过滤器</h3><h4 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h4><ol><li>v-text<ul><li>会覆盖元素内默认的值</li><li>不存在闪动</li><li>只能渲染纯文本内容</li></ul></li><li><code>&#123;&#123; &#125;&#125;</code><ul><li>插值表达式，专用于解决 v-text 会覆盖默认文本内容的问题</li><li>存在闪动问题</li><li>只能渲染纯文本内容</li></ul></li><li>v-html<ul><li>会覆盖元素内默认的值</li><li>存在闪动问题</li><li>可以解析 HTML</li></ul></li></ol><p>补充：</p><ul><li><p>v-pre</p><p>显示原始信息，跳过编译过程（直接将内容显示出来，不编译）</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 2 希望vue能够控制这个div，将数据填充到div内部 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 习惯用id为app的div将需要控制的区域包装起来 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 4 将vue提供的数据填充到标签里面 利用的是插值表达式 &#123;&#123;&#125;&#125;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; info &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-pre</span>&gt;</span>info是&#123;&#123;info&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 1 导入vue 的库文件，在window全局就有了vue这个构造函数 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 3 创建vue实例对象 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 3.1 指定当前vm实例要控制页面的哪个区域</span></span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, <span class="hljs-comment">// el属性时固定写法</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 3.2 data对象就是要渲染到页面上的数据</span></span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;男&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">info</span>: <span class="hljs-string">&#x27;&lt;h3 style=&quot;color:red&quot;&gt;hello~vue!&lt;/h3&gt;&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07 VUE2基础/image-20220807162541140.png" alt="image-20220807162541140" style="zoom:67%; border-left: 5px solid green" /><h5 id="解决闪动"><a href="#解决闪动" class="headerlink" title="解决闪动"></a>解决闪动</h5><p>解决闪动：利用 v-cloak</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-comment">/* 解决闪动：利用v-cloak</span></span><br><span class="hljs-comment"><span class="language-css">    v-cloak指令的用法</span></span><br><span class="hljs-comment"><span class="language-css">    1、提供样式[v-cloak]</span></span><br><span class="hljs-comment"><span class="language-css">    */</span></span><br><span class="language-css">  <span class="hljs-selector-attr">[v-cloak]</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 2、在插值表达式所在标签中添加v-cloak指令 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-cloak</span>&gt;</span>&#123;&#123;1 + 2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-cloak</span>&gt;</span>&#123;&#123;msg + &#x27;----&#x27; + 123&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;Hello Vue&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h4><p><code>v-bind</code>，简写为 <code>:</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 属性绑定 v-bind --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-bind:placeholder</span>=<span class="hljs-string">&quot;tips&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;tips&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- v-bind： 可以简写为 ： --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">&quot;imgsrc&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 150px&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgsrc&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 150px&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; number + 1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; number &gt; 1 ? &#x27;YES&#x27;:&#x27;No&#x27; &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">tips</span>: <span class="hljs-string">&#x27;请输入用户名&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">imgsrc</span>: <span class="hljs-string">&#x27;https://cdn.py2fun.com/course_edu/course/img/5632924432990208_1.png&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">number</span>: <span class="hljs-number">1</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a>事件绑定指令</h4><p><code>v-on</code> 简写为 <code>@</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 2 希望vue能够控制这个div，将数据填充到div内部 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>count 的值是 &#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 在绑定事件处理函数的时候，可以使用 () 传递参数 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;button v-on:click=&quot;add(1)&quot;&gt;+1&lt;/button&gt; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 可将 v-on: 简写为 @ --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add(1)&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;sub&quot;</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 1 导入vue 的库文件，在window全局就有了vue这个构造函数 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 3 创建vue实例对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// methods定义事件的处理函数</span></span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// addCount: function () &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     this.count++</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 简洁写法:</span></span><br><span class="language-javascript">        <span class="hljs-title function_">add</span>(<span class="hljs-params">n</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// console.log(vm);</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> += n;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">sub</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> += <span class="hljs-number">1</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="事件参数对象"><a href="#事件参数对象" class="headerlink" title="==事件参数对象=="></a>==事件参数对象==</h4><h5 id="event"><a href="#event" class="headerlink" title="$event"></a>$event</h5><ul><li>当使用 add 方法时，不传参数时，这里的 e 就是事件 event，就有事件的一系列属性和方法</li><li>但当使用 add 方法，并向 add 传递参数，如 add(1),那么<strong>event 就会被覆盖掉</strong>，就没有事件的方法和属性</li></ul><blockquote><p>问题：因此如何做到传参和访问事件？</p></blockquote><p>由于 vue 提供了内置变量，<code>$event</code>就是原生 DOM 的事件对象，通过向函数传递<code>$event</code>, 就可以在函数内部获取事件</p><blockquote><p>事件注册时：@click=”add(2, $event)”</p><p>定义事件时：add(n, e) { // xxx }</p><p>通过 e.target 就可以获取触发事件的对象，从而可以进行一系列操作，如修改 css 样式等</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 2 希望vue能够控制这个div，将数据填充到div内部 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>count 的值是 &#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 此处$event 就是原生DOM的事件对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add(2, $event)&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;sub&quot;</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 1 导入vue 的库文件，在window全局就有了vue这个构造函数 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 3 创建vue实例对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// methods定义事件的处理函数</span></span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">add</span>(<span class="hljs-params">n, e</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 这里的e就是事件event，就有事件的一系列属性和方法</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> += n;</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 当 count 为偶数时，按钮背景为red</span></span><br><span class="language-javascript">            e.<span class="hljs-property">target</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;orange&#x27;</span>;</span><br><span class="language-javascript">          &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 否则，按钮背景为 pink</span></span><br><span class="language-javascript">            e.<span class="hljs-property">target</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;pink&#x27;</span>;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">sub</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> += <span class="hljs-number">1</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="==事件修饰符=="></a>==事件修饰符==</h4><table><thead><tr><th>事件修饰符</th><th>说明</th></tr></thead><tbody><tr><td>.prevent</td><td>阻止默认行为</td></tr><tr><td>.stop</td><td>阻止事件冒泡</td></tr><tr><td>.capture</td><td>以捕获模式触发当前事件处理函数</td></tr><tr><td>.once</td><td>绑定的事件只触发一次</td></tr><tr><td>.self</td><td>只有在 event.target 是当前元素自身时触发事件处理函数</td></tr></tbody></table><h5 id="prevent"><a href="#prevent" class="headerlink" title=".prevent"></a>.prevent</h5><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 2 希望vue能够控制这个div，将数据填充到div内部 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- @click绑定事件，@click.prevent-事件修饰符 绑定事件并阻止默认行为 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 1 导入vue 的库文件，在window全局就有了vue这个构造函数 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 3 创建vue实例对象 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 3.1 指定当前vm实例要控制页面的哪个区域</span></span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, <span class="hljs-comment">// el属性时固定写法</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 3.2 data对象就是要渲染到页面上的数据</span></span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">show</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// e.preventDefault()   // 不用这种方法，直接用事件修饰符</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击了a链接&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="stop"><a href="#stop" class="headerlink" title=".stop"></a>.stop</h5><h5 id="stop-prevent-串联写法"><a href="#stop-prevent-串联写法" class="headerlink" title=".stop.prevent 串联写法"></a>.stop.prevent 串联写法</h5><h5 id="capture"><a href="#capture" class="headerlink" title=".capture"></a>.capture</h5><h5 id="once"><a href="#once" class="headerlink" title=".once"></a>.once</h5><h5 id="self"><a href="#self" class="headerlink" title=".self"></a>.self</h5><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="==按键修饰符=="></a>==按键修饰符==</h4><p>在监听键盘事件时，需要经常判断详细的按键，可以为键盘相关事件提娜佳按键修饰符</p><p>@keyup</p><p>@keudown</p><h5 id="常见按键修饰符"><a href="#常见按键修饰符" class="headerlink" title="常见按键修饰符"></a>常见按键修饰符</h5><p>.enter</p><p>.delete</p><p>.esc</p><blockquote><p>按键修饰符的使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 希望 Vue 能够控制下面的这个 div，帮我们在把数据填充到 div 内部 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.esc</span>=<span class="hljs-string">&quot;clearInput&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;commitAjax&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 1. 导入 Vue 的库文件，在 window 全局就有了 Vue 这个构造函数 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 2. 创建 Vue 的实例对象 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 创建 Vue 的实例对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// el 属性是固定的写法，表示当前 vm 实例要控制页面上的哪个区域，接收的值是一个选择器</span></span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-comment">// data 对象就是要渲染到页面上的数据</span></span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">clearInput</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;触发了 clearInput 方法&#x27;</span>);</span><br><span class="language-javascript">          e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">commitAjax</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;触发了 commitAjax 方法&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>通过下面的方法，可以获取按键的 ASCII 码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 在表单里面键入任何值时，触发事件handle --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup</span>=<span class="hljs-string">&quot;handle&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">handle</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 显示按键的ASCII码</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">keyCode</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="自定义修饰符"><a href="#自定义修饰符" class="headerlink" title="自定义修饰符"></a>自定义修饰符</h5><p>方式 1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 在keyup后面可以添加自定义的按键 以ASCII码的形式 下面65代表a，只有在按下a时，才会触发事件handle--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.65</span>=<span class="hljs-string">&quot;handle&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">handle</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 显示按键的ASCII码</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">keyCode</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式 2: 全局 config.keyCodes 对象</p><blockquote><p>Vue.config.keyCodes.a1 = 65</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- v-on:keyup.a1实际就是按下a键时触发handle --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.a1</span>=<span class="hljs-string">&quot;handle&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 65代表a</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">keyCodes</span>.<span class="hljs-property">a1</span> = <span class="hljs-number">65</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">handle</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 显示按键的ASCII码</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">keyCode</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="双向绑定指令"><a href="#双向绑定指令" class="headerlink" title="双向绑定指令"></a>双向绑定指令</h4><h5 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 希望 Vue 能够控制下面的这个 div，帮我们在把数据填充到 div 内部 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户的名字是：&#123;&#123; username &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>选中的省份是&#123;&#123; city &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择城市<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 1. 导入 Vue 的库文件，在 window 全局就有了 Vue 这个构造函数 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 2. 创建 Vue 的实例对象 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 创建 Vue 的实例对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// el 属性是固定的写法，表示当前 vm 实例要控制页面上的哪个区域，接收的值是一个选择器</span></span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-comment">// data 对象就是要渲染到页面上的数据</span></span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;2&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07 VUE2基础/image-20220807171154599.png" alt="image-20220807171154599" style="zoom:67%; border-left: 5px solid green" /><h5 id="v-model-的修饰符"><a href="#v-model-的修饰符" class="headerlink" title="==v-model 的修饰符=="></a>==v-model 的修饰符==</h5><table><thead><tr><th>修饰符</th><th>说明</th></tr></thead><tbody><tr><td>.number</td><td>将用户的输入值转为数值类型</td></tr><tr><td>.trim</td><td>自动过滤用户输入的<strong>首尾空白字符</strong></td></tr><tr><td>.lazy</td><td>在 ‘change’ 时而非 ‘input’ 时更新</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;n1&quot;</span> /&gt;</span><br>    +<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;n2&quot;</span> /&gt;</span><br>    =<br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; n1 + n2 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showName&quot;</span>&gt;</span>获取用户名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 1. 导入 Vue 的库文件，在 window 全局就有了 Vue 这个构造函数 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 2. 创建 Vue 的实例对象 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 创建 Vue 的实例对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// el 属性是固定的写法，表示当前 vm 实例要控制页面上的哪个区域，接收的值是一个选择器</span></span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-comment">// data 对象就是要渲染到页面上的数据</span></span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">n1</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">n2</span>: <span class="hljs-number">2</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">showName</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`用户名是：&quot;<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.username&#125;</span>&quot;`</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h4><h5 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h5><ul><li>会动态的<strong>创建或移除 DOM 元素</strong>，从而控制元素在页面上的显示与隐藏</li><li>切换开销更高</li><li>频繁切换就用 v-show</li></ul><h5 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h5><ul><li><p>动态地为元素<strong>添加或移除</strong> style=“dsipaly:none;” <strong>样式</strong>，从而控制元素的显示与隐藏</p></li><li><p>初始渲染开销更高</p></li><li><p>运行时条件很少改变，就用 v-if</p></li></ul><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>这是被 v-if 控制的元素<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>这是被 v-show 控制的元素<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>优秀<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>良好<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span>一般<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span>差<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 1. 导入 Vue 的库文件，在 window 全局就有了 Vue 这个构造函数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 2. 创建 Vue 的实例对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 创建 Vue 的实例对象</span></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// el 属性是固定的写法，表示当前 vm 实例要控制页面上的哪个区域，接收的值是一个选择器</span></span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-comment">// data 对象就是要渲染到页面上的数据</span></span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 如果 flag 为 true，则显示被控制的元素；如果为 false 则隐藏被控制的元素</span></span><br><span class="language-javascript">      <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;B&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="循环渲染指令"><a href="#循环渲染指令" class="headerlink" title="循环渲染指令"></a>循环渲染指令</h4><p>v-for 使用的是 item in items 形式地特殊语法</p><p><code>v-for=&quot;(item, index) in list&quot;</code>其中 item index 可以根据需求进行重命名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-bordered table-hover table-striped&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>索引<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; index &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 1. 导入 Vue 的库文件，在 window 全局就有了 Vue 这个构造函数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 2. 创建 Vue 的实例对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 创建 Vue 的实例对象</span></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// el 属性是固定的写法，表示当前 vm 实例要控制页面上的哪个区域，接收的值是一个选择器</span></span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-comment">// data 对象就是要渲染到页面上的数据</span></span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">list</span>: [</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span> &#125;,</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span> &#125;,</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王五&#x27;</span> &#125;,</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span> &#125;</span><br><span class="language-javascript">      ]</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>官方建议：</p><ol><li>只要用到了 v-for 指令，那么一定要绑定一个 :key 属性</li><li>而且，尽量把 id 作为 key 的值</li><li>官方对 key 的值类型，是有要求的：字符串或数字类型</li><li>key 的值是千万不能重复的，否则会终端报错：Duplicate keys detected</li></ol></blockquote><p>使用 v-for 的时候需要绑定 id，id 可以利用 nanoid 自动生成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; nanoid &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nanoid&#x27;</span>;<br><span class="hljs-keyword">const</span> personObj = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-title function_">nanoid</span>()<br>  <span class="hljs-comment">// 其他省略</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>补充 label</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cb1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;cb1&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cb2&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;cb2&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>过滤器用于在 Vue3 中已经不常用了</p><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><ul><li>过滤器即 管道符<code>|</code></li><li>常用于文本格式化,可用在 插值表达式 和 v-bind 属性绑定</li><li>在<code>filters</code>节点中定义过滤器</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 案例: 将字符串首字母改为大写的过滤器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>message 的值是：&#123;&#123; message | capi &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello vue.js&#x27;</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 过滤器函数，必须被定义到 filters 节点之下</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 过滤器本质上是函数</span></span><br><span class="language-javascript">      <span class="hljs-attr">filters</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 注意：过滤器函数形参中的 val，永远都是“管道符”前面的那个值</span></span><br><span class="language-javascript">        <span class="hljs-title function_">capi</span>(<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 字符串有 charAt 方法，这个方法接收索引值，表示从字符串中把索引对应的字符，获取出来</span></span><br><span class="language-javascript">          <span class="hljs-comment">// val.charAt(0)</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> first = val.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>();</span><br><span class="language-javascript">          <span class="hljs-comment">// 字符串的 slice 方法，可以截取字符串，从指定索引往后截取</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> other = val.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);</span><br><span class="language-javascript">          <span class="hljs-comment">// 强调：过滤器中，一定要有一个返回值</span></span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> first + other;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h5><p>私有过滤器就是在 filters 节点下定义的过滤器.只能在 vm 示例所控制地 el 区域内使用.</p><h5 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h5><p>使用 Vue.filter()定义的就是全局过滤器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&#x27;capi&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">const</span> first = str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>();<br>  <span class="hljs-keyword">const</span> other = str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> first + other + <span class="hljs-string">&#x27;~~~&#x27;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p>第一个参数为 全局过滤器的名字</p></li><li><p>第二个参数是全局过滤器的处理函数</p><ul><li><p>第二个参数是一个函数,因此也可以传参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message | filterA(arg1, arg2) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&#x27;filterA&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">msg, arg1, arg2</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 第1个参数 是管道符前面待处理的值</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 从第2个参数开始,才是调用过滤器时传递过来的 arg1 arg2</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>又如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; text | capitalize | maxLength(5) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&#x27;capitalize&#x27;</span>, <span class="hljs-function"><span class="hljs-params">str</span> =&gt;</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// xxx 此处省略逻辑</span></span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> str;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&#x27;maxLength&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">str, len = <span class="hljs-number">10</span></span>) =&gt;</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// xxx 此处省略逻辑</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 第一个参数是传递过来的待处理值</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 第二个参数开始才是maxlength过滤器自己的参数</span></span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> xxx;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><p>可以连续调用多个过滤器</p><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><p>watch 侦听器监视数据的变化</p><ul><li><p>侦听器都应该定义到<code>watch</code>节点下</p></li><li><p>侦听器本质上是一个函数，要监视哪个数据的变化，就把数据名作为方法名即可</p></li><li><p>==函数格式的侦听器==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-title function_">username</span>(<span class="hljs-params">newVal</span>) &#123;<br>        <span class="hljs-keyword">if</span> (newVal === <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">return</span><br>        $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://www.escook.cn/api/finduser/&#x27;</span> + newVal, <span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缺点：</p><ul><li>无法在刚进入页面的时候，自动触发！！</li><li>如果侦听的是一个对象，如果对象中的属性发生了变化，不会触发侦听器！！！</li></ul></li><li><p>==对象格式的侦听器==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-attr">username</span>: &#123;<br>        <span class="hljs-comment">// 侦听器的处理函数</span><br>        <span class="hljs-title function_">handler</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newVal, oldVal)<br>        &#125;,<br>        <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>immediate 默认值是 false; 在初次加载完毕后不会调用 watch 侦听器</p><p>immediate: true 表示页面初次渲染好之后,就立即触发当前的 watch 侦听器</p></blockquote><p>优点：</p><ul><li>可以通过 <strong>immediate</strong> 选项，让侦听器自动触发！！！</li><li>可以通过 <strong>deep</strong> 选项，让侦听器深度监听对象中每个属性的变化！！！</li></ul></li></ul><p>示例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 使用watch检测用户名是否可用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/jquery-v3.6.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 所有的侦听器，都应该被定义到 watch 节点下</span></span><br><span class="language-javascript">      <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 侦听器本质上是一个函数，要监视哪个数据的变化，就把数据名作为方法名即可</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 新值在前，旧值在后 username(newVal, oldVal)</span></span><br><span class="language-javascript">        <span class="hljs-title function_">username</span>(<span class="hljs-params">newVal</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (newVal === <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">          <span class="hljs-comment">// 1. 调用 jQuery 中的 Ajax 发起请求，判断 newVal 是否被占用！！！</span></span><br><span class="language-javascript">          $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://www.escook.cn/api/finduser/&#x27;</span> + newVal, <span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);</span><br><span class="language-javascript">          &#125;);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="深度侦听"><a href="#深度侦听" class="headerlink" title="深度侦听"></a>深度侦听</h4><ul><li>若 watch 侦听的是一个对象,若对象中属性值发生了变化,要监听到就需要使用<code>deep</code>选项</li><li>若要监听对象里面子属性的变化,如 info 对象里面的 username 属性,需要一层单引号包裹:<code>&#39;info.username&#39;</code></li></ul><p>示例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.username&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.address.city&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/jquery-v3.6.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 用户的信息对象</span></span><br><span class="language-javascript">        <span class="hljs-attr">info</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">address</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;北京&#x27;</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// 所有的侦听器，都应该被定义到 watch 节点下</span></span><br><span class="language-javascript">      <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">info</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">handler</span>(<span class="hljs-params">newVal</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newVal);</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-comment">// 开启深度监听，只要对象中任何一个属性变化了，都会触发“对象的侦听器”</span></span><br><span class="language-javascript">          <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 如果要侦听的是对象的子属性的变化，则必须包裹一层单引号</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#x27;info.username&#x27;(newVal) &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//   console.log(newVal)</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>所有的计算属性，都要定义到 <code>computed</code> 节点之下</p><p>特点:</p><ol><li>计算属性在<strong>声明时定义为方法</strong></li><li>在使用时当作是一个普通属性使用即可</li><li>计算属性会缓存计算的结果,只有计算属性依赖的数据变化时,才会重新计算</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 红色</span><br>    <span class="hljs-attr">g</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 绿色</span><br>    <span class="hljs-attr">b</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 蓝色</span><br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">// 点击按钮，在终端显示最新的颜色</span><br>    <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">rgb</span>);<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 所有的计算属性，都要定义到 computed 节点之下</span><br>  <span class="hljs-comment">// 计算属性在定义的时候，要定义成“方法格式”</span><br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// rgb 作为一个计算属性，被定义成了方法格式，</span><br>    <span class="hljs-comment">// 最终，在这个方法中，要返回一个生成好的 rgb(x,x,x) 的字符串</span><br>    <span class="hljs-title function_">rgb</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`rgb(<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.r&#125;</span>, <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.g&#125;</span>, <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.b&#125;</span>)`</span>;<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="axios-复习"><a href="#axios-复习" class="headerlink" title="axios 复习"></a>axios 复习</h3><blockquote><p>axios 一个专注于请求的库</p><p>注意：axios()方法返回的是一个 Promise 实例</p></blockquote><ol><li><p>发起 GET 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 调用 axios 方法得到的返回值是 Promise 对象</span><br><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-comment">// 请求方式</span><br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  <span class="hljs-comment">// 请求的地址</span><br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,<br>  <span class="hljs-comment">// URL 中的查询参数 GET请求时用params</span><br>  <span class="hljs-attr">params</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  <span class="hljs-comment">// 请求体参数 POST请求时 用data</span><br>  <span class="hljs-attr">data</span>: &#123;&#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>&#125;);<br></code></pre></td></tr></table></figure><p>执行结果：</p><p>![image-20220809100741659](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220809100741659.png)</p><p>真正的数据在 result.data.data 中</p></li><li><p>发起 POST 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>  &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>某个方法的返回值是 <code>Promise</code> 实例，则前面可以添加 <code>await</code> 但 await 只能用在被 <code>async</code> 修饰的方法中, 如下所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnGet&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 将获得的数据进行解构，并重命名为res</span><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: res &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,<br>    <span class="hljs-attr">params</span>: &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-number">1</span><br>    &#125;<br>  &#125;);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>&#125;);<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnPost&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 将获得的数据进行解构，并重命名为res</span><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: res &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>    &#125;<br>  &#125;);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>还可以用 <code>axios.get()</code> <code>axios.post()</code> 直接发起请求</p><blockquote><p>axios.get(url, { params: { id: 1 } })</p><p>axios.post(url, { name: ‘zs’, age: 19 })</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnGet&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>;<br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: res &#125; = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(url, &#123;<br>    <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;<br>  &#125;);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>&#125;);<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnPost&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>;<br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: res &#125; = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">post</span>(url, &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">19</span><br>  &#125;);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ol><h3 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h3><p>单页面应用程序(Single Page Application 即 SPA)指的是 一个 Web 网站中只有一个唯一的一个 HTML 页面,所有功能与交互都在这个唯一的页面中完成</p><h4 id="什么是-vue-cli"><a href="#什么是-vue-cli" class="headerlink" title="什么是 vue-cli?"></a>什么是 vue-cli?</h4><p>是 Vue.js 开发的标准工具,简化了程序员基于 webpack 创建工程化的 Vue 项目的过程.</p><p>中文官网: <a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></p><h4 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h4><p>安装: <code>npm install -g @vue/cli</code></p><p>使用: <code>vue create 项目名称</code></p><h4 id="vue-项目的运行流程"><a href="#vue-项目的运行流程" class="headerlink" title="==vue 项目的运行流程=="></a>==vue 项目的运行流程==</h4><p>通过 main.js 把 App.vue 渲染到 index.html 指定的区域中</p><ul><li>App.vue 用来编写 待渲染的模板结构</li><li>index.html 中需要预留一个 el 区域</li><li>main.js 把 App.vue 渲染到了 index.html 所预留的区域中</li></ul><h5 id="main-js-文件"><a href="#main-js-文件" class="headerlink" title="main.js 文件"></a>main.js 文件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入 vue 这个包，得到 Vue 构造函数</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-comment">// 导入 App.vue 根组件，将来要把 App.vue 中的模板结构，渲染到 HTML 页面中</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 创建 Vue 的实例对象</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-comment">// 把 render 函数指定的组件，渲染到 HTML 页面中</span><br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br><br><span class="hljs-comment">// Vue 实例的 $mount() 方法，作用和 el 属性完全一样！</span><br></code></pre></td></tr></table></figure><h5 id="App-vue-文件"><a href="#App-vue-文件" class="headerlink" title="App.vue 文件"></a>App.vue 文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 待渲染的模板结构 --&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;p&gt;aaa&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><h5 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 预留的el区域 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="对比-mount-方法-amp-el-属性"><a href="#对比-mount-方法-amp-el-属性" class="headerlink" title="==对比 $mount()方法 &amp; el 属性=="></a>==对比 $mount()方法 &amp; el 属性==</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>&#123;&#123;username&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    vm.$mount(<span class="hljs-string">&#x27;#app&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 可简写为:</span></span><br><span class="language-javascript">    <span class="hljs-comment">// new Vue(&#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//   data: &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     username: &#x27;admin&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//   &#125;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;).$mount(&#x27;#app&#x27;)</span></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>&#123;&#123;username&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 3 创建vue实例对象 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, <span class="hljs-comment">// el属性时固定写法</span></span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;zs&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="vant"><a href="#vant" class="headerlink" title="vant"></a>vant</h3><h3 id="vue-组件"><a href="#vue-组件" class="headerlink" title="vue 组件"></a>vue 组件</h3><h4 id="什么是组件化开发"><a href="#什么是组件化开发" class="headerlink" title="什么是组件化开发"></a>什么是组件化开发</h4><blockquote><p>根据封装的思想,把页面上<strong>可重用的 UI 结构</strong>封装为组件,从而方便项目开发和维护</p><p>组件的后缀名是 <code>.vue</code> 上面介绍的 App.vue 就是一个组件</p></blockquote><h4 id="vue-组件的组成部分"><a href="#vue-组件的组成部分" class="headerlink" title="vue 组件的组成部分"></a>vue 组件的组成部分</h4><ul><li>template 组件的模板结构</li><li>script 组件的 JavaScript 行为</li><li>style 组件的样式</li></ul><p>每个组件<strong>必须包含 template 模板结构</strong>,script 和 style 是可选的</p><h5 id="template"><a href="#template" class="headerlink" title="template"></a>template</h5><p>vue2 中 template 只能包含唯一的根节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 当前组件的 DOM 结构 需要定义到template 标签的内部 --&gt;<br>  &lt;div class=&quot;container&quot;&gt;&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h5 id="script"><a href="#script" class="headerlink" title="script"></a>script</h5><p>vue 规定:开发者可以在 script 标签节点中封装组件的 javascript 业务逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>// 组件相关的 data 数据, methods方法等 都需要定义到 export default 所导出的对象中<br>export default &#123;&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>注意:</p><p>vue 组件中的 data 必须是一个函数,不能直接指向一个数据对象</p></blockquote><p>如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>// 默认导出。这是固定写法！<br>export default &#123;<br>  // data 数据源<br>  // 注意：vue组件中的 data 必须是一个函数<br>  data() &#123;<br>    // 这个 return 出去的 &#123; &#125; 中，可以定义数据<br>    return &#123;<br>      username: &#x27;admin&#x27;<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    changeName() &#123;<br>      // 在组件中， this 就表示当前组件的实例对象<br>      console.log(this);<br>      this.username = &#x27;哇哈哈&#x27;;<br>    &#125;<br>  &#125;,<br>  // 当前组件中的侦听器<br>  watch: &#123;&#125;,<br>  // 当前组件中的计算属性<br>  computed: &#123;&#125;,<br>  // 当前组件中的过滤器<br>  filters: &#123;&#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="style"><a href="#style" class="headerlink" title="style"></a>style</h5><p>组件内的 style 节点是可选的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style lang=&quot;less&quot;&gt;<br>.test-box &#123;<br>  background-color: pink;<br>  h3 &#123;<br>    color: red;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h4 id="组件间的关系"><a href="#组件间的关系" class="headerlink" title="组件间的关系"></a>组件间的关系</h4><p>直接封装好的组件之间是<strong>相互独立</strong>的,如: App.vue, Left.vue, right.vue</p><h5 id="父子关系"><a href="#父子关系" class="headerlink" title="父子关系"></a>父子关系</h5><p>在 App.vue 组件中使用 Left.vue 组件, 就形成了父子关系.步骤如下:</p><ol><li>使用 <code>import</code> 导入需要的组件</li><li>使用 <code>components</code> 节点注册组件</li><li>以 标签 的形式使用刚才注册的组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;div class=&quot;box&quot;&gt;<br>      &lt;!-- 3 使用 Left 组件 --&gt;<br>      &lt;Left&gt;&lt;/Left&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 1 使用 import 导入需要的组件<br>import Left from &#x27;@/components/Left.vue&#x27;;<br>export default &#123;<br>  // 2 使用 components 节点注册组件<br>  components: &#123;<br>    Left<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><h5 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>// 1 使用 import 导入需要的组件<br>import Left from &#x27;@/components/Left.vue&#x27;;<br>// 2 使用 Vue.component 注册全局组件<br>Vue.component(&#x27;MyLeft&#x27;, Left);<br>export default &#123;<br>  // 使用 components 节点注册组件<br>  components: &#123;&#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p>props 是组建的自定义属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>    // 组件的自定义属性<br>    props: &#123;<br>        // 声明 title 自定义属性，允许使用者自定义标题的内容<br>        title: &#123;<br>            default: &#x27;&#x27;,<br>            type: String<br>        &#125;<br>    &#125;<br>    // 组件的私有属性<br>    data() &#123;<br>        return &#123;&#125;<br>    &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>注意:</p><ul><li>props 中的自定义属性是<strong>只读</strong>的<ul><li>用 default 来定义属性的默认值</li><li>用 type 来定义属性的值类型,可选值: Number String Object 等</li><li>用 required 来设置该属性是否为必须传递的属性(是否为必选项)</li></ul></li><li>data 中的数据可读可写</li></ul><h4 id="组件间样式冲突问题"><a href="#组件间样式冲突问题" class="headerlink" title="组件间样式冲突问题"></a>组件间样式冲突问题</h4><h5 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h5><p>写在 vue 组件中的样式会全局生效,因此很容易就造成多个组件样式冲突的问题</p><p>根本原因</p><ul><li>单页面应用程序,所有 DOM 结构都是基于唯一的 inex.html 页面进行呈现的</li><li>每个组件的样式都会影响整个的 index.html 页面的 DOM 元素</li></ul><h5 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h5><p>为 style 节点添加<code>scoped</code>属性</p><p><strong>原理</strong>：scoped 属性用来自动为每个组件分配唯一的“自定义属性”,并且为当前组建的 DOM 标签和 style 样式应用这个自定义属性,防止组件的样式冲突问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style lang=&quot;less&quot; scoped&gt;<br>/* .test-box在父组件 */<br>.test-box &#123;<br>  background-color: pink;<br>  /* h3为子组件中的标签元素 */<br>  h3 &#123;<br>    color: red;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h5 id="新增问题"><a href="#新增问题" class="headerlink" title="新增问题"></a>新增问题</h5><p>添加 scoped 属性后,当前组件的样式<strong>对其子组件是不生效</strong>的,即子组件没有被分配 scoped 为其父组件自动分配的属性.</p><p>加了 scoped 的组件标签，都为被自动添加上一个自定义属性 data-v-xxx1</p><p>经过编译后，上面的 less 样式就会变为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* .test-box在父组件 */</span><br><span class="hljs-selector-class">.test-box</span> <span class="hljs-selector-attr">[data-v-xxx1]</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br><span class="hljs-comment">/* h3为子组件中的标签元素 */</span><br><span class="hljs-selector-tag">h3</span><span class="hljs-selector-attr">[data-v-xxx1]</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是子组件中的 h3 是没有 data-v-xxx 此属性的，子组件中 scoped 为其分配的 data-v-xxx2 是与父组件的不同的，因此在添加了 scoped 的父组件中为子组件添加样式，并不能生效</p><p>于是有了样式穿透 /deep/</p><h5 id="样式穿透"><a href="#样式穿透" class="headerlink" title="样式穿透"></a>样式穿透</h5><p>几种写法：</p><ul><li><code>&gt;&gt;&gt;</code> 仅用于 CSS ，不适用 sass</li><li><code>/deep/</code> Vue3 之前</li><li><code>::v-deep</code> vue3</li><li><code>deep()</code> Vue3 使用</li></ul><p>解决: 在当前组件前加 <code>/deep/</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style lang=&quot;less&quot; scoped&gt;<br>/deep/ .test-box &#123;<br>  background-color: pink;<br>  h3 &#123;<br>    color: red;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* .test-box在父组件 */</span><br><span class="hljs-selector-class">.test-box</span> <span class="hljs-selector-attr">[data-v-xxx1]</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br><span class="hljs-comment">/* h3为子组件中的标签元素 */</span><br><span class="hljs-selector-attr">[data-v-xxx1]</span> <span class="hljs-selector-tag">h3</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>h3 标签颜色修改成功</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><strong>生命周期</strong>包括： 创建、运行、销毁</p><p><strong>生命周期函数</strong>：由 vue 框架提供的内置函数，伴随生命周期自动按次序执行</p><p>生命周期强调的是<strong>时间段</strong>，生命周期函数强调的是<strong>时间点</strong></p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07 VUE2基础/image-20220808160029769.png" alt="image-20220808160029769" style="zoom:80%;" /><blockquote><p>组件创建阶段</p></blockquote><ul><li><p>beforeCreate</p></li><li><p>created</p><p>经常在 created 里面调用 methods 方法，请求服务器的数据，并且<strong>把请求到的数据转存到 data 中</strong>，供 template 模板渲染的时候使用</p></li><li><p>beforeMount</p></li><li><p>mounted</p><p>在此处可以最早的<strong>操作 DOM 元素</strong></p></li></ul><p>注意：此阶段的函数都只执行一次</p><blockquote><p>组件运行阶段</p></blockquote><ul><li><p>beforeUpdate</p><p>此时数据是最新的，但页面还没来得及重新渲染</p></li><li><p>updated</p><p>此时数据是最新的，页面也渲染了。因此当数据变化之后，为了能够操作最新的 DOM 元素，必须将代码写到 updated 生命周期函数中</p></li></ul><p>注意：执行 0~N 次，若数据没有发生改变，就不会执行此阶段，一旦发生改变就会执行</p><h3 id="数据共享"><a href="#数据共享" class="headerlink" title="数据共享"></a>数据共享</h3><h4 id="父组件向子组件共享"><a href="#父组件向子组件共享" class="headerlink" title="父组件向子组件共享"></a>父组件向子组件共享</h4><blockquote><p>利用自定义属性 props</p></blockquote><ul><li>父组件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h1&gt;父组件&lt;/h1&gt;<br>    &lt;hr /&gt;<br><br>    &lt;div class=&quot;box&quot;&gt;<br>      &lt;!-- 渲染 Left 组件和 Right 组件 --&gt;<br>      &lt;Left :msg=&quot;message&quot; :user=&quot;userinfo&quot;&gt;&lt;/Left&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Left from &#x27;@/components/Left.vue&#x27;;<br><br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      message: &#x27;hello&#x27;,<br>      userinfo: &#123; name: &#x27;ls&#x27;, age: 18 &#125;<br>    &#125;;<br>  &#125;,<br><br>  components: &#123;<br>    Left<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>子组件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;left-container&quot;&gt;<br>    &lt;h3&gt;Left 组件&lt;/h3&gt;<br>    &lt;p&gt;msg 的值是：&#123;&#123; msg &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;user 的值是：&#123;&#123; user &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 1. 导入 eventBus.js 模块<br>import bus from &#x27;./eventBus.js&#x27;;<br><br>export default &#123;<br>  props: [&#x27;msg&#x27;, &#x27;user&#x27;]<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="子组件向父组件共享"><a href="#子组件向父组件共享" class="headerlink" title="子组件向父组件共享"></a>子组件向父组件共享</h4><blockquote><p>利用自定义事件</p></blockquote><p><strong>简要的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 子组件中自定义事件</span><br><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++;<br>        <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;numchange&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 父组件渲染子组件时，注册事件，getNewCount方法会接收传递过来的值</span><br>&lt;<span class="hljs-title class_">Right</span> @numchange=<span class="hljs-string">&quot;getNewCount&quot;</span>&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Rigth</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>具体的</strong></p><ul><li>子组件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;right-container&quot;&gt;<br>    &lt;h3&gt;Right 组件--- &#123;&#123; count &#125;&#125;&lt;/h3&gt;<br>    &lt;button @click=&quot;add&quot;&gt;+1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      // 子组件自己的数据，将来希望把 count 值传给父组件<br>      count: 0<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    add() &#123;<br>      // 让子组件的 count 值自增 +1<br>      this.count += 1;<br>      // 把自增的结果，通过自定义事件numchange 传给父组件<br>      this.$emit(&#x27;numchange&#x27;, this.count);<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>父组件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h1&gt;父组件&lt;/h1&gt;<br>    &lt;hr /&gt;<br><br>    &lt;div class=&quot;box&quot;&gt;<br>      &lt;!-- 渲染 Left 组件和 Right 组件 --&gt;<br>      &lt;Left :msg=&quot;message&quot; :user=&quot;userinfo&quot;&gt;&lt;/Left&gt;<br>      &lt;Right @numchange=&quot;getNewCount&quot;&gt;&lt;/Right&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Left from &#x27;@/components/Left.vue&#x27;;<br>import Right from &#x27;@/components/Right.vue&#x27;;<br><br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      message: &#x27;hello&#x27;,<br>      userinfo: &#123; name: &#x27;ls&#x27;, age: 18 &#125;,<br>      // 定义 countFromSon 来接收子组件传递过来的数据<br>      countFromSon: 0<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    // 获取子组件传递过来的数据<br>    getNewCount(val) &#123;<br>      console.log(&#x27;numchange 事件被触发了！&#x27;, val);<br>      this.countFromSon = val;<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    Left,<br>    Right<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="兄弟组件间数据共享"><a href="#兄弟组件间数据共享" class="headerlink" title="兄弟组件间数据共享"></a>兄弟组件间数据共享</h4><blockquote><p>利用 eventBus</p><ul><li>发送端 在 methods 里面 bus.$emit(‘自定义事件 A’, 要传输的数据)</li><li>接收端 在 created 函数里面 bus.$on(‘A’, (接收到的数据) =&gt; { // 处理程序 })</li></ul></blockquote><h5 id="eventBus-js"><a href="#eventBus-js" class="headerlink" title="==eventBus.js=="></a>==eventBus.js==</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// eventBus.js文件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>();<br></code></pre></td></tr></table></figure><p><strong>简要的</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 发送端 --&gt;<br>&lt;script&gt;<br>// 1. 导入 eventBus.js 模块<br>import bus from &#x27;./eventBus.js&#x27;;<br>export default &#123;<br>  methods: &#123;<br>    send() &#123;<br>      // 通过bus来自定义事件<br>      bus.$emit(&#x27;share&#x27;, this.str);<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;!-- 接收端 --&gt;<br>&lt;script&gt;<br>// 1. 导入 eventBus.js 模块<br>import bus from &#x27;./eventBus.js&#x27;;<br>export default &#123;<br>    data() &#123;<br>        return &#123;<br>            msgFromLeft: &#x27;&#x27;<br>        &#125;<br>    &#125;<br>    created() &#123;<br>        // 通过bus来触发事件share, val能接收到传递过来的数据<br>        bus.$on(&#x27;share&#x27;, (val) =&gt; &#123;<br>            this.msgFromLeft = val;<br>        &#125;)<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>具体的</strong></p><p>以下三个文件都在 components 文件夹下</p><ul><li><p>eventBus.js 文件中介</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// eventBus.js文件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>();<br></code></pre></td></tr></table></figure></li><li><p>Left 组件发送</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;left-container&quot;&gt;<br>    &lt;h3&gt;Left 组件&lt;/h3&gt;<br>    &lt;p&gt;消息：&#123;&#123; str &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;send&quot;&gt;把消息发给 Right&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 1. 导入 eventBus.js 模块<br>import bus from &#x27;./eventBus.js&#x27;;<br><br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      str: `我来自Left组件`<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    send() &#123;<br>      // 2. 通过 eventBus 来发送数据<br>      bus.$emit(&#x27;share&#x27;, this.str);<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>Right 组件接收</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;right-container&quot;&gt;<br>    &lt;h3&gt;Right组件&lt;/h3&gt;<br>    &lt;p&gt;&#123;&#123; msgFromLeft &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 1. 导入 eventBus.js 模块<br>import bus from &#x27;./eventBus.js&#x27;;<br><br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      msgFromLeft: &#x27;&#x27;<br>    &#125;;<br>  &#125;,<br>  created() &#123;<br>    // 2. 为 bus 绑定自定义事件<br>    bus.$on(&#x27;share&#x27;, val =&gt; &#123;<br>      console.log(&#x27;在 Right 组件中定义的 share 被触发了！&#x27;, val);<br>      this.msgFromLeft = val;<br>    &#125;);<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="ref-引用"><a href="#ref-引用" class="headerlink" title="ref 引用"></a>ref 引用</h3><blockquote><p>不依赖 jQuery 的情况下, 获取 DOM 元素或组件的引用</p></blockquote><p>每个 vue 组件实例都有一个$refs 对象,里面存贮着对应 DOM 元素或组建的引用,默认情况下组建的$refs 指向一个空对象</p><h4 id="ref-引用-DOM-元素"><a href="#ref-引用-DOM-元素" class="headerlink" title="ref 引用 DOM 元素"></a>ref 引用 DOM 元素</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app-container&quot;&gt;<br>    &lt;h1 ref=&quot;myh1&quot;&gt;APP组件&lt;/h1&gt;<br>    &lt;button @click=&quot;getRef&quot;&gt;变色&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  methods: &#123;<br>    getRef() &#123;<br>      console.log(this.$refs);<br>      console.log(this.$refs.myh1);<br>      this.$refs.myh1.style.color = &#x27;red&#x27;;<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="ref-引用组件实例"><a href="#ref-引用组件实例" class="headerlink" title="ref 引用组件实例"></a>ref 引用组件实例</h4><p>相当于在父组件中可以获取子组件.从而对子组件中的属性进行引用或修改,还可以调用子组件的方法等</p><ul><li>父组件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app-container&quot;&gt;<br>    &lt;h1&gt;APP组件&lt;/h1&gt;<br>    &lt;button @click=&quot;resetByApp&quot;&gt;重置Left中count&lt;/button&gt;<br>    &lt;div id=&quot;box&quot;&gt;<br>      &lt;Left ref=&quot;myLeft&quot;&gt;&lt;/Left&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Left from &#x27;./components/Left.vue&#x27;;<br>export default &#123;<br>  methods: &#123;<br>    resetByApp() &#123;<br>      // this.$refs.myLeft 获取到子组件Left,获得到后就可以修改里面的属性值了<br>      // this.$refs.myLeft.count = 0;    // 方法一：直接修改子组件的属性值<br>      this.$refs.myLeft.resetByLeft(); // 方法二：直接调用子子组件的方法<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>子组件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;left-container&quot;&gt;<br>    &lt;h2&gt;Left组件&lt;/h2&gt;<br>    &lt;p&gt;&#123;&#123; count &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;add&quot;&gt;+1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>      return &#123;<br>          count: 0<br>      &#125;<br>  &#125;<br>  methods: &#123;<br>    add() &#123;<br>        this.count++;<br>    &#125;,<br>    resetByLeft() &#123;<br>        this.count = 0;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="其它-nextTick"><a href="#其它-nextTick" class="headerlink" title="其它 nextTick"></a>其它 nextTick</h3><h4 id="文本框和按钮按需切换"><a href="#文本框和按钮按需切换" class="headerlink" title="文本框和按钮按需切换"></a>文本框和按钮按需切换</h4><h5 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h5><ol><li>利用 ref 获取原生的 DOM 元素</li><li>this.$nextTick(callback)的用法</li></ol><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>第一步: 点击按钮, 按钮隐藏 输入框显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;right-container&quot;&gt;<br>    &lt;h3&gt;Right组件&lt;/h3&gt;<br>    &lt;input type=&quot;text&quot; v-if=&quot;inputVisible&quot; /&gt;<br>    &lt;button v-else @click=&quot;showInput&quot;&gt;显示文本框&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      inputVisible: false<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    showInput() &#123;<br>      this.inputVisible = true;<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>第二步: 让文本框自动获取焦点</p><blockquote><p>方法:</p><p>为其添加 ref 引用,获取原生 DOM 对象后利用.focus()方法来实现</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;right-container&quot;&gt;<br>    &lt;h3&gt;Right组件&lt;/h3&gt;<br>    &lt;input type=&quot;text&quot; v-if=&quot;inputVisible&quot; ref=&quot;ipt&quot; @blur=&quot;&quot; /&gt;<br>    &lt;button v-else @click=&quot;showInput&quot;&gt;显示文本框&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      inputVisible: false<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    showInput() &#123;<br>      this.inputVisible = true;<br>      // this.$refs.ipt.focus();   // 报错<br>      /* 为什么上面会报错，并且拿到的是undefined：<br>      当data里面的数据inputvisible发生变化时，数据已经更新，但是还没有更新DOM结构。<br>      解决：使用 $nextTick(callback) 会把callback回调函数的执行 推迟到 DOM更新后再执行<br>      */<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>此处需要注意报错的地方:</p><ul><li>原因: 当 data 里面的数据 inputvisible 发生变化时，数据已经更新，但是还没有更新 DOM 结构。</li><li>解决: 使用 $nextTick(callback) 会把 callback 回调函数的执行 推迟到 下一个 DOM 更新周期 之后再执行</li></ul></blockquote><p>第二步:问题解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">showInput</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">inputVisible</span> = <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">// 解决问题的关键步骤</span><br>        <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">iptRef</span>.<span class="hljs-title function_">focus</span>();<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第三步: 文本框失去焦点时, 按钮显示, 文本框隐藏</p><p>添加一个失去焦点事件,事件被触发时,将 inputVisible 置为 false</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;right-container&quot;&gt;<br>    &lt;h3&gt;Right组件&lt;/h3&gt;<br>    &lt;input type=&quot;text&quot; v-if=&quot;inputVisible&quot; ref=&quot;ipt&quot; @blur=&quot;showButton&quot; /&gt;<br>    &lt;button v-else @click=&quot;showInput&quot;&gt;显示文本框&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      inputVisible: false<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    showInput() &#123;<br>      this.inputVisible = true;<br>      // this.$refs.ipt.focus();   // 报错<br>      this.$nextTick(() =&gt; &#123;<br>        this.$refs.ipt.focus();<br>      &#125;);<br>    &#125;,<br>    // 第三步<br>    showButton() &#123;<br>      this.inputVisible = false;<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>动态切换组件的显示与隐藏</p><blockquote><p>利用 vue 内置的 <code>&lt;component&gt;</code> 组件 来实现动态组建的渲染</p></blockquote><h4 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;!-- 3. 点击按钮，动态切换组件的名称 --&gt;<br>    &lt;button @click=&quot;comName = &#x27;Left&#x27;&quot;&gt;展示 Left&lt;/button&gt;<br>    &lt;button @click=&quot;comName = &#x27;Right&#x27;&quot;&gt;展示 Right&lt;/button&gt;<br><br>    &lt;div class=&quot;box&quot;&gt;<br>      &lt;!-- 2. 通过is属性，动态指定切换组建的名称 --&gt;<br>      &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Left from &#x27;@/components/Left.vue&#x27;;<br>import Right from &#x27;@/components/Right.vue&#x27;;<br><br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      // 1. comName 表示要展示的组件的名字<br>      comName: &#x27;Left&#x27;<br>    &#125;;<br>  &#125;,<br>  components: &#123;<br>    // 如果在“声明组件”的时候，没有为组件指定 name 名称，则组件的名称默认就是“注册时候的名称”<br>    Left,<br>    Right<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h4><p>默认情况下，切换动态组件时，无法保持组件的状态，因此可以用 <code>&lt;keep-alive&gt;</code> 来保持动态组建的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;box&quot;&gt;<br>    &lt;keep-alive&gt;<br>        &lt;!-- 2. 通过is属性，动态指定切换组建的名称 --&gt;<br>        &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;<br>    &lt;/keep-alive&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li><p>keep-alive 会把内部的组件进行缓存，而不是销毁组</p></li><li><p><code>include</code>属性 在使用 keep-alive 的时候，可以通过 include 指定哪些组件需要被缓存；</p></li><li><p><code>exclude</code>属性 或者，通过 exclude 属性指定哪些组件不需要被缓存；但是：不要同时使用 include 和 exclude 这两个属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;keep-alive exclude=&quot;MyRight&quot;&gt;<br>    &lt;!-- 2. 通过is属性，动态指定切换组建的名称 --&gt;<br>    &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;<br>&lt;/keep-alive&gt;<br></code></pre></td></tr></table></figure></li><li><p>keep-alive 对应的生命周期函数</p><ul><li>当组件被缓存时，会自动触发组建的 deactivated 生命周期函数</li><li>当组件被激活时，会自动触发组建的 activated 生命周期函数</li></ul></li></ul><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>允许开发者在封装组件时，把不确定的、希望由用户指定的部分定义为插槽。简单来说可以认为是：组件封装期间，为用户预留的内容的占位符</p><h4 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- Left组件 --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;left-container&quot;&gt;<br>    &lt;h2&gt;Left组件&lt;/h2&gt;<br>    &lt;!-- 通过slot标签预留内容占位符 --&gt;<br>    &lt;slot&gt;后备内容&lt;/slot&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;!-- App组件 --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h1&gt;App组件&lt;/h1&gt;<br>    &lt;Left&gt;<br>      &lt;p&gt;这是插槽内容&lt;/p&gt;<br>    &lt;/Left&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Left from &#x27;./components/Left.vue&#x27;;<br><br>export default &#123;<br>  name: &#x27;App&#x27;,<br>  components: &#123;<br>    Left<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li><p>如果 Left 组件中没有 slot 来预留内容占位符，那么 在 App 组件中的 p 标签里面的内容就会被丢弃，而无法显示</p></li><li><p>Left 组件中 slot 标签里面的内容会在 Left 组件的使用者(App 组件)没有提供内容时 显示。如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h1&gt;App组件&lt;/h1&gt;<br>    &lt;!-- Left中没有提供内容 --&gt;<br>    &lt;Left&gt;&lt;/Left&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><h5 id="为插槽指定-name"><a href="#为插槽指定-name" class="headerlink" title="为插槽指定 name"></a>为插槽指定 name</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- Left组件 --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;left-container&quot;&gt;<br>    &lt;h2&gt;Left组件&lt;/h2&gt;<br>    &lt;!-- 通过slot标签预留内容占位符 --&gt;<br>    &lt;header&gt;<br>      &lt;!-- 为当前插槽指定了header的name --&gt;<br>      &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;<br>    &lt;/header&gt;<br>    &lt;main&gt;<br>      &lt;!-- 没有指定时，插槽默认name为default --&gt;<br>      &lt;slot&gt;&lt;/slot&gt;<br>    &lt;/main&gt;<br>    &lt;footer&gt;<br>      &lt;!-- 为当前插槽指定了footer的name --&gt;<br>      &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;<br>    &lt;/footer&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h5 id="为具名插槽提供内容"><a href="#为具名插槽提供内容" class="headerlink" title="为具名插槽提供内容"></a>为具名插槽提供内容</h5><blockquote><p>在&lt;template&gt;元素上使用 v-slot 指令，以 v-slot 参数的形式提供插槽名称，就可以为对应名称的插槽提供内容，如下：</p></blockquote><blockquote><template v-slot:header>  <h3>标题</h3></template></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- App组件 --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h1&gt;App组件&lt;/h1&gt;<br>    &lt;Left&gt;<br>      &lt;template v-slot:header&gt;<br>        &lt;h3&gt;标题&lt;/h3&gt;<br>      &lt;/template&gt;<br>      &lt;template v-slot:footer&gt;<br>        &lt;p&gt;页脚&lt;/p&gt;<br>      &lt;/template&gt;<br>      &lt;template v-slot: default&gt;<br>        &lt;div&gt;正文正文正文正文&lt;/div&gt;<br>      &lt;/template&gt;<br>    &lt;/Left&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>运行结果：</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07 VUE2基础/image-20220809121343212.png" alt="image-20220809121343212" style="zoom:80%;" /><h5 id="具名插槽的简写"><a href="#具名插槽的简写" class="headerlink" title="具名插槽的简写"></a>具名插槽的简写</h5><blockquote><p><code>v-slot：</code> 可以简写为 <code>#</code></p></blockquote><p>如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template #header&gt;<br>  &lt;h3&gt;标题&lt;/h3&gt;<br>&lt;/template&gt;<br>&lt;template #footer&gt;<br>  &lt;p&gt;页脚&lt;/p&gt;<br>&lt;/template&gt;<br>&lt;template #default&gt;<br>  &lt;div&gt;正文正文正文正文&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><p><strong>数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定</strong></p><blockquote><p>&lt;slot :user=”userinfo” :msg=”msg”&gt;&lt;/slot&gt;</p></blockquote><h5 id="预留作用域插槽"><a href="#预留作用域插槽" class="headerlink" title="预留作用域插槽"></a>预留作用域插槽</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- Left组件 --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;left-container&quot;&gt;<br>    &lt;h2&gt;Left组件&lt;/h2&gt;<br><br>    &lt;main&gt;<br>      &lt;!-- 这是一个作用域插槽 --&gt;<br>      &lt;slot :user=&quot;userinfo&quot; :msg=&quot;msg&quot;&gt;&lt;/slot&gt;<br>    &lt;/main&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      userinfo: &#123;<br>        name: &#x27;zs&#x27;,<br>        age: 18<br>      &#125;,<br>      msg: &#x27;这是一段文字&#x27;<br>    &#125;;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="使用作用域插槽"><a href="#使用作用域插槽" class="headerlink" title="使用作用域插槽"></a>使用作用域插槽</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- App组件 --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h1&gt;App组件&lt;/h1&gt;<br>    &lt;Left&gt;<br>      &lt;template #default=&quot;&#123; user, msg &#125;&quot;&gt;<br>        &lt;!-- 若没有 &#123;&#125;， 那么传过来的数据是个对象 --&gt;<br>        &lt;!-- 此处的 &#123; user, msg &#125; 相当于把传过来的数据对象 解构了--&gt;<br>        &lt;div&gt;<br>          正文正文正文正文<br>          &lt;p&gt;&#123;&#123; user &#125;&#125;&lt;/p&gt;<br>          &lt;p&gt;&#123;&#123; user.name &#125;&#125;&lt;/p&gt;<br>          &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;<br>        &lt;/div&gt;<br>      &lt;/template&gt;<br>    &lt;/Left&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><blockquote><p>注意</p><ul><li><p>若没有解构传过来的数据，即 #default=”user, msg”，则的内容是：</p><p>{ “user”: { “name”: “zs”, “age”: 18 }, “msg”: “这是一段文字” }</p></li><li><p>当通过解构 #default=”{ user, msg }” 后，就可以直接拿到 user 和 msg 里面的内容，则的内容是：{ {“name”: “zs”, “age”: 18 }</p></li></ul></blockquote><p>作用域插槽在 App 组件中的几种用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;category title=&quot;游戏&quot;&gt;<br>    &lt;template scope=&quot;joney&quot;&gt;<br>&lt;ul&gt;<br>    &lt;li v-for=&quot;(g,index) in joney.games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;<br>   &lt;/ul&gt;<br>    &lt;/template&gt;<br>&lt;/category&gt;<br><br>&lt;category title=&quot;游戏&quot;&gt;<br>    &lt;template scope=&quot;&#123;games&#125;&quot;&gt;<br>&lt;ol&gt;<br>    &lt;li style=&quot;color:red&quot; v-for=&quot;(g,index) in games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;<br>    &lt;/ol&gt;<br>    &lt;/template&gt;<br>&lt;/category&gt;<br><br>&lt;category title=&quot;游戏&quot;&gt;<br>    &lt;template slot-scope=&quot;&#123;games&#125;&quot;&gt;<br>&lt;h4 v-for=&quot;(g,index) in games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;<br>    &lt;/template&gt;<br>&lt;/category&gt;<br><br>&lt;category title=&quot;游戏&quot;&gt;<br>    &lt;template v-slot=&quot;&#123;games&#125;&quot;&gt;<br>&lt;h4 v-for=&quot;(g,index) in games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;<br>    &lt;/template&gt;<br>&lt;/category&gt;<br></code></pre></td></tr></table></figure><p>前两种已废弃，推荐使用 <code>v-slot</code>, games 是组件 category 提供的数据，数据生成的结构有使用者 App 组件</p><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><h4 id="私有自定义指令"><a href="#私有自定义指令" class="headerlink" title="私有自定义指令"></a>私有自定义指令</h4><p>在<code>directives</code>节点下声明 私有自定义指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;!-- 使用自定义指令color时，需要在前加上 v- 前缀 --&gt;<br>    &lt;h1 v-color&gt;App组件&lt;/h1&gt;<br>    &lt;!-- 为自定义指令传值 --&gt;<br>    &lt;h1 v-color=&quot;color&quot;&gt;App组件&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;App&#x27;,<br>  directives: &#123;<br>    // 在此处自定义指令<br>    color: &#123;<br>      bind(el) &#123;<br>        // el时绑定此指令的、原生的DOM对象<br>        el.style.color = &#x27;red&#x27;;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>在 directives 节点下声明 私有自定义指令</li><li>利用 bind()来绑定原生 DOM 对象，其中 bind(el)<code>第一个参数el</code>就是当前指令的原生 DOM 对象</li><li>使用自定义指令时，需要在声明指令时的名字前 加上前缀 v-</li></ul><h5 id="自定义指令动态绑定参数值"><a href="#自定义指令动态绑定参数值" class="headerlink" title="自定义指令动态绑定参数值"></a>自定义指令动态绑定参数值</h5><blockquote><ol><li>v-指令名称=”参数值”</li><li>通过 bind()的第二个参数获取指令的参数值</li><li>bind 函数默认只调用 1 次，后续 DOM 更新不会再被触发，因此需要为自定义指令添加<code>update()</code>函数</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;!-- 1. 为自定义指令传值 --&gt;<br>    &lt;h1 v-color=&quot;color&quot;&gt;App组件&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;App&#x27;,<br>  data() &#123;<br>    return &#123;<br>      color: &#x27;orange&#x27;<br>    &#125;;<br>  &#125;,<br>  directives: &#123;<br>    // 在此处自定义指令<br>    color: &#123;<br>      // 当指令第一次绑定元素时被调用<br>      bind(el, binding) &#123;<br>        // 第一个参数el 是绑定此指令的、原生的DOM对象<br>        // el.style.color = &#x27;red&#x27;;<br>        // 2. 第二个参数binding 用于接收指令的参数值<br>        el.style.color = binding.value;<br>      &#125;,<br>      // 3. 每次DOM更新时调用<br>      update(el, binding) &#123;<br>        el.style.color = binding.value;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="自定义指令简写"><a href="#自定义指令简写" class="headerlink" title="自定义指令简写"></a>自定义指令简写</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数简写</span><br><span class="hljs-comment">// 若 bind() 和 update()函数中的逻辑完全相同，那么对象格式的自定义指令可以简写成函数格式</span><br><span class="hljs-title function_">color</span>(<span class="hljs-params">el, binding</span>) &#123;<br>    el.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = binding.<span class="hljs-property">value</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="全局自定义指令"><a href="#全局自定义指令" class="headerlink" title="全局自定义指令"></a>全局自定义指令</h4><blockquote><p>通过 Vue.directive() 声明</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding</span>) &#123;<br>  <span class="hljs-comment">// 参数1：字符串，表示全局自定义指令的名字</span><br>  <span class="hljs-comment">// 参数2: 函数对象，用来接收指令的参数值</span><br>  el.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = binding.<span class="hljs-property">value</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>路由 router —— 对应关系</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li><p>为什么会有路由？</p><blockquote><p>单页面应用程序 SPA 是指一个 web 网站只有唯一的一个 HTML 页面，所有组件的展示与切换都在这个唯一的一个页面里面完成，此时不同组件之间切换就需要通过前端路由来实现</p></blockquote></li><li><p>什么是前端路由？</p><blockquote><p>Hash 地址 与 组件 之间的对应关系</p></blockquote></li><li><p>前端路由是如何工作的?</p><blockquote><ol><li>用户点击了页面上的路由链接</li><li>导致了 URL 地址栏中的 hash 值发生了变化</li><li>前端路由监听到了 Hash 地址的变化</li><li>前端路由把当前 Hash 地址对应的组件渲染到浏览器中</li></ol></blockquote></li></ol><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>实现简易的路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h1&gt;App组件&lt;/h1&gt;<br>    &lt;!-- &lt;button @click=&quot;comName = &#x27;Home&#x27;&quot;&gt;切换到Home&lt;/button&gt;<br>    &lt;button @click=&quot;comName = &#x27;About&#x27;&quot;&gt;切换到About&lt;/button&gt; --&gt;<br>    &lt;a href=&quot;#/home&quot;&gt;Home&lt;/a&gt;<br>    &amp;nbsp;<br>    &lt;a href=&quot;#/about&quot;&gt;About&lt;/a&gt;<br>    &lt;div class=&quot;box&quot;&gt;<br>      &lt;!-- 通过is属性来指定要展示组件名称 --&gt;<br>      &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Home from &#x27;./components/Home.vue&#x27;;<br>import About from &#x27;./components/About.vue&#x27;;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      comName: &#x27;Home&#x27;<br>    &#125;;<br>  &#125;,<br>  components: &#123;<br>    Home,<br>    About<br>  &#125;,<br>  created() &#123;<br>    window.onhashchange = () =&gt; &#123;<br>      // 一旦hash地址变化，就会触发<br>      switch (location.hash) &#123;<br>        // 根据不同的hash地址来指定不同的组件名称<br>        case &#x27;#/home&#x27;:<br>          this.comName = &#x27;Home&#x27;;<br>          break;<br>        case &#x27;#/about&#x27;:<br>          this.comName = &#x27;About&#x27;;<br>          break;<br>      &#125;<br>    &#125;;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="vue-router-基本使用"><a href="#vue-router-基本使用" class="headerlink" title="vue-router 基本使用"></a>vue-router 基本使用</h3><h4 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h4><ol><li>安装 vue-router 包</li><li>创建路由模块</li><li>导入并挂在路由</li><li>声明路由链接和占位符</li></ol><h4 id="基本使用-3"><a href="#基本使用-3" class="headerlink" title="基本使用"></a>基本使用</h4><ol><li><p>安装 vue-router</p><blockquote><p>npm i <a href="mailto:&#118;&#x75;&#101;&#45;&#114;&#x6f;&#x75;&#x74;&#101;&#114;&#64;&#51;&#46;&#53;&#x2e;&#50;">&#118;&#x75;&#101;&#45;&#114;&#x6f;&#x75;&#x74;&#101;&#114;&#64;&#51;&#46;&#53;&#x2e;&#50;</a></p></blockquote></li><li><p>创建路由模块 src/router/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 导入 Vue和 VueRouter 的包</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><br><span class="hljs-comment">// 2. 调用 Vue.use() 函数，把 VueRouter 安装为 Vue 的插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>);<br><br><span class="hljs-comment">// 3. 创建路由实例对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>();<br><br><span class="hljs-comment">// 4. 向外共享路由的实例对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure></li><li><p>导入并挂载路由 src/main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-comment">// 1. 导入路由模块</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span>;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>  <span class="hljs-comment">// 2.挂载路由</span><br>  <span class="hljs-attr">router</span>: router<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>在 src/App.vue 组件中声明路由链接和占位符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- App组件 --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h1&gt;App组件&lt;/h1&gt;<br>    &lt;!-- 1. 定义路由链接 --&gt;<br>    &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;<br>    &amp;nbsp;<br>    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;<br><br>    &lt;!-- 2. 定义路由的占位符 简易版的用的是&lt;component&gt; --&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>声明路由的匹配规则 src/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入需要用到的路由</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Home.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/About.vue&#x27;</span>;<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    <span class="hljs-comment">// 在 routes 数组中声明路由的匹配规则</span><br>    <span class="hljs-comment">// 其中 path 表示要匹配的 hash地址，component 表示要展示的路由组件</span><br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span> &#125;,<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span> &#125;<br>  ]<br>&#125;);<br></code></pre></td></tr></table></figure></li></ol><h3 id="vue-router-常见用法"><a href="#vue-router-常见用法" class="headerlink" title="vue-router 常见用法"></a>vue-router 常见用法</h3><h4 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h4><p>什么是路由重定向？</p><blockquote><p>用户在访问地址 A 的时候，强制用户跳转到地址 B，从而展示特定的组件页面</p></blockquote><p>如何设置路由的重定向？</p><blockquote><p>通过路由规则的 redirect 属性，指定一个新的路由地址</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    <span class="hljs-comment">// 在 routes 数组中声明路由的匹配规则</span><br>    <span class="hljs-comment">// 其中 path 表示要匹配的 hash地址，component 表示要展示的路由组件</span><br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span> &#125;,<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span> &#125;<br>  ]<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><h5 id="声明子路由链接和占位符"><a href="#声明子路由链接和占位符" class="headerlink" title="声明子路由链接和占位符"></a>声明子路由链接和占位符</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- App组件 --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h1&gt;App组件&lt;/h1&gt;<br><br>    &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;<br>    &amp;nbsp;<br>    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;<br><br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;!-- Home组件 --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h2&gt;Home组件&lt;/h2&gt;<br>    &lt;!-- 1. 定义子路由链接 --&gt;<br>    &lt;router-link to=&quot;/home/tab1&quot;&gt;tab1&lt;/router-link&gt;<br>    &amp;nbsp;<br>    &lt;router-link to=&quot;/home/tab2&quot;&gt;tab2&lt;/router-link&gt;<br>    &lt;!-- 2. 在Homr页面中，声明子路由的占位符 --&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>组件的关系为：<img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07 VUE2基础/image-20220810165010973.png" alt="image-20220810165010973" style="zoom:67%;" /></p><h5 id="声明子路由规则"><a href="#声明子路由规则" class="headerlink" title="声明子路由规则"></a>声明子路由规则</h5><p>通过 <code>children</code> 属性声明子路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>,<br>      <span class="hljs-attr">children</span>: [<br>        <span class="hljs-comment">// &#123; path: &#x27;tab1&#x27;, component: Tab1 &#125;,</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;tab1&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Tab1</span> &#125;, <span class="hljs-comment">// 访问 /home/tab1 时 展示Tab1 组件</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;tab2&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Tab2</span> &#125;<br>      ]<br>    &#125;<br>  ]<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h4><p>什么是动态路由？</p><blockquote><p>把 Hash 地址中的可变的部分定义为参数项，从而提供路由规则的复用性</p></blockquote><p>没有动态路由时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// router/index.js 文件中的路由规则</span><br>&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/movie/1&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Movie</span> &#125;,<br>&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/movie/2&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Movie</span> &#125;,<br>&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/movie/3&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Movie</span> &#125;,<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- App组件 --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h1&gt;App组件&lt;/h1&gt;<br>    &lt;!-- 1. 定义路由链接 --&gt;<br>    &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;<br>    &amp;nbsp;<br>    &lt;router-link to=&quot;/movie/1&quot;&gt;《钢铁侠》&lt;/router-link&gt;<br>    &lt;router-link to=&quot;/movie/2&quot;&gt;《金刚狼》&lt;/router-link&gt;<br>    &lt;router-link to=&quot;/movie/3&quot;&gt;《黑寡妇》&lt;/router-link&gt;<br>    &amp;nbsp;<br>    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;<br><br>    &lt;!-- 2. 定义路由的占位符 简易版的用的是component --&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;!-- Movie组件 --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;movie-container&quot;&gt;<br>    &lt;h3&gt;Movie组件&lt;/h3&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>以上几个路由规则，对应的组件都是 movie，因此为了提供其复用性，可以将 path 里面 /movie/后的值作为动态参数</p><blockquote><p>路由动态参数是 英文冒号: 来定义路由的参数项，如下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/movie/:id&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Movie</span> &#125; <span class="hljs-comment">// id是参数名</span><br></code></pre></td></tr></table></figure><p>若想要在 Movie 组件中获取，当前的参数值是多少，那么就需要用到 路由的参数对象 this.$route</p><h5 id="route-params-参数对象"><a href="#route-params-参数对象" class="headerlink" title="$route.params 参数对象"></a>$route.params 参数对象</h5><p>this.$route.params 可以访问到当前参数（此处是 id）的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;movie-container&quot;&gt;<br>    &lt;h3&gt;Movie组件&lt;/h3&gt;<br>    &lt;!-- this.$route 是路由的参数对象；this.$route.params 是动态匹配的参数值 --&gt;<br>    &lt;p&gt;当前电影是&#123;&#123; this.$route.params.id &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>但是这样获取参数值太过麻烦，为了简化，可以在路由规则中开启 props 传参</p><h5 id="props-接收路由参数"><a href="#props-接收路由参数" class="headerlink" title="props 接收路由参数"></a>props 接收路由参数</h5><ol><li><p>先在路由规则中，将 props 属性值设置为 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/movie/:id&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Movie</span>, <span class="hljs-attr">props</span>: <span class="hljs-literal">true</span> &#125;<br></code></pre></td></tr></table></figure></li><li><p>在 Movie 组件中，通过 props 接收路由规则中匹配到的参数项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  name: &#x27;Movie&#x27;,<br>  // 使用props 接收路由规则中匹配到的参数项<br>  props: [&#x27;id&#x27;]<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>在 Movie 组件中 模板 template 中就可以直接使用传递过来的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;movie-container&quot;&gt;<br>    &lt;h3&gt;Movie组件&lt;/h3&gt;<br>    &lt;!-- this.$route 是路由的参数对象；this.$route.params 是动态匹配的参数值 --&gt;<br>    &lt;p&gt;当前电影是&#123;&#123; this.$route.params.id &#125;&#125;&lt;/p&gt;<br>    &lt;hr /&gt;<br>    &lt;!-- 使用props接收路由参数后，就可以直接使用 动态路由参数值 --&gt;<br>    &lt;p&gt;当前电影是&#123;&#123; id &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ol><h4 id="声明式导航-amp-编程式导航"><a href="#声明式导航-amp-编程式导航" class="headerlink" title="声明式导航&amp;编程式导航"></a>声明式导航&amp;编程式导航</h4><p>什么是声明式导航？</p><blockquote><p>在浏览器中，点击链接实现导航的方式。如：点击&lt;a&gt;链接、点击&lt;router-link&gt;</p></blockquote><p>什么是编程式导航？</p><blockquote><p>在浏览器中，调用 API 方法实现导航的方式。如：调用 location.href 跳转到新页面的方法</p></blockquote><p>官网： <a href="https://router.vuejs.org/zh/guide/essentials/navigation.html#%E5%AF%BC%E8%88%AA%E5%88%B0%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BD%8D%E7%BD%AE">https://router.vuejs.org/zh/guide/essentials/navigation.html#%E5%AF%BC%E8%88%AA%E5%88%B0%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BD%8D%E7%BD%AE</a></p><h4 id="编程式导航-API"><a href="#编程式导航-API" class="headerlink" title="编程式导航 API"></a>编程式导航 API</h4><h5 id="route-push"><a href="#route-push" class="headerlink" title="$route.push()"></a>$route.push()</h5><p>跳转到指定的 hash 地址，并增加一条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h2&gt;Home组件&lt;/h2&gt;<br>    &lt;button @click=&quot;gotoMovieByPush&quot;&gt;跳转到 Movie 页面ByPush&lt;/button&gt;<br><br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;Home&#x27;,<br>  methods: &#123;<br>    gotoMovieByPush() &#123;<br>      // 跳转到 hash 地址为 /movie/1<br>      this.$router.push(&#x27;/movie/1&#x27;);<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>该方法的参数可以是一个字符串路径，或者一个描述地址的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 字符串路径</span><br>router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/users/eduardo&#x27;</span>);<br><br><span class="hljs-comment">// 带有路径的对象</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/users/eduardo&#x27;</span> &#125;);<br><br><span class="hljs-comment">// 命名的路由，并加上参数，让路由建立 url</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;eduardo&#x27;</span> &#125; &#125;);<br><br><span class="hljs-comment">// 带查询参数，结果是 /register?plan=private</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">plan</span>: <span class="hljs-string">&#x27;private&#x27;</span> &#125; &#125;);<br><br><span class="hljs-comment">// 带 hash，结果是 /about#team</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>, <span class="hljs-attr">hash</span>: <span class="hljs-string">&#x27;#team&#x27;</span> &#125;);<br></code></pre></td></tr></table></figure><h5 id="route-replace"><a href="#route-replace" class="headerlink" title="$route.replace()"></a>$route.replace()</h5><p>跳转到指定的 hash 地址，并替换掉当前的历史记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h2&gt;Home组件&lt;/h2&gt;<br>    &lt;router-link to=&quot;/home&quot;&gt;tab1&lt;/router-link&gt;<br>    &amp;nbsp;<br>    &lt;router-link to=&quot;/home/tab2&quot;&gt;tab2&lt;/router-link&gt;<br>    &amp;nbsp;<br>    &lt;button @click=&quot;gotoMovieByPush&quot;&gt;跳转到 Movie 页面ByPush&lt;/button&gt;<br>    &lt;button @click=&quot;gotoMovieByReplace&quot;&gt;跳转到 Movie 页面ByReplace&lt;/button&gt;<br><br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;Home&#x27;,<br>  methods: &#123;<br>    gotoMovieByPush() &#123;<br>      // push会增加一条历史记录<br>      this.$router.push(&#x27;/movie/1&#x27;);<br>    &#125;,<br>    gotoMovieByReplace() &#123;<br>      // replace 不会增加历史记录，而是替换掉当前历史记录<br>      this.$router.replace(&#x27;/movie/1&#x27;);<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="route-go"><a href="#route-go" class="headerlink" title="$route.go()"></a>$route.go()</h5><ul><li><p>实现导航历史前进、后退</p></li><li><p>go()里面可以添加参数，其中前进为正值）、后退为负值</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h2&gt;Home组件&lt;/h2&gt;<br>    &lt;button @click=&quot;goback&quot;&gt;后退&lt;/button&gt;<br><br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;Home&#x27;,<br>  methods: &#123;<br>    goback() &#123;<br>      // 在浏览器中前进或后退，参数为前进后退的页面层数<br>      this.$router.go(-1);<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>简化用法，一般都是前进或 后退一层</p><h6 id="router-back"><a href="#router-back" class="headerlink" title="$router.back()"></a>$router.back()</h6><p>后退一层</p><h6 id="router-forward-、"><a href="#router-forward-、" class="headerlink" title="$router.forward()、"></a>$router.forward()、</h6><p>前进一层</p><h4 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h4><p>可以控制路由的访问权限。</p><p>如：在未登录情况下，要访问后台主页，利用导航守卫来检测是否登录，未登录就强制跳转到登录页面，登录了才能访问后台主页</p><h5 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h5><p>通过路由实例对象的 <code>beforeEach()</code> 方法，即可声明<strong>全局前置守卫</strong></p><ul><li><p>在 router/index.js 中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 全局前置守卫</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/main&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 如果访问的是后台首页</span><br>    <span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;name&#x27;</span>); <span class="hljs-comment">// 拿key为name的值</span><br>    <span class="hljs-keyword">if</span> (token) &#123;<br>      <span class="hljs-comment">// 访问的是后台首页 并且 有token的值</span><br>      <span class="hljs-title function_">next</span>(); <span class="hljs-comment">// 放行</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 访问的是后台首页 但 没有token的值</span><br>      <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/login&#x27;</span>); <span class="hljs-comment">// 强制跳转到登录页面</span><br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 若是访问的其他页面，直接放行</span><br>    <span class="hljs-title function_">next</span>();<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p>每次发生跳转的时候就会自动触发 router.beforeEach(fn) 中<strong>fn</strong>这个函数</p></li><li><p>router.beforeEach((to, from, next) =&gt; {})中</p><blockquote><ul><li>to 是将要访问的路由的信息对象</li><li>from 是将要离开的路由信息对象</li><li>next 是一个函数，调用 next() 表示放行，允许这次路由导航</li></ul></blockquote></li><li><p>next 函数的 3 种调用方式</p><blockquote><ul><li>用户拥有后台主页访问权限，直接放行，next()</li><li>用户没有后台主页访问权限，强制其跳转到登录页面，next(‘/login’)</li><li>用户没有后台主页访问权限，不允许跳转到后台主页，next(false)</li></ul></blockquote></li></ul></li></ul><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="1-创建梳理项目结构"><a href="#1-创建梳理项目结构" class="headerlink" title="1 创建梳理项目结构"></a>1 创建梳理项目结构</h3><p>创建项目</p><ul><li><p>打开终端，输入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">vue create demo-toutiao<br></code></pre></td></tr></table></figure><ol><li><p>选择 <code>Manually select features</code></p><p>![image-20220616085543045](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220616085543045.png)</p></li><li><p>Babel：es6 转 es5 Router：路由 Vuex：数据容器，存储共享数据 CSS Pre-processors：CSS 预处理器，后面会提示你选择 less、sass、stylus 等 Linter / Formatter：代码格式校验（安装 eslint —— 代码规范）</p><p>![image-20220616085754841](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220616085754841.png)</p></li><li><p>选择 vue 版本–目前选择 2 版本</p><p>![image-20220616085833949](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220616085833949.png)</p></li><li><p>是否选择 history 路由模式</p><p>![image-20220616085916185](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220616085916185.png)</p></li><li><p>选择 css 预处理器，一般选择 Less</p><p>![image-20220616090030051](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220616090030051.png)</p></li><li><p>若前面选择了 Linter / Formatter, 此处就要选择</p><p>![image-20220616090108758](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220616090108758.png)</p></li><li><p>Lint on save 保存时 lint</p><p>Lint and fix on commit 保存和提交时都 lint</p><p>![image-20220616090151506](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220616090151506.png)</p></li><li><p>In dedicated config files：分别保存到单独的配置文件 In package.json：保存到 package.json 文件中这里建议选择第 1 个，保存到单独的配置文件，这样方便我们做自定义配置</p><p>![image-20220616090218146](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220616090218146.png)</p></li><li><p>是否将刚才的选择保存起来，下次可以直接用，一般选择 N，可以根据自己需要选择**</p><p>![image-20220616090340779](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220616090340779.png)</p></li></ol></li><li><p>创建好后的目录</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07 VUE基础/image-20220616090612732.png" alt="image-20220616090612732" style="zoom:50%;" /><p>components 文件夹和 views 文件夹都存放的是组件。 其中 components 文件夹存放的是可复用的组件；views 文件夹存放的是 通过路由切换的组件</p></li><li><p>安装 Vant</p><ul><li><p>vue2 安装：<code>npm i vant@latest-v2</code></p></li><li><p>使用了官网提供的方案三来导入组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">import &#123; createApp &#125; from &#x27;vue&#x27;<br>import Vant from &#x27;vant&#x27;<br>import &#x27;vant/lib/index.css&#x27;<br><br>const app = createApp()<br>app.use(Vant)<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-2-利用-vue-ui-可视化页面-创建项目"><a href="#1-2-利用-vue-ui-可视化页面-创建项目" class="headerlink" title="1.2 利用 vue ui 可视化页面 创建项目"></a>1.2 利用 vue ui 可视化页面 创建项目</h3><ol><li><p>在存放项目的目标位置打开终端，输入 <code>vue ui</code></p></li><li><p>在浏览器中 打开 <a href="http://localhost:8000/">http://localhost:8000</a> ，出现如下界面</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07 VUE2基础/image-20220814163014629.png" alt="image-20220814163014629" style="zoom:50%;" /></li><li><p>点击 创建 后，修改项目创建的路径，然后点击 ‘在此创建新项目’</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07 VUE2基础/image-20220814163111369.png" alt="image-20220814163111369" style="zoom:50%;" /></li><li><p>输入项目名，选择保存路径</p><p><img src="07 VUE2基础/image-20220814163406981.png" alt="image-20220814163406981" style="zoom:50%;" />![image-20220814164930758](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220814164930758.png)</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07 VUE2基础/image-20220814164930758.png" alt="image-20220814164930758" style="zoom:50%;" /></li><li><p>配置</p><p>![image-20220814165038241](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220814165038241.png)</p></li><li><p>选择 babel vuex 使用配置文件（此处推荐选择 linter/formatter 但我没有选择，防止一些格式报错提醒）</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07 VUE2基础/image-20220814165421201.png" alt="image-20220814165421201" style="zoom:50%;" /></li><li><p>选择 vue 版本，不保存预设 创建项目</p><p>项目创建完毕：</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07 VUE2基础/image-20220814170038359.png" alt="image-20220814170038359" style="zoom:50%;" /></li><li><p>运行项目</p><p>![image-20220814170222234](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220814170222234.png)</p></li><li><p>等待，编译成功后，就可以点击 ‘启动 app’</p><p>![image-20220814170344319](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220814170344319.png)</p><p>![image-20220814170509061](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/07</a> VUE2 基础/image-20220814170509061.png)</p></li></ol><p>10.</p><h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2 初始化"></a>2 初始化</h3><h4 id="新建组件"><a href="#新建组件" class="headerlink" title="新建组件"></a>新建组件</h4><p>在 views 文件夹中新建文件夹 Home、User</p><h4 id="tab-栏"><a href="#tab-栏" class="headerlink" title="tab 栏"></a>tab 栏</h4><ul><li><p>使用 Tabbar：在导航组件中的 Tabbar 标签栏</p></li><li><p>更换图标：基础组件处的 icon 图标</p></li><li><p>实现跳转功能：将标签改为路由模式</p><p>参考 Tabbar 标签栏中路由模式</p></li><li><p>定义路由规则</p><ul><li><p>定义首页的路由规则</p></li><li><p>定义用户的路由规则</p><p>将案例.md 文件相关的代码复制到 User.vue 组件当中</p></li></ul></li></ul><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><ul><li><p>参考：Navbar 导航栏</p></li><li><p>将标题固定在顶部，即：滚动鼠标不会被卷入不可视的区域，参考 Navbar 导航栏的 API 的 fixed</p><p><strong>注意</strong>：在 Vant 中，若某个属性默认值为 false，则当不写此属性时，该属性的值就是 false；当写了此属性，如 <code>:fixed=&quot;true&quot;</code>,可直接简写为 <code>fixed</code>，不需要完整写出</p></li><li><p>解决标题栏设置 fixed 属性后，遮住主体内容的问题</p><p>可以为内容展示页面设置 padding 值，通过测量标题栏和下方的切换栏高度设置 padding</p></li><li><p>修改背景颜色、字体颜色</p><ul><li><p>通过网页调试工具，找到需要修改的标签，再去 home 组件修改背景颜色，会将原来的背景颜色覆盖</p><p>注意：此处的背景颜色更改只是改了当前页面，无法更改其它的，后续可以学习定制主题，由此更改整个项目的主题颜色（参考：）</p></li><li><p>修改字体颜色时，直接使用类名在 Home 组件 style 里面修改 无法修改，需要在前加 /deep/ 原因是字体处，没有 data-v-xxxx，而是其子标签，因此需要加/deep/ 才能拿到该标签</p></li></ul></li></ul><h3 id="3-渲染数据"><a href="#3-渲染数据" class="headerlink" title="3 渲染数据"></a>3 渲染数据</h3><ol><li><p>安装 axios 包：<code>npm i axios -S</code></p></li><li><p>在 Vue 中配置 axios</p><ul><li><p>方案一：在 main.js 文件中将 axios 挂载到原型上 <code>Vue.prototype.$http = axios</code></p><p>缺点：复用性低</p></li><li><p>方案二：新建一个 js 文件 request.js，内容如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-keyword">const</span> request = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-comment">// 指定请求的根路径</span><br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;https://www/escook.cn&#x27;</span><br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> request;<br></code></pre></td></tr></table></figure><p>并将此文件放于文件夹 utils 工具文件夹 下（所有工具类文件，都放到 utils 文件夹下，此文件夹与 components 文件夹同级）</p><p>由此，只有要使用 axios 发起 get 或 post 请求，需先导入 request.js，然后直接使用 url 地址即可，无需再填写根路径</p></li></ul></li><li><p>在 Home 中发起请求</p><ul><li><p>先导入 axios</p><p><code>import request from ‘@/utils/request.js’</code></p></li><li><p>在其 methods 中封装方法 initArticleList</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> initArticleList () &#123;<br>    <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">data</span>: res&#125; = <span class="hljs-keyword">await</span> request.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;请求url地址&#x27;</span>, &#123;<br>        <span class="hljs-comment">// 请求参数</span><br>        <span class="hljs-attr">params</span>: &#123;<br>            <span class="hljs-attr">_page</span>: xxx,<br>            <span class="hljs-attr">_limit</span>: xxx,<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，请求 URL 地址为：<code>/articles</code></p></li><li><p>在 created 中调用 initArticleList 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initArticleList</span>();<br></code></pre></td></tr></table></figure></li></ul></li><li><p>在 User 中发起请求</p><p>步骤和在 Home 一样，因此 initArtcleList 方法也完全一致，可将 await 后面的 Promise 实例对象封装为一个模块</p><ul><li><p>在 src 目录下，新建 api 文件夹</p></li><li><p>在 api 文件夹下，新建文件 articleAPI.js</p></li><li><p>将相关的 API 接口都封装到这个模块中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request.js&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getArticleListAPI = <span class="hljs-keyword">function</span> (<span class="hljs-params">_page, _limit</span>) &#123;<br>  <span class="hljs-keyword">return</span> request.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/articles&#x27;</span>, &#123;<br>    <span class="hljs-attr">params</span>: &#123;<br>      <span class="hljs-comment">// _page: _page,// 属性和值相同，可简写</span><br>      _page,<br>      <span class="hljs-comment">// _limit: _limit</span><br>      _limit<br>    &#125;<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>在 user 中使用(home 同理)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> initArticleList () &#123;<br>    <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">data</span>: res&#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getArticleListAPI</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">page</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 home 组建的 data 中定义 数组 artList 用于存放 axios 请求拿到的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> initArticleList () &#123;<br>    <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">data</span>: res&#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getArticleListAPI</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">page</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">artList</span> = res<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>封装 ArticleInfo 组件</p><p>组件中的内容为 Home 中要展示的文章内容</p><ul><li><p>在 components 目录下新建文件夹： Article</p></li><li><p>在 Article 文件夹下新建 ArticleInfo.vue</p></li><li><p>初始化 ArticleInfo.vue</p></li><li><p>在 Home 中导入并注册 ArticleInfo.vue，根据数组 artList 的长度来决定导入的次数（使用 v-for，注意要加 :key）</p></li><li><p>将文档中 文章 item 项 的 template 和 style 赋值粘贴到 ArticleInfo 当中</p></li><li><p>封装其 props 属性</p><ul><li><p>tiltle</p></li><li><p>author</p></li><li><p>cmtCoun 评论数</p><p><span style="color:red">注意：</span>若在定义时，属性名的命名规则是“小驼峰”，那么<strong>在绑定时</strong>，官方建议改为“连字符”型，即将大写改为小写，并在前加短杠-，如：<code>:cmt-count</code></p></li><li><p>time(发布时间)</p></li><li><p>cover（封面的信息对象）</p><p><span style="color:red">注意：</span>当定义一个带有默认值的对象时（参考官方文档），对象或数组的默认值必须从一个工厂函数中获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">cover</span>: &#123;<br><span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span><br>        <span class="hljs-attr">default</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-comment">// 这个return的对象就是cover属性的默认值</span><br>            <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">type</span>: <span class="hljs-number">0</span> &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>注意: 当为 props 中的自定义属性定义类型 type 时，可以定义多个类型，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">cmtCount</span>: &#123;<br><span class="hljs-attr">type</span>: [<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Number</span>]<br>        <span class="hljs-attr">default</span>: <span class="hljs-number">0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>上拉加载更多</p><blockquote><p>参考 vant 里面的 List 列表</p></blockquote><p>当触发 onload 事件，请求下一页数据，同时 loading 设置为 true，当下一页数据请求回来之后，再把 loading 设置为 false，当在此过程中（在 loading 为 true 时），再次触发 load 事件时，由于 loading 目前还是 true，因此不会立即请求另外的数据（只有当 loading 为 false 时，才会请求数据）</p><p><code>&lt;van-list v-model=&quot;&quot; &gt;&lt;/van-list&gt;</code>将在 home 中的 ArticleInfo 包裹起来</p><p>刚开始不需要触发 onload 事件，而是直接将第一页的数据展示出来，只要当往下滑动加载更多的时候，才会触发 onload 事件，因此刚开始需要将 loading 设置为 true，当进入页面第一次请求数据结束后，再将 loading 设置为 false，之后若再触发 onload 事件就可以成功触发，并请求下一页数据</p><p>onload 事件:</p><ol><li><p>让页码值加 1</p></li><li><p>重新请求接口获取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">onload</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;触发了onload事件&#x27;</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">page</span>++<br>    <span class="hljs-comment">// 直接调用请求数据的函数是不正确的</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initArticleList</span>()<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>上述写法不正确,原因是: initArticleList()里面的 this.artList = res 会将请求回来的新数据将原来数据覆盖掉</p></li><li><p>修正: 在 initArticleList()中将旧数据和新数据合并为一个数组,而不是直接覆盖</p><p>this.artList = [旧数据在前,新数据在后],即</p><p><code>this.artList = [...this.artList, ...res]</code></p></li><li><p>如果一直不断往向下翻页面,那么 page 就会不停的自增,但是页面的数据是有限的,因此,当请求的回来的数据 res 没有内容时,即 res.length === 0, 此时该页面已经没有更多内容,需要将 finished 改为 true</p></li></ul></li></ol></li><li><p>下拉刷新的功能</p><blockquote><p>参考 vant 官网 PullRefresh 下拉刷新</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">van-pull-refresh</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;isLoading&#x27;</span> @<span class="hljs-attr">refresh</span>=<span class="hljs-string">&#x27;onRefresh&#x27;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 此处将加载更多van-list的标签包裹 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">van-pull-refresh</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下拉处理函数 onRefresh</p><ol><li><p>让页码值加 1</p></li><li><p>重新请求接口获取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">onRefresh</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">page</span>++<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initArticleList</span>()<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>此时直接写 this.initArticleList()又会出现问题,因为 initArticleList()里面定义的新加载的数据一直都是拼接在旧数据后面,但是下拉刷新获取的数据应该拼接在旧数据前面</p></li><li><p>修正: 为 iniArticleList 传入一个布尔值的参数,用于判断是 上拉加载 还是 下拉刷新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> initArticleList (isRefresh) &#123;<br>    <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">data</span>: res&#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getArticleListAPI</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">page</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span>)<br><br>    <span class="hljs-comment">// 添加判断是否为下拉刷新</span><br>    <span class="hljs-keyword">if</span> (isRefresh) &#123;<br>        <span class="hljs-comment">// 下拉刷新</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">artList</span> = [...res, ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">artList</span>]<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">loading</span> = <span class="hljs-literal">false</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 上拉加载</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">artList</span> = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">artList</span>, ...res]<br>    &#125;<br><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>使用时,只需在下拉刷新传入参数时,传入 true 即可,上拉加载不用传值,默认就是 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">onRefresh</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">page</span>++<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initArticleList</span>(<span class="hljs-literal">true</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>当不断地下拉刷新时,后面就没有数据了,此时就可以将下拉刷新禁用</p><blockquote><p>参考 vant 的 onRefresh 的 Api</p></blockquote><p>解决: 为 van-pull-refresh 标签 绑定属性 disabled</p><p><code>:diabled =&quot;finished&quot;</code></p></li></ul></li></ol></li></ol><h3 id="4-定制主题"><a href="#4-定制主题" class="headerlink" title="4 定制主题"></a>4 定制主题</h3><blockquote><p>参考 Vant-基础组件-ConfigProvider 全局配置处的定制主题</p><p>课上讲的定制主题的方法已经被废弃</p></blockquote><h3 id="5-打包"><a href="#5-打包" class="headerlink" title="5 打包"></a>5 打包</h3><p>在终端运行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">npm run build<br></code></pre></td></tr></table></figure><p>运行结束会生成 dist 文件夹，文件夹中的文件只能发布到服务器上，通过 http 协议才能正常打开，但是直接点击 dist 文件夹里面的文件，不能正常打开，因为不是 http 协议，而是 file 协议</p><p>解决：通过 vue.config.js 配置</p><blockquote><p>参考 Vue CLI-配置参考-vue.config.js-publicPath</p></blockquote><p>vue.config.js 这个配置文件，可以对整个项目的打包、构建进行全局性的配置</p><h1 id="组合方法"><a href="#组合方法" class="headerlink" title="组合方法"></a>组合方法</h1><p>反转字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">message.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>04-VUE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>模板引擎</title>
    <link href="/2022/09/12/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <url>/2022/09/12/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><h3 id="什么是模板引擎"><a href="#什么是模板引擎" class="headerlink" title="什么是模板引擎"></a>什么是模板引擎</h3><p>模板引擎，顾名思义，它可以根据程序员指定的模板结构和数据，自动生成一个完整的HTML页面</p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220917155528397.png"></p><p>优势</p><ol><li>减少了字符串的拼接操作</li><li>使代码结构更清晰</li><li>使代码更易于阅读与维护</li></ol><h3 id="art-template模板引擎安装"><a href="#art-template模板引擎安装" class="headerlink" title="art-template模板引擎安装"></a>art-template模板引擎安装</h3><p>访问网址：<a href="http://aui.github.io/art-template/zh-cn/docs/installation.html">http://aui.github.io/art-template/zh-cn/docs/installation.html</a></p><p>![image-20220517173046952](<a href="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06">https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/06</a> 前后端交互/image-20220517173046952.png)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Jquery</title>
    <link href="/2022/09/12/03-JS/JS%E6%A1%86%E6%9E%B6/Jquery/"/>
    <url>/2022/09/12/03-JS/JS%E6%A1%86%E6%9E%B6/Jquery/</url>
    
    <content type="html"><![CDATA[<h1 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h1><h2 id="Jquery介绍"><a href="#Jquery介绍" class="headerlink" title="Jquery介绍"></a>Jquery介绍</h2><p>jquery官网地址：<a href="https://jquery.com/">https://jquery.com/</a></p><h3 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h3><p>（类似于window.addEventListener(‘load’, function() { // 页面DOM加载完成的入口 })）</p><blockquote><p>$ (function () {</p><p>​    . . . // 页面DOM加载完成的入口</p><p>});</p></blockquote><p>或</p><blockquote><p>$ (document).ready(function () {</p><p>​    . . . // 页面DOM加载完成的入口</p><p>})</p></blockquote><p>推荐第一种方式</p><h4 id="补充ready-事件"><a href="#补充ready-事件" class="headerlink" title="补充ready()事件"></a>补充ready()事件</h4><p>当 DOM（document object model 文档对象模型）加载完毕且页面完全加载（<strong>包括</strong>图像）时发生 ready 事件</p><p><strong>提示：</strong>ready() 方法不应该与 &lt;body onload=””&gt; 一起使用</p><h3 id="JQuery对象"><a href="#JQuery对象" class="headerlink" title="JQuery对象"></a>JQuery对象</h3><ol><li><p>$ 是 JQuery 的别称,在代码中可以用JQuery来代替 $ (一般使用$)</p></li><li><p>JQuery的顶级对象是 $ ，相当于原生JavaScript的window，把元素利用$包装成JQuery，就可以调用JQuery的方法</p></li></ol><h4 id="JQuery对象-amp-DOM对象"><a href="#JQuery对象-amp-DOM对象" class="headerlink" title="JQuery对象 &amp; DOM对象"></a>JQuery对象 &amp; DOM对象</h4><ul><li><blockquote><p>JQuery对象只能使用JQuery的方法，DOM对象只能使用原生的JavaScript的属性和方法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// DOM对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> mydiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mydiv); <span class="hljs-comment">// DOM对象</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// JQuery对象</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;div&#x27;</span>);           <span class="hljs-comment">// Jquery对象</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;span&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// JQuery对象只能使用JQuery的方法，DOM对象只能使用原生的JavaScript的属性和方法</span></span><br><span class="language-javascript">        mydiv.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">// $(&#x27;div&#x27;).style.display = &#x27;block&#x27;; // 不合法，JQuery对象不能使用原生Js的属性方法</span></span><br><span class="language-javascript">        <span class="hljs-comment">// mydiv.hide();    // 不合法，hide是Jquery的方法</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>DOM对象与JQuery对象的相互转换</p><ul><li><p>DOM对象转为Jquery对象：</p><blockquote><p>$(DOM对象)</p></blockquote></li><li><p>Jquery对象转为DOM对象</p><blockquote><p>方式1：$(‘div’)[index]</p></blockquote><blockquote><p>方式2：$(‘div’).get(index)</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> mydiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 利用$将DOM对象转为Jquery对象</span></span><br><span class="language-javascript">        $(mydiv).<span class="hljs-title function_">show</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// Jquery对象转为DOM对象 $(&#x27;div&#x27;)[index] 或 $(&#x27;div&#x27;).get(index)</span></span><br><span class="language-javascript">        <span class="hljs-comment">// $(&#x27;div&#x27;)[0].style.backgroundColor = &#x27;orange&#x27;;</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">get</span>(<span class="hljs-number">0</span>).<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;orange&#x27;</span>;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="Jquery选择器"><a href="#Jquery选择器" class="headerlink" title="Jquery选择器"></a>Jquery选择器</h2><h3 id="Jquery基础选择器"><a href="#Jquery基础选择器" class="headerlink" title="Jquery基础选择器"></a>Jquery基础选择器</h3><blockquote><p>$(‘选择器’)</p></blockquote><table><thead><tr><th>名称</th><th>用法</th><th>说明</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(‘#id’)</td><td>获取指定的ID元素</td></tr><tr><td>全选选择器</td><td>$(‘*’)</td><td>匹配所有元素</td></tr><tr><td>类选择器</td><td>$(‘.class’)</td><td>获取同一类class的元素</td></tr><tr><td>标签选择器</td><td>$(‘标签名’)</td><td>获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(‘div,p,li’)</td><td>选取多个元素，注意用逗号隔开</td></tr><tr><td>交集选择器</td><td>$(‘li.current’)</td><td>交集元素</td></tr></tbody></table><h3 id="Jquery层级选择器"><a href="#Jquery层级选择器" class="headerlink" title="Jquery层级选择器"></a>Jquery层级选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(‘ul&gt;li’);</td><td>使用 &gt; 获取<strong>亲儿子层级</strong>的元素，注意：不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(‘ul li’);</td><td>使用 空格 代表<strong>后代选择器</strong>，获取ul下的所有元素，包括子孙等</td></tr></tbody></table><h3 id="隐式迭代"><a href="#隐式迭代" class="headerlink" title="隐式迭代"></a>隐式迭代</h3><p><strong>遍历内部DOM元素（伪数组形式存储）的过程</strong>就叫做隐式迭代</p><p>简而言之：将匹配到的所有元素内部进行遍历循环，执行相应的方法，而无须我们在进行循环，简化操作，方便调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>隐式迭代<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>隐式迭代<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>隐式迭代<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取所有div</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 为获取的div里面的问题颜色设置为 red, jquery不能使用style</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 隐式迭代：将匹配到的所有元素内部进行遍历循环，给每一个元素添加css方法</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;ul li&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Jquery筛选选择器"><a href="#Jquery筛选选择器" class="headerlink" title="Jquery筛选选择器"></a>Jquery筛选选择器</h3><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:first</td><td>$(‘li:first’)</td><td>获取第一个li元素</td></tr><tr><td>:last</td><td>$(‘li:last’)</td><td>获取最后一个li元素</td></tr><tr><td>:eq(index)</td><td>$(‘li:eq(2)’)</td><td>获取到的li元素中，选择索引号为2的元素，索引号index从0开始</td></tr><tr><td>:odd</td><td>$(‘li:odd’)</td><td>获取到的li元素中，选择<strong>索引号</strong>为奇数的元素(注意：是索引号为奇数)</td></tr><tr><td>:even</td><td>$(‘li:even’)</td><td>获取到的li元素中，选择<strong>索引号</strong>为偶数的元素</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>筛选选择器<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>筛选选择器<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>筛选选择器<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>筛选选择器<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>筛选选择器<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>筛选选择器<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;ul li:first&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;skyblue&#x27;</span>);</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;ul li:last&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>);</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;ul li:eq(2)&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;skyblue&#x27;</span>);</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;ul li:odd&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>);</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;ul li:even&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Jquery筛选方法（重点）"><a href="#Jquery筛选方法（重点）" class="headerlink" title="==Jquery筛选方法（重点）=="></a>==Jquery筛选方法（重点）==</h3><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>parent()</td><td>$(‘li’).parent()</td><td>查找父级</td></tr><tr><td>children(selector)</td><td>$(‘ul’).children(‘li’)</td><td>相当于$(‘ul&gt;li’),最近一级（<strong>亲儿子</strong>）</td></tr><tr><td>find(selector)</td><td>$(‘ul’).find(‘li’)</td><td>相当于$(‘ul li’),<strong>后代选择器</strong></td></tr><tr><td>siblings([selector])</td><td>$(‘.first’).siblings(‘li’)</td><td>查找兄弟节点，不包括自己本身</td></tr><tr><td>nextAll(selector)</td><td>$(‘.first’).nextAll()</td><td>查找当前元素之后所有同辈元素</td></tr><tr><td>prevAll(selector)</td><td>$(‘.last’).prevAll()</td><td>查找当前元素之前所有同辈元素</td></tr><tr><td>hasClass(class)</td><td>$(‘div’).hasClass(‘类名’)</td><td>检查当前元素是否含有某个特定的类，若有，返回true</td></tr><tr><td>eq(index)</td><td>$(‘li’).eq(2)</td><td>相当于$(‘li:eq(index)’),但更推荐这里的方法 .eq(index)</td></tr></tbody></table><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>index()</td><td>$(this).index()</td><td>获取当前元素索引号</td></tr></tbody></table><p>示例：排他思想</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">siblings</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);</span><br><span class="language-javascript">                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮4<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h3><blockquote><p>$(this).css(‘backgroung’, ‘red’).siblings().css(‘color’,‘’);</p></blockquote><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 自己背景颜色变化，其他不变</span></span><br><span class="language-javascript">                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;skyblue&#x27;</span>).<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Jquery样式操作"><a href="#Jquery样式操作" class="headerlink" title="Jquery样式操作"></a>Jquery样式操作</h2><h3 id="操作-css-方法"><a href="#操作-css-方法" class="headerlink" title="操作 css 方法"></a>操作 css 方法</h3><ol><li><p>参数只写属性名，返回属性值</p><blockquote><p>$(this).css(‘color’);    // 返回this中字体的颜色值</p><p>$(this).css(‘width’);    // 返回宽度，且有<strong>单位</strong></p></blockquote><p>注意：返回的宽度有<strong>单位</strong></p></li><li><p>参数写：属性名，属性值，逗号分隔，是设置一组样式，<strong>属性必须加引号</strong>，值若是<strong>数字可以不用跟单位和引号</strong></p><blockquote><p>$(this).css(‘color’, ‘red’) // 将this中字体的颜色设置为红色</p></blockquote></li><li><p>参数可以是对象形式，方便设置多组样式，属性名和属性值用冒号隔开，属性可以不用加引号</p><blockquote><p>$(‘div’).css({</p><p>​    ‘width’: ‘200px’,</p><p>​    ‘height’: 200,</p><p>​    ‘color’: ‘black’,</p><p>​    ‘background’: ‘pink’</p><p>});</p></blockquote></li></ol><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// $(&#x27;div&#x27;).css(&#x27;width&#x27;, &#x27;200px&#x27;);</span></span><br><span class="language-javascript">                <span class="hljs-comment">// $(&#x27;div&#x27;).css(&#x27;height&#x27;, 200);</span></span><br><span class="language-javascript">                <span class="hljs-comment">// $(&#x27;div&#x27;).css(&#x27;color&#x27;, &#x27;black&#x27;);</span></span><br><span class="language-javascript">                <span class="hljs-comment">// $(&#x27;div&#x27;).css(&#x27;background&#x27;, &#x27;pink&#x27;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 上面几行设置多组属性，可以写成以下对象的形式</span></span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">css</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-string">&#x27;200px&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-number">200</span>,</span><br><span class="language-javascript">                    <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;black&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-string">&#x27;background&#x27;</span>: <span class="hljs-string">&#x27;pink&#x27;</span></span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>变化<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="设置-类样式-方法"><a href="#设置-类样式-方法" class="headerlink" title="设置 类样式 方法"></a>设置 类样式 方法</h3><ol><li><p>添加类</p><blockquote><p>$(‘div’).addClass(‘current’);</p></blockquote></li><li><p>移除类</p><blockquote><p>$(‘div’).removeClass(‘current’);</p></blockquote></li><li><p>切换类</p><blockquote><p>$(‘div’).toggleClass(‘current’);</p></blockquote></li></ol><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 点击添加类</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;.btn&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;current&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">            <span class="hljs-comment">// 点击切换类</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;.toggle&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&#x27;current&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>切换一次<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;toggle&quot;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>jquery中的类操作与原生js的className的区别：</p></blockquote><ul><li><p>原生JS的className会覆盖元素原来得类名</p></li><li><p>Jquery里面的类操作，只是对指定类型进行操作，不影响原来的类名</p></li></ul><h2 id="Jquery效果"><a href="#Jquery效果" class="headerlink" title="Jquery效果"></a>Jquery效果</h2><h3 id="显示隐藏"><a href="#显示隐藏" class="headerlink" title="显示隐藏"></a>显示隐藏</h3><p>show()</p><p>hide()</p><p>toggle()</p><blockquote><p>show([speed,[easing],[fn]]);</p><p>hide([speed,[easing],[fn]]);</p><p>toggle([speed,[easing],[fn]]);</p></blockquote><ul><li>参数均可省略，即无动画直接显示</li><li>speed：三种预定义速度之一的字符串（“slow”，“normal”，“fast”），或 表示动画时长的毫秒数（如：1000）</li><li>easing：可选，用来指定切换效果，默认是“swing”，可用参数“linear”</li><li>fn：回调函数，在动画完成时执行的函数，每个元素执行一次</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">show</span>(<span class="hljs-string">&#x27;slow&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>);</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">hide</span>(<span class="hljs-string">&#x27;slow&#x27;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;slow&#x27;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h3><h4 id="滑动效果"><a href="#滑动效果" class="headerlink" title="滑动效果"></a>滑动效果</h4><p>slideDown()</p><p>slideUp()</p><p>slideToggle()</p><blockquote><p>slideDown([speed,[easing],[fn]]);</p><p>sildeUp([speed,[easing],[fn]]);</p><p>slideToggle([speed,[easing],[fn]]);</p></blockquote><p>参数说明：同显示隐藏</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>向下<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>向上<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">slideDown</span>(<span class="hljs-number">200</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">slideUp</span>(<span class="hljs-number">200</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">slideToggle</span>(<span class="hljs-number">200</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="事件切换hover"><a href="#事件切换hover" class="headerlink" title="事件切换hover"></a>事件切换hover</h4><blockquote><p>hover([over,]out);</p></blockquote><ul><li>over:鼠标移到元素上要触发的<strong>函数</strong>(相当于mouseenter)</li><li>out:鼠标移出元素要触发的<strong>函数</strong>(相当于mouseleave)</li></ul><h4 id="动画队列及停止排队"><a href="#动画队列及停止排队" class="headerlink" title="动画队列及停止排队"></a>动画队列及停止排队</h4><p>动画队列:即动画或效果一旦触发就会执行,如果多次触发,就造成多个动画或者效果排队进行</p><p>解决方法: stop()</p><p>停止方法:</p><blockquote><p>stop()</p></blockquote><ul><li>注意:stop()写到动画或者效果的前面,相当于停止结束上一次动画</li></ul><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>更多<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>更多<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>更多<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// hover(over, out) </span></span><br><span class="language-javascript">            <span class="hljs-comment">// over:鼠标移到元素上要触发的函数(相当于mouseenter)</span></span><br><span class="language-javascript">            <span class="hljs-comment">// out:鼠标移出元素要触发的函数(相当于mouseleave)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&#x27;.nav&gt;li&#x27;).hover(function () &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     $(this).find(&#x27;li&#x27;).slideDown(200);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// &#125;, function () &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     $(this).find(&#x27;li&#x27;).slideUp(200);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// &#125;)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 更为简洁的写法，如下：</span></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&#x27;.nav&gt;li&#x27;).hover(function () &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     $(this).find(&#x27;li&#x27;).slideToggle(200);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// &#125;)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 以上代码还存在问题，当鼠标快速多次经过li时，会导致动画排队</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 通过stop()修复</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;.nav&gt;li&#x27;</span>).<span class="hljs-title function_">hover</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// stop()写在动画前面</span></span><br><span class="language-javascript">                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">stop</span>().<span class="hljs-title function_">slideToggle</span>(<span class="hljs-number">200</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><h4 id="淡入淡出效果"><a href="#淡入淡出效果" class="headerlink" title="淡入淡出效果"></a>淡入淡出效果</h4><p>fadeIn()</p><p>fadeOut()</p><p>fadeToggle()</p><p>fadeTo()</p><blockquote><p>fadeIn([speed,[easing],[fn]]);</p><p>fadeOut([speed,[easing],[fn]]);</p><p>fadeToogle([speed,[easing],[fn]]);</p></blockquote><ul><li>参数同显示隐藏</li></ul><blockquote><p>fadeTo([[speed],opacity,[easing],[fn]])</p></blockquote><ul><li>opacity:透明度,<strong>必须写</strong>,取值在0-1之间</li><li>speed easing fn同显示隐藏的参数</li><li>speed参数<strong>必须写</strong></li></ul><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>淡入<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>淡出<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>透明度<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">fadeIn</span>();</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">fadeOut</span>();</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">fadeToggle</span>();</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">3</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 速度和透明度必须写</span></span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">fadeTo</span>(<span class="hljs-number">1000</span>, <span class="hljs-number">0.5</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例:高亮显示</p><p>通过设置透明度来实现高亮显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;17-images/01.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;17-images/02.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;17-images/03.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;17-images/04.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;17-images/05.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;17-images/06.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;.wrap li&#x27;</span>).<span class="hljs-title function_">hover</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 鼠标进入，其他li透明度为0.5</span></span><br><span class="language-javascript">                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">stop</span>().<span class="hljs-title function_">fadeTo</span>(<span class="hljs-number">10</span>, <span class="hljs-number">0.5</span>);</span><br><span class="language-javascript">            &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 鼠标离开，其他li透明度为1（当前的也是1，无需更改）</span></span><br><span class="language-javascript">                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">stop</span>().<span class="hljs-title function_">fadeTo</span>(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><blockquote><p>animate(params,[speed].[easing],[fn]);</p></blockquote><ul><li><p>params：想要更改的样式属性，以<strong>对象形式</strong>传递，<strong>必须写。</strong>属性名可以不用带引号，若是复合属性则需要采取驼峰命名法。其余参数可省</p><p>其余参数同 显示隐藏：</p></li><li><p>speed：三种预定义速度之一的字符串（“slow”，“normal”，“fast”），或 表示动画时长的毫秒数（如：1000）</p></li><li><p>easing：可选，用来指定切换效果，默认是“swing”，可用参数“linear”</p></li><li><p>fn：回调函数，在动画完成时执行的函数，每个元素执行一次</p></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">animate</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">width</span>: <span class="hljs-number">300</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">left</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">top</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">opacity</span>: <span class="hljs-number">0.5</span></span><br><span class="language-javascript">                &#125;, <span class="hljs-number">500</span>)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例：王者荣耀手风琴案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><br></code></pre></td></tr></table></figure><h2 id="Jquery属性操作"><a href="#Jquery属性操作" class="headerlink" title="Jquery属性操作"></a>Jquery属性操作</h2><h3 id="设置获取属性值"><a href="#设置获取属性值" class="headerlink" title="设置获取属性值"></a>设置获取属性值</h3><h4 id="固有属性值获取prop"><a href="#固有属性值获取prop" class="headerlink" title="固有属性值获取prop()"></a>固有属性值获取prop()</h4><p>固有属性：即元素自带的属性，如&lt;a&gt;元素的href</p><ol><li><p>获取固有属性</p><blockquote><p> elem.prop(“属性”); </p></blockquote></li><li><p>设置固有属性</p><blockquote><p>elem.prop(“属性”,“属性值”);    </p></blockquote></li></ol><h4 id="自定义属性值获取attr"><a href="#自定义属性值获取attr" class="headerlink" title="自定义属性值获取attr()"></a>自定义属性值获取attr()</h4><ol><li><p>获取固有属性</p><blockquote><p> elem.attr(“属性”);    // 类似原生getAttribute()</p></blockquote></li><li><p>设置固有属性</p><blockquote><p>elem.attr(“属性”,“属性值”);    // 类似原生setAttribute()</p></blockquote></li></ol><p>注：此方法也可以用于获取H5自定义属性（即以 data- 开头的属性）</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;百度&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;点击跳转百度&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> flag = $(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&#x27;checked&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag);</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-title function_">change</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&#x27;checked&#x27;</span>));</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&#x27;index&#x27;</span>));    <span class="hljs-comment">// undefined 自定义属性，prop无法获取</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;index&#x27;</span>));<span class="hljs-comment">// 自定义属性，attr获取</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="案例-购物车"><a href="#案例-购物车" class="headerlink" title="案例-购物车"></a>案例-购物车</h3><p>$(‘.j-checkbox:checked’).length 返回被选中的复选框的长度</p><h2 id="Jquery文本属性值"><a href="#Jquery文本属性值" class="headerlink" title="Jquery文本属性值"></a>Jquery文本属性值</h2><h3 id="获取设置文本内容"><a href="#获取设置文本内容" class="headerlink" title="获取设置文本内容"></a>获取设置文本内容</h3><ol><li>获取设置元素内容</li></ol><blockquote><p>elem.html()    // 会将标签一并获取</p><p>elem.html(‘文本’)    // 将元素里面的内容覆盖为 ‘文本’</p></blockquote><ol start="2"><li>获取设置元素<strong>文本内容</strong></li></ol><blockquote><p>elem.text()    //不识别标签</p><p>elem.text(‘文本’)</p></blockquote><ol start="3"><li>获取设置<strong>表单值</strong></li></ol><blockquote><p>elem.val()</p><p>elem.val(‘文本’)</p></blockquote><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入内容&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 执行结果：&lt;span&gt;我是span&lt;/span&gt;</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">html</span>());</span><br><span class="language-javascript">            <span class="hljs-comment">// $(&#x27;div&#x27;).html(&#x27;123&#x27;)</span></span><br><span class="language-javascript">            </span><br><span class="language-javascript">            <span class="hljs-comment">// 执行结果：我是span</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">text</span>());</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;只改变了内容&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">text</span>());</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-title function_">val</span>());</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;enter your name&#x27;</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="案例-购物车-1"><a href="#案例-购物车-1" class="headerlink" title="案例-购物车"></a>案例-购物车</h3><p><strong>保留n位小数</strong></p><blockquote><p>.toFixed(n)</p></blockquote><p>指定祖先元素</p><blockquote><p>parents(‘选择器’)</p></blockquote><p>截取字符串</p><p>substr()</p><p>修改表单里面的值，使用change事件</p><h2 id="Jquery元素操作"><a href="#Jquery元素操作" class="headerlink" title="Jquery元素操作"></a>Jquery元素操作</h2><p>遍历、创建、添加、删除</p><h3 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h3><p>jquery隐式迭代是对同一类元素做同样的操作，若需要给同一类元素<strong>做不同操作，就需要用到遍历</strong></p><p><strong>语法1：</strong></p><blockquote><p>$(‘div’).<strong>each</strong>(function(index, domElem) {xxx;})</p></blockquote><ul><li>each() 遍历匹配每一个元素。主要用DOM处理</li><li>里面的回调函数有2个参数：index是每个元素的索引号，domElem是每个DOM元素对象，不是jquery对象</li><li>要想使用jquery方法，需要给这个dom元素转换为jquery对象，即$(‘domElem’).</li></ul><p><strong>语法2：</strong></p><blockquote><p>$.each(object, function(index, elem) {xxx;})</p></blockquote><ul><li>$.each() 可用于<strong>遍历任何对象</strong>，主要用于数据处理，比如 数组、对象</li><li>里面的函数有2个参数：index是每个元素的索引号，elem遍历内容</li></ul><p>语法1示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">i, elem</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 回调函数function里面的i是索引号，elem是DOM元素</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i + <span class="hljs-string">&#x27;: &#x27;</span> + elem);</span><br><span class="language-javascript">                <span class="hljs-comment">// 要使用jquery，就需要转换为jquery元素</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 为所有元素文本颜色设置为红色</span></span><br><span class="language-javascript">                $(elem).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">i, elem</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 回调函数function里面的i是索引号，elem是DOM元素</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i + <span class="hljs-string">&#x27;: &#x27;</span> + elem);</span><br><span class="language-javascript">                <span class="hljs-comment">// 若要设置不同颜色：可利用数组和each</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>];</span><br><span class="language-javascript">                $(elem).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, arr[i]);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 利用each求和</span></span><br><span class="language-javascript">                sum += <span class="hljs-built_in">parseInt</span>($(elem).<span class="hljs-title function_">text</span>());</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>语法2示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $.<span class="hljs-title function_">each</span>($(<span class="hljs-string">&#x27;div&#x27;</span>), <span class="hljs-keyword">function</span> (<span class="hljs-params">i, elem</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i + <span class="hljs-string">&#x27;:&#x27;</span> + elem);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">            </span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>];</span><br><span class="language-javascript">            <span class="hljs-comment">// 遍历数组</span></span><br><span class="language-javascript">            $.<span class="hljs-title function_">each</span>(arr, <span class="hljs-keyword">function</span> (<span class="hljs-params">i, elem</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(elem);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 遍历对象</span></span><br><span class="language-javascript">            $.<span class="hljs-title function_">each</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;andy&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;女&#x27;</span></span><br><span class="language-javascript">            &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">i, elem</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i + <span class="hljs-string">&#x27;: &#x27;</span> + elem);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面遍历div的两种写法总结：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 语法1：$(‘div’).each(function(index, domElem) &#123;xxx;&#125;)</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">i, elem</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i + <span class="hljs-string">&#x27;: &#x27;</span> + elem);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">            <span class="hljs-comment">// 语法2：$.each() 可用于遍历任何对象，主要用于数据处理，比如 数组、对象</span></span><br><span class="language-javascript">            $.<span class="hljs-title function_">each</span>($(<span class="hljs-string">&#x27;div&#x27;</span>), <span class="hljs-keyword">function</span> (<span class="hljs-params">i, elem</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i + <span class="hljs-string">&#x27;:&#x27;</span> + elem);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h3><p>语法：</p><blockquote><p>$(“&lt;li&gt;&lt;/li&gt;”);    // 动态创建li标签</p></blockquote><p>创建完元素后，需要添加到指定位置</p><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><h4 id="内部添加"><a href="#内部添加" class="headerlink" title="内部添加"></a>内部添加</h4><p>内部添加元素，生成之后，他们是<strong>父子关系</strong></p><ol><li><p>将内容放在匹配元素内部最后面，类似原生的appendChild</p><blockquote><p>elem.append(‘内容’)</p></blockquote></li><li><p>将内容放在匹配元素内部最前面，</p><blockquote><p>elem.prepend(‘内容’)</p></blockquote></li></ol><h4 id="外部添加"><a href="#外部添加" class="headerlink" title="外部添加"></a>外部添加</h4><p>外部添加元素，生成之后，他们是<strong>兄弟关系</strong></p><ol><li><p>将内容放在目标元素后面</p><blockquote><p>elem.after(‘内容’);</p></blockquote></li><li><p>将内容放在目标元素前面</p><blockquote><p>elem.before(‘内容’);</p></blockquote></li></ol><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><ol><li><p>删除匹配的元素（本身）</p><blockquote><p>elem.remove();</p></blockquote></li><li><p>删除匹配的元素集合中所有的子节点</p><blockquote><p>elem.empty();</p></blockquote></li><li><p>清空匹配的元素内容</p><blockquote><p>elem.html(“”);</p></blockquote></li></ol><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>原本<br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是原本li中的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>原来的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 创建元素</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> li_1 = $(<span class="hljs-string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> li_2 = $(<span class="hljs-string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 添加元素</span></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&#x27;ul&#x27;).append(li_1);</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;ul&#x27;</span>).<span class="hljs-title function_">prepend</span>(li_2);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> div1 = $(<span class="hljs-string">&#x27;&lt;div&gt;我是后来创建的第1个&lt;/div&gt;&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> div2 = $(<span class="hljs-string">&#x27;&lt;div&gt;我是后来创建的第2个&lt;/div&gt;&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> div3 = $(<span class="hljs-string">&#x27;&lt;div&gt;我是后来创建的第3个&lt;/div&gt;&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 添加元素</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">after</span>(div1);</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">before</span>(div2);  <span class="hljs-comment">// 表示在所有div前都添加了div2</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 删除元素</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div:first&#x27;</span>).<span class="hljs-title function_">remove</span>();</span><br><span class="language-javascript">            <span class="hljs-comment">// $(&#x27;ul li&#x27;).empty();</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;ul li&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&quot;</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Jquery尺寸位置操作"><a href="#Jquery尺寸位置操作" class="headerlink" title="Jquery尺寸位置操作"></a>Jquery尺寸位置操作</h2><h3 id="jquery尺寸"><a href="#jquery尺寸" class="headerlink" title="jquery尺寸"></a>jquery尺寸</h3><table><thead><tr><th>语法</th><th>用法</th></tr></thead><tbody><tr><td>width() / height()</td><td>取得匹配元素宽度和高度 只算width / height</td></tr><tr><td>innerWidth() / innerHeight()</td><td>取得匹配元素宽度和高度 包含padding</td></tr><tr><td>outerWidth() / outerHeight()</td><td>取得匹配元素宽度和高度 包含padding border</td></tr><tr><td>outerWidth(true) / outerHeight()</td><td>取得匹配元素宽度和高度 包含padding border margin</td></tr></tbody></table><ul><li><p>以上参数为空，则是获取相应值，返回的是数字型</p></li><li><p>若参数是数字，则是修改相应值</p></li><li><p>参数可以不必写单位</p></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        正文<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// width</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">width</span>());</span><br><span class="language-javascript">            <span class="hljs-comment">// width + padding</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">innerWidth</span>());</span><br><span class="language-javascript">            <span class="hljs-comment">// width + paddin + border</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">outerWidth</span>());</span><br><span class="language-javascript">            <span class="hljs-comment">// width + paddin + border + margin</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">outerWidth</span>(<span class="hljs-literal">true</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 将div的宽度修改为150</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">width</span>(<span class="hljs-number">150</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// width+padding的值改为200，实际是修改width</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">innerWidth</span>(<span class="hljs-number">200</span>);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="jquery位置"><a href="#jquery位置" class="headerlink" title="jquery位置"></a>jquery位置</h3><p>主要有：offset(), position(), scrollTop()/scrollLeft()</p><h4 id="设置获取元素偏移"><a href="#设置获取元素偏移" class="headerlink" title="设置获取元素偏移"></a>设置获取元素偏移</h4><p>offset()</p><ul><li>设置或返回被选元素相对于 <strong>文档</strong> 的偏移坐标，跟父级没有关系</li><li>该方法有两个属性：left 和 top。<ul><li>offset().left 用于获取距离文档左侧的距离</li><li>offset().top 用于获取距离文档顶部的距离</li></ul></li><li><strong>可以设置</strong>元素的偏移：offset({top: 10, left: 30})</li></ul><p>position()</p><ul><li>获取距离带<strong>有定位父级</strong>位置的偏移坐标</li><li>若无定位，以文档为准</li><li>此方法<strong>不能设置偏移</strong></li></ul><p>scrollTop()/scrollLeft()</p><ul><li>可以获取、设置被卷去的头部(或 左侧)</li></ul><p>案例-带动画的返回顶部</p><ul><li>animate动画函数里面有个scrollTop属性，可以设置位置</li><li><blockquote><p>注意：只有元素才有animate动画函数，文档document不能调用animate函数</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back&quot;</span>&gt;</span>返回顶部<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 设置被卷去的头部</span></span><br><span class="language-javascript">            $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">scrollTop</span>(<span class="hljs-number">100</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 获取盒子距离文档顶部的偏移</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> boxTop = $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">offset</span>().<span class="hljs-property">top</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(boxTop);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">scroll</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">scrollTop</span>() &gt;= boxTop) &#123;</span><br><span class="language-javascript">                    $(<span class="hljs-string">&#x27;.back&#x27;</span>).<span class="hljs-title function_">fadeIn</span>();</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    $(<span class="hljs-string">&#x27;.back&#x27;</span>).<span class="hljs-title function_">fadeOut</span>();</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            </span><br><span class="language-javascript"><span class="hljs-comment">// 点击返回顶部            </span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;.back&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;body, html&#x27;</span>).<span class="hljs-title function_">stop</span>().<span class="hljs-title function_">animate</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">scrollTop</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>知识点：</p><ul><li><p>offset()</p><p>offset().top</p></li><li><p>scrollTop()</p></li><li><p>animate({})</p></li><li><p>stop()</p></li></ul><h4 id="案例-电梯导航"><a href="#案例-电梯导航" class="headerlink" title="案例-电梯导航"></a>案例-电梯导航</h4><p>注意使用节流阀</p><h2 id="Jquery事件"><a href="#Jquery事件" class="headerlink" title="Jquery事件"></a>Jquery事件</h2><h3 id="jQuery事件注册"><a href="#jQuery事件注册" class="headerlink" title="==jQuery事件注册=="></a>==jQuery事件注册==</h3><h4 id="单个事件注册"><a href="#单个事件注册" class="headerlink" title="单个事件注册"></a>单个事件注册</h4><blockquote><p>elem.事件(function() {});</p></blockquote><blockquote><p>$(‘div’).click(function () { 事件处理程序 })</p></blockquote><p>与原生基本一致: mouseover mouseout blur focus change keydown keyuop resize scroll</p><h4 id="事件注册on"><a href="#事件注册on" class="headerlink" title="事件注册on()"></a>事件注册on()</h4><ul><li><p>on可以绑定多个事件，多个处理事件处理程序</p><blockquote><p>$(‘div’).<strong>on</strong>({</p><p>​    mouseenter: function () {事件处理程序;},</p><p>​    click: function () {事件处理程序;}</p><p>})</p></blockquote></li><li><p>若事件处理程序相同</p><blockquote><p>$(‘div’).<strong>on</strong>(“mouseover mouseout”, function () { 事件处理程序; });</p></blockquote></li></ul><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 单个事件注册，类似原生</span></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&#x27;div&#x27;).mouseover(function () &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     $(this).addClass(&#x27;current&#x27;);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// &#125;);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&#x27;div&#x27;).mouseout(function () &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     $(this).removeClass(&#x27;current&#x27;);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// &#125;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 1. on 多个事件注册</span></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&#x27;div&#x27;).on(&#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     mouseover: function () &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//         $(this).addClass(&#x27;current&#x27;);</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     &#125;,</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     mouseout: function () &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//         $(this).removeClass(&#x27;current&#x27;);</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     &#125;</span></span><br><span class="language-javascript">            <span class="hljs-comment">// &#125;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 2. on 多个事件注册且处理程序相同，可简写</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;mouseover mouseout&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&#x27;current&#x27;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>on可以<strong>事件委派</strong>操作。将原来加给子元素的事件绑定在父元素上，将事件委派给父元素</p><blockquote><p>$(‘ul’).on(‘click’, ‘li’, function () { 事件处理程序; });</p></blockquote><p>即事件绑定在ul上，但通过点击li来触发，经过冒泡后执行alert</p></li><li><blockquote><p>(重要)on可以给<strong>未来动态创建</strong>的元素绑定事件</p></blockquote></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>事件委派<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>事件委派<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 3. on 事件委派</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 即事件绑定在ul上，但通过点击li来触发，经过冒泡后执行alert</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;ul&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;事件委派&#x27;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 4. on 给未来动态创建的元素绑定事件</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;ol&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;给未来动态创建的元素绑定事件&#x27;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> li = $(<span class="hljs-string">&#x27;&lt;li&gt;我是未来创建的小li&lt;/li&gt;&#x27;</span>);</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;ol&#x27;</span>).<span class="hljs-title function_">append</span>(li);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="jQuery事件解绑"><a href="#jQuery事件解绑" class="headerlink" title="jQuery事件解绑"></a>jQuery事件解绑</h3><h4 id="事件解绑off"><a href="#事件解绑off" class="headerlink" title="事件解绑off()"></a>事件解绑off()</h4><ol><li><p>解绑div上面的所有事件</p><blockquote><p>$(‘div’).off();</p></blockquote></li><li><p>只解绑指定事件</p><blockquote><p>$(‘div’).off(‘click’);</p></blockquote></li><li><p>解除事件委派</p><blockquote><p>$(‘ul’).off(‘click’, ‘li’);</p></blockquote></li></ol><h3 id="jQuery事件处理"><a href="#jQuery事件处理" class="headerlink" title="jQuery事件处理"></a>jQuery事件处理</h3><h4 id="一次触发one"><a href="#一次触发one" class="headerlink" title="一次触发one()"></a>一次触发one()</h4><p>只能触发一次，触发后自动解绑</p><blockquote><p>$(‘div’).one(‘click’, function () {事件处理程序;});</p></blockquote><h4 id="自动触发trigger"><a href="#自动触发trigger" class="headerlink" title="自动触发trigger()"></a>自动触发trigger()</h4><p>有些事件需要自动触发的，可以结合定时器来自动触发按钮点击事件等，就不必鼠标点击触发了</p><ol><li><p>简写形式</p><blockquote><p>elem.click()</p></blockquote></li><li><p>自动触发trigger()</p><blockquote><p>elem.trigger(‘事件’)</p></blockquote></li><li><p>自动触发triggerHandler()，不会触发元素的默认行为</p><p>如：获得input光标后，不会触发input的光标闪动 </p><blockquote><p>elem.triggerHanfler(‘事件’)</p></blockquote></li></ol><p>示例：</p><blockquote><p>// 注册事件</p><p>$(‘p’).on(‘click’, function () { alert(‘hi~’);});</p><p>// 自动触发,无需点击鼠标</p><p>// 方式1</p><p>$(‘p’).trigger(‘click’);</p><p>// 方式2</p><p>$(‘p’).click();</p><p>// 方式3</p><p>$(‘p’).triggerHandler(‘click’);</p></blockquote><h3 id="jQuery事件对象"><a href="#jQuery事件对象" class="headerlink" title="jQuery事件对象"></a>jQuery事件对象</h3><blockquote><p>elem.on(events, [selector], functions(even) { })</p></blockquote><p>阻止默认行为：event.preventDefault() 或 return false</p><p>阻止冒泡：event.stopPropagation()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击了document&#x27;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击了div&#x27;</span>);</span><br><span class="language-javascript">                event.<span class="hljs-title function_">stopPropagation</span>();</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="jQuery其他方法"><a href="#jQuery其他方法" class="headerlink" title="jQuery其他方法"></a>jQuery其他方法</h2><h3 id="jQuery拷贝对象"><a href="#jQuery拷贝对象" class="headerlink" title="jQuery拷贝对象"></a>jQuery拷贝对象</h3><p>若想要把某个对象拷贝（合并）给另外一个对象使用，此时可以使用$.extend()方法</p><p>语法：</p><blockquote><p>$.extend([deep], target, object1, [objectN]);</p></blockquote><ul><li>deep: 为true时是深拷贝，默认为false 浅拷贝</li><li>target：要拷贝的对象</li><li>object1：待拷贝到第一个对象的对象</li><li>objectN: 待拷贝到第N个对象的对象</li><li>浅拷贝是把被拷贝对象<strong>复杂数据类型</strong>中的地址拷贝给目标对象，修改目标对象会影响被拷贝对象（简单数据类型不会被影响）</li><li>深拷贝是完全克隆，拷贝的对象，而不是地址，修改目标对象不会影响被拷贝对象</li></ul><h3 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h3><p>jQuery使用$作为标识符，，其他js库可能也会用$作为标识符，这样一起使用就会引起冲突</p><p>为了解决这个问题，让jQuery和其它的js库不冲突，可同时存在，这就叫多库共存</p><p>解决方案：</p><ol><li><p>将里面的$符号统一修改为jQuery，如jQuery(‘div’)</p></li><li><p>让jquery释放对 $ 的控制权，让用户自己决定</p><blockquote><p>var newJq = jQuery.noConflict();    // 此时newJq就是原来的 $</p></blockquote></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 定义一个名为 $ 的函数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">$</span>(<span class="hljs-params">elem</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(elem);<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>));<br><br>    <span class="hljs-comment">// 上面的 $ 已经重新定义，因此再使用 $ 只能是上面函数的方法</span><br><br>    <span class="hljs-comment">// 1 使用 jQuery 替代</span><br>    jQuery.<span class="hljs-title function_">each</span>();<br>    <span class="hljs-comment">// 2 让jquery释放对 $ 的控制权，让用户自己决定</span><br>    <span class="hljs-keyword">var</span> newJq = jQuery.<span class="hljs-title function_">noConflict</span>();    <span class="hljs-comment">// 此时newJq就是原来的 $</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">newJq</span>(<span class="hljs-string">&#x27;span&#x27;</span>));<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="jQuery插件"><a href="#jQuery插件" class="headerlink" title="jQuery插件"></a>jQuery插件</h3><p>插件常用网站</p><p><a href="https://www.jq22.com/">https://www.jq22.com/</a></p><p><a href="http://www.htmleaf.com/">http://www.htmleaf.com/</a></p><p>插件使用步骤：</p><ol><li>引入相关文件（jQuery文件 和 插件文件）</li><li>复制相关html css js(调用插件)</li></ol><h2 id="实现todolist"><a href="#实现todolist" class="headerlink" title="实现todolist"></a>实现todolist</h2>]]></content>
    
    
    <categories>
      
      <category>03-JS</category>
      
      <category>JS框架</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB</title>
    <link href="/2022/09/12/MongoDB/"/>
    <url>/2022/09/12/MongoDB/</url>
    
    <content type="html"><![CDATA[<h1 id="MongoDB的安装与配置"><a href="#MongoDB的安装与配置" class="headerlink" title="MongoDB的安装与配置"></a>MongoDB的安装与配置</h1><p>下载地址：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220801154831707.png" alt="image-20220801154831707" style="zoom:50%;" /><img src="C:\Users\余萍萍\AppData\Roaming\Typora\typora-user-images\image-20220801155318645.png" alt="image-20220801155318645" style="zoom:50%;" /><img src="C:\Users\余萍萍\AppData\Roaming\Typora\typora-user-images\image-20220801155352283.png" alt="image-20220801155352283" style="zoom:50%;" /></p><p>配置</p><ol><li>此电脑 → 属性 → 高级系统设置 → 环境变量 → 选择用户变量里面的path → 点击编辑</li></ol><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220801180832848.png" alt="image-20220801180832848" style="zoom:50%;" /><p>将mongoDB的bin的地址添加到path里面：</p><img src="https://oss-pic-bucket.oss-cn-shanghai.aliyuncs.com/img/image-20220801181122007.png" alt="image-20220801181122007" style="zoom:50%;" /><ol start="2"><li><p>指定data的地址，默认为C盘的data文件夹，因此一般在C盘里面新建一个data文件夹，并把MongoDB的dbpath配置C盘的data文件夹</p><p><code>&quot;C:\Program Files\MongoDB\Server\6.0\bin\mongod.exe&quot; --dbpath &quot;C:\Program Files\MongoDB\Data&quot;</code></p><p>或切换到mongod.exe所在文件夹位置，在终端运行以下命令，来启动MongoDB</p><p><code>mongod --dbpath C:\data</code></p></li><li><p>问题：如何关闭MongoDB？</p></li><li><p>问题：<code>mongod --dbpath C:\data</code>可以改变dbpath路径，也可以启动MongoDB? </p></li><li><p>问题：为什么启动MongoDB后，任务管理中没有正在运行的MongoDB</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
